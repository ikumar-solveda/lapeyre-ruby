/*
 * Licensed Materials - Property of HCL Technologies Limited.
 * (C) Copyright HCL Technologies Limited 2024.
 */
import { getSettings } from '@/data/Settings-Server';
import { getHomePageURLs } from '@/data/sitemap-generator/HomePageURLs';
import { getStaticPageURLs } from '@/data/sitemap-generator/StaticPageURLs';
import { ServerPageProps } from '@/data/types/AppRouter';

/**
 * Generates all the SEO URLs for static pages that should indexed by search-engines (this will not
 *   generate catalog SEO URLs). This will be invoked by the SiteMapGenerateCmd, when 'SEO' feature
 *   is enabled for a store.
 *
 * @param request request sent to the SEOSiteMapView invocation
 * @returns generated XML (surrounding XML tags are generated by the invoking TS command)
 */
export const SitemapGenerator = async (props: ServerPageProps) => {
	const { cache, context } = props;
	const settings = await getSettings(cache, context);
	let counter = 0;

	const homePageURLs = await getHomePageURLs(props, settings, counter);
	counter = homePageURLs.length;
	const staticPageURLs = await getStaticPageURLs(props, settings, counter);
	// TODO -- search-landing URLs (if ES has that function -- TS API available but no openapi spec)

	// SitemapGenerateCmd in TS reads this
	const total = homePageURLs.length + staticPageURLs.length;
	const countIndicator = `	<!-- ResponseProperties?totalUrlCount=${total} -->
`;

	return [...homePageURLs, ...staticPageURLs, countIndicator].filter(Boolean).join('');
};
