{
	"openapi": "3.0.1",
	"info": {
		"title": "Inventory PBC definitions",
		"description": "<p>Create and manage Inventory and Fulfillment Center requests and their sub-components.</p>",
		"version": "24.04.25",
		"x-introduced": {
			"version": "24.04.25"
		}
	},
	"servers": [
		{
			"url": "{schema}://{hostname}:{port}/inventory/api",
			"description": "Generated server url",
			"variables": {
				"schema": {
					"default": "http",
					"enum": ["http", "https"]
				},
				"hostname": {
					"default": "localhost"
				},
				"port": {
					"default": "11080",
					"enum": ["11080", "11443"]
				}
			}
		}
	],
	"paths": {
		"/v1/persons": {
			"get": {
				"tags": ["Inventory Person"],
				"summary": "Fetch person details",
				"description": "This API returns person details that match the identifier.",
				"operationId": "getInventoryPerson",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The Person Identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentPersonResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Person"],
				"summary": "Update person details",
				"description": "This API updates person details with values provided in request body.",
				"operationId": "updateInventoryPerson",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Person"],
				"summary": "Create person details",
				"description": "This API creates person details with values provided in request body.",
				"operationId": "createInventoryPerson",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "The requested resource already exists.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Person"],
				"summary": "Delete person details",
				"description": "This API deletes person details that match the identifier.",
				"operationId": "deleteInventoryPerson",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The Person Identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Person"],
				"summary": "Patch person details",
				"description": "This API updates person details with values provided in request body.",
				"operationId": "patchInventoryPerson",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"description": "The identifier used to patch the fulfillment mode.It is matched to the fulfillment mode identifier.",
								"items": {
									"$ref": "#/components/schemas/Person"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventory-status": {
			"get": {
				"tags": ["Inventory Status"],
				"summary": "Fetch inventory status",
				"description": "This API fetches the inventory status details that matches identifier.",
				"operationId": "getInventoryStatus",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The Inventory Status Identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "available"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatusResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Status"],
				"summary": "Update inventory status",
				"description": "This API updates the inventory status details with request body.",
				"operationId": "updateInventoryStatus",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Status"],
				"summary": "Create inventory status",
				"description": "This API creates inventory status with values provided in request body.",
				"operationId": "createInventoryStatus",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "The requested resource already exists.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Status"],
				"summary": "Delete inventory status",
				"description": "This API deletes inventory status details that matches identifier.",
				"operationId": "deleteInventoryStatus",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The Inventory Status Identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "available"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Status"],
				"summary": "Patch inventory status",
				"description": "This API patches the inventory status details with request body.",
				"operationId": "patchInventoryStatus",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"description": "The identifier used to patch the inventory status.It is matched to the inventory status identifier.",
								"items": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-modes": {
			"get": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Fetch fulfillment mode",
				"description": "This API returns fulfillment mode details that match the identifier.",
				"operationId": "getInventoryFulfillmentMode",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to find the fulfillment mode.It is matched to the fulfillment mode identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "store_pickup"
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentModeResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Update fulfillment mode",
				"description": "This API updates fulfillment mode details with values provided in request body.",
				"operationId": "updateInventoryFulfillmentMode",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentMode"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Create fulfillment mode",
				"description": "This API creates fulfillment mode with values provided in request body.",
				"operationId": "createInventoryFulfillmentMode",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentMode"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "The requested resource already exists.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Delete fulfillment mode",
				"description": "This API deletes fulfillment mode that match the identifier.",
				"operationId": "deleteInventoryFulfillmentMode",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to delete the fulfillment mode.It is matched to the fulfillment mode identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "store_pickup"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Patch fulfillment mode",
				"description": "This API updates fulfillment mode details with values provided in request body.",
				"operationId": "patchInventoryFulfillmentMode",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"description": "The identifier used to patch the fulfillment mode.It is matched to the fulfillment mode identifier.",
								"items": {
									"$ref": "#/components/schemas/FulfillmentMode"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-centers/{fulfillmentCenterId}": {
			"get": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Fetch fulfillment centers.",
				"description": "This API returns the fulfillment center details.",
				"operationId": "getInventoryFulfillmentCenterById",
				"parameters": [
					{
						"name": "fulfillmentCenterId",
						"in": "path",
						"description": "The fulfillmentCenterId used to find the fulfillment centers.It is matched to the address identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "APLZ20"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Update fulfillment center details",
				"description": "This API updates fulfillment center.",
				"operationId": "updateInventoryFulfillmentCenter",
				"parameters": [
					{
						"name": "fulfillmentCenterId",
						"in": "path",
						"description": "The identifier used to update the fulfillment center.It is matched to the fulfillment center identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "R20000"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterPostActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Delete fulfillment centers.",
				"description": "This API deletes fulfillment center that match the identifier.",
				"operationId": "deleteInventoryFulfillmentCenterById",
				"parameters": [
					{
						"name": "fulfillmentCenterId",
						"in": "path",
						"description": "The identifier used to delete the fulfillment center.It is matched to the fulfillment center identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "R20000"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Patch fulfillment center details by id",
				"description": "This API patches the fulfillment center.",
				"operationId": "patchInventoryFulfillmentCenterById",
				"parameters": [
					{
						"name": "fulfillmentCenterId",
						"in": "path",
						"description": "The identifier used to patch the fulfillment center.It is matched to the fulfillment center identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "R20000"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterPostActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-center-types": {
			"get": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Fetch fulfillment center type",
				"description": "This API returns fulfillment center type details that match the identifier.",
				"operationId": "getInventoryFulfillmentCenterType",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to find the fulfillment center type.It is matched to the fulfillment center type identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "physical"
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Update fulfillment center type",
				"description": "This API updates fulfillment center type details with values provided in request body.",
				"operationId": "updateInventoryFulfillmentCenterType",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterType"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Create fulfillment center type",
				"description": "This API creates fulfillment center type with values provided in request body.",
				"operationId": "createInventoryFulfillmentCenterType",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterType"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Delete fulfillment center type",
				"description": "This API deletes fulfillment center type details that match the identifier.",
				"operationId": "deleteInventoryFulfillmentCenterType",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to delete the fulfillment center type.It is matched to the fulfillment center type identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "physical"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Patch fulfillment center type",
				"description": "This API patches the fulfillment center type.",
				"operationId": "inpbcPatchInventoryFulfillmentCenterType",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterType"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resources has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/addresses": {
			"get": {
				"tags": ["Inventory Address"],
				"summary": "Fetch address details",
				"description": "This API returns the address details that match the identifier.",
				"operationId": "getInventoryFulfillmentAddress",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to find the address details.It is matched to the address identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": 1
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentAddressResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"put": {
				"tags": ["Inventory Address"],
				"summary": "Update address details",
				"description": "This API updates the address details with details provided in request body.",
				"operationId": "updateInventoryFulfillmentAddress",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Address"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Address"],
				"summary": "Create address details",
				"description": "This API creates new address with details provided in request body.",
				"operationId": "createInventoryFulfillmentAddress",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/AddressPostActionBean"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Address"],
				"summary": "Delete address details",
				"description": "This API deletes the address details that match the addressId.",
				"operationId": "deleteInventoryFulfillmentAddress",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to delete the address details.It is matched to the address identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resources has been deleted."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Address"],
				"summary": "Patch address details",
				"description": "This API updates the address details with details provided in request body.",
				"operationId": "patchInventoryFulfillmentAddress",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Address"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/persons": {
			"get": {
				"tags": ["Inventory Person V2"],
				"description": "Get a collection of persons.",
				"operationId": "getV2Person",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email",
						"in": "query",
						"description": "The Email ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "primaryContact",
						"in": "query",
						"description": "The Primary Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "secondaryContact",
						"in": "query",
						"description": "The Secondary Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone",
						"in": "query",
						"description": "The Phone",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PersonV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Person V2"],
				"description": "Create person details",
				"operationId": "createV2Person",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Person V2"],
				"description": "Update person details",
				"operationId": "updateV2Person",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/PersonV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/persons/import": {
			"post": {
				"tags": ["Inventory Person V2"],
				"description": "Create stream of persons",
				"operationId": "createV2PersonStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/PersonV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/items": {
			"get": {
				"tags": ["Inventory Item V2"],
				"description": "Get a collection of items.",
				"operationId": "getV2Item",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Item ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The Item Description",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "unitOfMeasure",
						"in": "query",
						"description": "The Item Unit Of Measure",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minThreshold",
						"in": "query",
						"description": "The Item Min Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxThreshold",
						"in": "query",
						"description": "The Item Max Threshold",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Item V2"],
				"description": "Create item details",
				"operationId": "createV2Item",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ItemV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Item V2"],
				"description": "Update item details",
				"operationId": "updateV2Item",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/ItemV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/items/import": {
			"post": {
				"tags": ["Inventory Item V2"],
				"description": "Create stream of items",
				"operationId": "createV2ItemStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/ItemV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/item-attributes": {
			"get": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Get a collection of item attributes.",
				"operationId": "getV2ItemAttribute",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Item Attribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Item Attribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value1",
						"in": "query",
						"description": "The Item Attribute Value1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value2",
						"in": "query",
						"description": "The Item Attribute Value2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Partnumber",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemAttributeV2ResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Create item attribute details",
				"operationId": "createV2ItemAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ItemAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Update item attribute details",
				"operationId": "updateV2ItemAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/ItemAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/item-attributes/import": {
			"post": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Create stream of item attributes",
				"operationId": "createV2ItemAttributeStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/ItemAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-statuses": {
			"get": {
				"tags": ["Inventory Status V2"],
				"description": "Get a collection of inventory statuses.",
				"operationId": "getV2InventoryStatus",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Inventory Status ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Inventory Status Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The Inventory Status Description",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatusV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Status V2"],
				"description": "Create inventory status details",
				"operationId": "createV2InventoryStatus",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryStatusRequestBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Status V2"],
				"description": "Update inventory status details",
				"operationId": "updateV2InventoryStatus",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-statuses/import": {
			"post": {
				"tags": ["Inventory Status V2"],
				"description": "Create stream of inventory statuses",
				"operationId": "createV2InventoryStatusStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-attributes": {
			"get": {
				"tags": ["Inventory Attribute V2"],
				"description": "Get a collection of inventory attributes.",
				"operationId": "getV2InventoryAttribute",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Inventory Attribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Inventory Attribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value1",
						"in": "query",
						"description": "The Inventory Attribute Value1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value2",
						"in": "query",
						"description": "The Inventory Attribute Value2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "internal",
						"in": "query",
						"description": "The Inventory Attribute Type",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Partnumber",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The Fulfillment Center ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "store",
						"in": "query",
						"description": "The Store",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryAttributeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Attribute V2"],
				"description": "Create inventory attribute details",
				"operationId": "createV2InventoryAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Attribute V2"],
				"description": "Update inventory attribute details",
				"operationId": "updateV2InventoryAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-attributes/import": {
			"post": {
				"tags": ["Inventory Attribute V2"],
				"description": "Create stream of inventory attributes",
				"operationId": "createV2InventoryAttributeStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventories": {
			"get": {
				"tags": ["Inventory V2"],
				"description": "Get a collection of inventories.",
				"operationId": "getV2Inventory",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The Fulfillment Center ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Part Number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "store",
						"in": "query",
						"description": "The Store",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "availableQuantity",
						"in": "query",
						"description": "The Inventory Available Quantity",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "unavailable",
						"in": "query",
						"description": "The Inventory Unavailable",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The Inventory Status",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minThreshold",
						"in": "query",
						"description": "The Inventory Min Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxThreshold",
						"in": "query",
						"description": "The Inventory Max Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "lastUpdated",
						"in": "query",
						"description": "The Inventory Last Updated Date Time",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryV2ResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory V2"],
				"description": "Create inventory details",
				"operationId": "createV2Inventory",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory V2"],
				"description": "Update inventory details",
				"operationId": "updateV2Inventory",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventories/import": {
			"post": {
				"tags": ["Inventory V2"],
				"description": "Create stream of inventories",
				"operationId": "createV2InventoryStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/InventoryV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-modes": {
			"get": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Get a collection of fulfillment modes.",
				"operationId": "getV2FulfillmentMode",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentMode ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentMode Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentMode Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentModeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Create fulfillment mode details",
				"operationId": "createV2FulfillmentMode",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentModeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Update fulfillment mode details",
				"operationId": "updateV2FulfillmentMode",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentModeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-modes/import": {
			"post": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Create stream of fulfillment modes",
				"operationId": "createV2FulfillmentModeStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentModeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-centers": {
			"get": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Get a collection of fulfillment centers.",
				"operationId": "getV2FulfillmentCenter",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenter ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenter Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentCenter Description",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The FulfillmentCenter Status",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "lastUpdated",
						"in": "query",
						"description": "The FulfillmentCenter Last Updated",
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "addressId",
						"in": "query",
						"description": "The FulfillmentCenter Address ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "mode",
						"in": "query",
						"description": "The FulfillmentCenter Mode",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The FulfillmentCenter Type",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact",
						"in": "query",
						"description": "The FulfillmentCenter Contact",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Create fulfillment center details",
				"operationId": "createV2FulfillmentCenter",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Update fulfillment center details",
				"operationId": "updateV2FulfillmentCenter",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-centers/import": {
			"post": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Create stream of fulfillment centers",
				"operationId": "createV2FulfillmentCenterStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-types": {
			"get": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Get a collection of fulfillment center types.",
				"operationId": "getV2FulfillmentCenterType",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenterType ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenterType Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentCenterType Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Create fulfillment center type details",
				"operationId": "createV2FulfillmentCenterType",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterTypeDTO"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Update fulfillment center type details",
				"operationId": "updateV2FulfillmentCenterType",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-types/import": {
			"post": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Create stream of fulfillment center types",
				"operationId": "createV2FulfillmentCenterTypeStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-attributes": {
			"get": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Get a collection of fulfillment center attributes.",
				"operationId": "getV2FulfillmentCenterAttribute",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenterAttribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenterAttribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value1",
						"in": "query",
						"description": "The FulfillmentCenterAttribute Value1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value2",
						"in": "query",
						"description": "The FulfillmentCenterAttribute Value2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The FulfillmentCenter ID",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterAttributeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Create fulfillment center attribute details",
				"operationId": "createV2FulfillmentCenterAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Update fulfillment center attribute details",
				"operationId": "updateV2FulfillmentCenterAttribute",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-attributes/import": {
			"post": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Create stream of fulfillment center attributes",
				"operationId": "createV2FulfillmentCenterAttributeStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/file-uploads": {
			"get": {
				"tags": ["Inventory File Upload V2"],
				"description": "Get a collection of file uploads.",
				"operationId": "getV2FileUpload",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The File Upload ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "jobNumber",
						"in": "query",
						"description": "The File Upload Job Number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact",
						"in": "query",
						"description": "The File Upload Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fileName",
						"in": "query",
						"description": "The File Upload FileName",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "entity",
						"in": "query",
						"description": "The File Upload Entiry",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "timeCreated",
						"in": "query",
						"description": "The File Upload Time Created",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeScheduled",
						"in": "query",
						"description": "The File Upload Time Scheduled",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeStarted",
						"in": "query",
						"description": "The File Upload Time Started",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeCompleted",
						"in": "query",
						"description": "The File Upload Time Completed",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The File Upload Status",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory File Upload V2"],
				"summary": "Inventory file uploads",
				"description": "This API uploads the inventory the files.",
				"operationId": "createV2FileUpload",
				"parameters": [
					{
						"name": "scheduledTimestamp",
						"in": "query",
						"description": "The scheduled timestamp to process the input files.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "yyyyMMdd_HHmmss"
					},
					{
						"name": "user",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"required": ["fileToUpload"],
								"type": "object",
								"properties": {
									"fileToUpload": {
										"type": "array",
										"description": "The fileToUpload is list of input inventory files to be loaded. Suported types are .csv and .zip. All files should be of same type.",
										"items": {
											"type": "string",
											"format": "binary"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"202": {
						"description": "The request has been accepted.",
						"headers": {
							"Location": {
								"description": "The URI of the newly uploaded file(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/events": {
			"get": {
				"tags": ["Inventory Event V2"],
				"description": "Get a collection of events.",
				"operationId": "getV2Event",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Event ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Event Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The Event Status",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The Event Type",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "resource",
						"in": "query",
						"description": "The Event Resource",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The Event Action",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "code",
						"in": "query",
						"description": "The Event Code",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "message",
						"in": "query",
						"description": "The Event Message",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Event V2"],
				"description": "Create event details",
				"operationId": "createV2Event",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Event V2"],
				"description": "Update event details",
				"operationId": "updateV2Event",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/EventV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/events/import": {
			"post": {
				"tags": ["Inventory Event V2"],
				"description": "Create stream of events",
				"operationId": "createV2EventStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/EventV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/addresses": {
			"get": {
				"tags": ["Inventory Address V2"],
				"description": "Get a collection of addresses.",
				"operationId": "getV2Address",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Address ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "addressLine1",
						"in": "query",
						"description": "The Address Line 1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressLine2",
						"in": "query",
						"description": "The Address Line 2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressLine3",
						"in": "query",
						"description": "The Address Line 3",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "city",
						"in": "query",
						"description": "The Address City",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"in": "query",
						"description": "The Address State",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "country",
						"in": "query",
						"description": "The Address Country",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "zip",
						"in": "query",
						"description": "The Address Zip",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone",
						"in": "query",
						"description": "The Address Phone",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fax",
						"in": "query",
						"description": "The Address Fax",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "The Address Latitude",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "The Address Longitude",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Address V2"],
				"description": "Create address details",
				"operationId": "createV2Address",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddressV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Address V2"],
				"description": "Update address details",
				"operationId": "updateV2Address",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/AddressV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/addresses/import": {
			"post": {
				"tags": ["Inventory Address V2"],
				"description": "Create stream of addresses",
				"operationId": "createV2AddressStream",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/AddressV2"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"201": {
						"description": "The operation was successful.",
						"headers": {
							"Location": {
								"description": "The URI of the Resource",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventory-locations": {
			"get": {
				"tags": ["Inventory Locations"],
				"summary": "Locate inventory with default item attributes.",
				"description": "Find inventory locations with default item attributes such as quantity of 1 and C62 unit of measure.",
				"operationId": "getInventoryLocations",
				"parameters": [
					{
						"name": "store",
						"in": "query",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center code(s).",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "R00B2C"
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The part number.",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "LR-FNTR-CO-0001-0001"
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The limit used to specify number of fulfillment centers for each page.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 10
						},
						"example": 10
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "The sortBy used to sort the fulfillment centers. For example fulfillmentCenterName.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "fulfillmentCenterId"
						},
						"example": "fulfillmentCenterName"
					},
					{
						"name": "sortDir",
						"in": "query",
						"description": "The sortDir used to sort fulfillment centers.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "ASC"
						},
						"example": "ASC"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/LocateInventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": ["Inventory Locations"],
				"summary": "Locate inventory with additional item attributes.",
				"description": "Find inventory locations with request body to take additional item parameters such as quantity and unit of measure.",
				"operationId": "getInventoryLocationsWithRequestBody",
				"parameters": [
					{
						"name": "store",
						"in": "query",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center code(s).",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "R00B2C"
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The limit used to specify number of fulfillment centers for each page.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 10
						},
						"example": 10
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "The sortBy used to sort the fulfillment centers. For example fulfillmentCenterName.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "fulfillmentCenterId"
						},
						"example": "fulfillmentCenterName"
					},
					{
						"name": "sortDir",
						"in": "query",
						"description": "The sortDir used to sort fulfillment centers.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "ASC"
						},
						"example": "ASC"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LocateInventoryRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/LocateInventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v1/inventories/reverse": {
			"post": {
				"tags": ["Inventory"],
				"summary": "Performs inventory reverse operation by store",
				"description": "This API reverse the inventory match the store.",
				"operationId": "reverseInventory",
				"parameters": [
					{
						"name": "store",
						"in": "query",
						"description": "The store used to reverse the inventory.It is matched to the store name.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "commitAll",
						"in": "query",
						"description": "The commitAll used to commit the records.",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						},
						"example": true
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ReverseInventoryResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventories/reserve": {
			"post": {
				"tags": ["Inventory"],
				"summary": "Performs inventory reserve operation",
				"description": "This API reserve the inventory match the store.",
				"operationId": "reserveInventory",
				"parameters": [
					{
						"name": "store",
						"in": "query",
						"description": "The store used to reserve the inventory.It is matched to the store name.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "commitAll",
						"in": "query",
						"description": "The commitAll used to commit the records.",
						"required": false,
						"schema": {
							"type": "boolean",
							"default": false
						},
						"example": true
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryActionResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventories/check": {
			"post": {
				"tags": ["Inventory"],
				"summary": "Check inventory by store",
				"description": "This API checks the inventory details that match the store.",
				"operationId": "performInventoryAction",
				"parameters": [
					{
						"name": "store",
						"in": "query",
						"description": "The store used to check the inventory.It is matched to the store name.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/CheckInventoryResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-centers": {
			"get": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Fetch fulfillment centers.",
				"description": "This API returns the list of fulfillment centers.",
				"operationId": "getInventoryFulfillmentCenter",
				"parameters": [
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The fulfillment center id used to find the fulfillment center.It is matched to the fulfillment center id.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "APLZ20"
					},
					{
						"name": "fulfillmentCenterName",
						"in": "query",
						"description": "The fulfillment center name used to find the fulfillment center.It is matched to the fulfillment center name.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenterType",
						"in": "query",
						"description": "The fulfillment center type used to find the fulfillment center.It is matched to the fulfillment center type.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "factory"
					},
					{
						"name": "person",
						"in": "query",
						"description": "The Person Identifier.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					},
					{
						"name": "searchTerm",
						"in": "query",
						"description": "The searchTerm will check for a match with Fulfillment Center Name, Id, Address, Region, Status, Type, Contact Person Name, Contact Person EmailId.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "The latitude used to find the fulfillment centers. It is matched to the latitude of address.",
						"required": false,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 43.82600021362305
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "The longitude used to find the fulfillment centers. It is matched to the longitude of address.",
						"required": false,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": -79.2770004272461
					},
					{
						"name": "radius",
						"in": "query",
						"description": "The radius used to find the fulfillment centers.It is matched to radius.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"example": 10
					},
					{
						"name": "distanceUnit",
						"in": "query",
						"description": "The distanceUnit used to identify the radius in miles or kilometers.It is distance measurement(KM/Miles)  .",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "KM"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status used to find the fulfillment centers.It is matched to the status of fulfillment centers.",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": true
					},
					{
						"name": "city",
						"in": "query",
						"description": "The city used to find the fulfillment centers.It is matched to the city of fulfillment center address.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Toronto"
					},
					{
						"name": "state",
						"in": "query",
						"description": "The state used to find the fulfillment centers.It is matched to the state of fulfillment center address.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Ontario"
					},
					{
						"name": "country",
						"in": "query",
						"description": "The country used to find the fulfillment centers.It is matched to the country of fulfillment center address.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "Canada"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The offset specify page number.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"example": 1
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The limit used to specify number of fulfillment centers for each page.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32"
						},
						"example": 10
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "The sortBy used to sort the fulfillment centers. For example fulfillmentCenterName.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "fulfillmentCenterName"
					},
					{
						"name": "sortDir",
						"in": "query",
						"description": "The sortDir used to sort fulfillment centers.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "DESC"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"post": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Create fulfillment center(s)",
				"description": "This API creates fulfillment center(s).",
				"operationId": "createInventoryFulfillmentCenter",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterPostActionBean"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource(s) has been created.",
						"headers": {
							"Location": {
								"description": "The URI of the newly created resource(s)",
								"style": "simple",
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Delete fulfillment centers.",
				"description": "This API deletes fulfillment center that match the identifier.",
				"operationId": "deleteInventoryFulfillmentCenter",
				"parameters": [
					{
						"name": "identifier",
						"in": "query",
						"description": "The identifier used to delete the fulfillment center.It is matched to the fulfillment center identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "R20000"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resources has been deleted."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center"],
				"summary": "Patch fulfillment center details",
				"description": "This API patches fulfillment center.",
				"operationId": "patchInventoryFulfillmentCenter",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "array",
								"description": "The identifier used to update the fulfillment center.It is matched to the fulfillment center identifier.",
								"items": {
									"$ref": "#/components/schemas/FulfillmentCenterPostActionBean"
								}
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/persons/{id}": {
			"get": {
				"tags": ["Inventory Person V2"],
				"description": "Get person details.",
				"operationId": "getV2PersonById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PersonV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Person V2"],
				"description": "Delete person details by ID",
				"operationId": "deleteV2PersonById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Person V2"],
				"description": "Update person details by ID",
				"operationId": "updateV2PersonById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PersonV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/items/{id}": {
			"get": {
				"tags": ["Inventory Item V2"],
				"description": "Get item details.",
				"operationId": "getV2ItemById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Item V2"],
				"description": "Delete item details by ID",
				"operationId": "deleteV2ItemById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Item V2"],
				"description": "Update item details by ID",
				"operationId": "updateV2ItemById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ItemV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/item-attributes/{id}": {
			"get": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Get item attribute details.",
				"operationId": "getV2ItemAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemAttributeV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Delete item attribute details by ID",
				"operationId": "deleteV2ItemAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Update item attribute details by ID",
				"operationId": "updateV2ItemAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ItemAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-statuses/{id}": {
			"get": {
				"tags": ["Inventory Status V2"],
				"description": "Get inventory status details.",
				"operationId": "getV2InventoryStatusById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatusRequestBody"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Status V2"],
				"description": "Delete inventory status details by ID",
				"operationId": "deleteV2InventoryStatusById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Status V2"],
				"description": "Update inventory status details by ID",
				"operationId": "updateV2InventoryStatusById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryStatusRequestBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-attributes/{id}": {
			"get": {
				"tags": ["Inventory Attribute V2"],
				"description": "Get inventory attribute details.",
				"operationId": "getV2InventoryAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryAttributeV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Attribute V2"],
				"description": "Delete inventory attribute details by ID",
				"operationId": "deleteV2InventoryAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Attribute V2"],
				"description": "Update inventory attribute details by ID",
				"operationId": "updateV2InventoryAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventories/{id}": {
			"get": {
				"tags": ["Inventory V2"],
				"description": "Get inventory details.",
				"operationId": "getV2InventoryById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryV2"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory V2"],
				"description": "Delete inventory details by ID",
				"operationId": "deleteV2InventoryById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory V2"],
				"description": "Update inventory details by ID",
				"operationId": "updateV2InventoryById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-modes/{id}": {
			"get": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Get fulfillment mode details.",
				"operationId": "getV2FulfillmentModeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentModeV2"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Delete fulfillment mode details by ID",
				"operationId": "deleteV2FulfillmentModeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Update fulfillment mode details by ID",
				"operationId": "updateV2FulfillmentModeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentModeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-centers/{id}": {
			"get": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Get fulfillment center details.",
				"operationId": "getV2FulfillmentCenterById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Delete fulfillment center details by ID",
				"operationId": "deleteV2FulfillmentCenterById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Update fulfillment center details by ID",
				"operationId": "updateV2FulfillmentCenterById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-types/{id}": {
			"get": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Get fulfillment center type details.",
				"operationId": "getV2FulfillmentCenterTypeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Delete fulfillment center type details by ID",
				"operationId": "deleteV2FulfillmentCenterTypeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Update fulfillment center type details by ID",
				"operationId": "updateV2FulfillmentCenterTypeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterTypeDTO"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-attributes/{id}": {
			"get": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Get fulfillment center attribute details.",
				"operationId": "getV2FulfillmentCenterAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Delete fulfillment center attribute details by ID",
				"operationId": "deleteV2FulfillmentCenterAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Update fulfillment center attribute details by ID",
				"operationId": "updateV2FulfillmentCenterAttributeById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/events/{id}": {
			"get": {
				"tags": ["Inventory Event V2"],
				"description": "Get event details.",
				"operationId": "getV2EventById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Event V2"],
				"description": "Delete event details by ID",
				"operationId": "deleteV2EventById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Event V2"],
				"description": "Update event details by ID",
				"operationId": "updateV2EventById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/EventV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/addresses/{id}": {
			"get": {
				"tags": ["Inventory Address V2"],
				"description": "Get address details.",
				"operationId": "getV2AddressById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressV2"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Address V2"],
				"description": "Delete address details by ID",
				"operationId": "deleteV2AddressById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Address V2"],
				"description": "Update address details by ID",
				"operationId": "updateV2AddressById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddressV2"
							}
						}
					},
					"required": true
				},
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"204": {
						"description": "The operation was successful."
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/persons/{personId}": {
			"get": {
				"tags": ["Inventory Person"],
				"summary": "Fetch person details",
				"description": "This API returns person details that match the identifier.",
				"operationId": "getInventoryPersonById",
				"parameters": [
					{
						"name": "personId",
						"in": "path",
						"description": "The Person Identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentPersonResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Person"],
				"summary": "Delete person details",
				"operationId": "deleteInventoryPersonById",
				"parameters": [
					{
						"name": "personId",
						"in": "path",
						"description": "The Person Identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been deleted."
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Person"],
				"summary": "Patch person details",
				"description": "This API updates person details with values provided in request body.",
				"operationId": "patchInventoryPersonById",
				"parameters": [
					{
						"name": "personId",
						"in": "path",
						"description": "The identifier used to patch the fulfillment mode.It is matched to the fulfillment mode identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "contact@hcl.com"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Person"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventory-status/{statusId}": {
			"get": {
				"tags": ["Inventory Status"],
				"summary": "Fetch inventory status",
				"description": "This API fetches the inventory status details that matches identifier.",
				"operationId": "getInventoryStatusById",
				"parameters": [
					{
						"name": "statusId",
						"in": "path",
						"description": "The Inventory Status Identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "available"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatusResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Status"],
				"summary": "Patch inventory status",
				"description": "This API patch the inventory status details with request body.",
				"operationId": "patchInventoryStatusById",
				"parameters": [
					{
						"name": "statusId",
						"in": "path",
						"description": "The identifier used to patch the inventory status.It is matched to the inventory status identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "available"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InventoryStatusRequestBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-modes/{fulfillmentModeId}": {
			"get": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Fetch fulfillment mode",
				"description": "This API returns fulfillment mode details that match the identifier.",
				"operationId": "getInventoryFulfillmentModeById",
				"parameters": [
					{
						"name": "fulfillmentModeId",
						"in": "path",
						"description": "The identifier used to find the fulfillment mode.It is matched to the fulfillment mode identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "store_pickup"
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentModeResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Mode"],
				"summary": "Patch fulfillment mode",
				"description": "This API updates fulfillment mode details with values provided in request body.",
				"operationId": "patchInventoryFulfillmentModeById",
				"parameters": [
					{
						"name": "fulfillmentModeId",
						"in": "path",
						"description": "The identifier used to patch the fulfillment mode.It is matched to the fulfillment mode identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "online"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentMode"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-center-types/{fulfillmentCenterTypeId}": {
			"get": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Fetch fulfillment center type by identifier",
				"description": "This API returns fulfillment center type details that match the identifier.",
				"operationId": "getInventoryFulfillmentCenterTypeById",
				"parameters": [
					{
						"name": "fulfillmentCenterTypeId",
						"in": "path",
						"description": "The fulfillmentCenterTypeId used to find the fulfillment center type.It is matched to the fulfillment center type identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "physical"
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Fulfillment Center Type"],
				"summary": "Patch fulfillment center type by identifier",
				"description": "This API patches the fulfillment center type by identifier.",
				"operationId": "inpbcPatchInventoryFulfillmentCenterTypeById",
				"parameters": [
					{
						"name": "fulfillmentCenterTypeId",
						"in": "path",
						"description": "The identifier used to patch the fulfillment center type.It is matched to the fulfillment center identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "factory"
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/FulfillmentCenterType"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/events/{id}": {
			"get": {
				"tags": ["Inventory Event"],
				"summary": "Get events by ID",
				"operationId": "getInventoryEventById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/EventResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Event"],
				"summary": "Patch event by id",
				"operationId": "updateInventoryEvent",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Event"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/addresses/{addressId}": {
			"get": {
				"tags": ["Inventory Address"],
				"summary": "Fetch address details by identifier",
				"description": "This API returns the address details that match the addressId.",
				"operationId": "getInventoryFulfillmentAddressById",
				"parameters": [
					{
						"name": "addressId",
						"in": "path",
						"description": "The identifier used to find the address details.It is matched to the address identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentAddressResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory Address"],
				"summary": "Delete address details",
				"description": "This API deletes the address details that match the addressId.",
				"operationId": "deleteInventoryFulfillmentAddressById",
				"parameters": [
					{
						"name": "addressId",
						"in": "path",
						"description": "The addressId used to delete the address details.It is matched to the address identifier.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": 1
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resources has been deleted."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"patch": {
				"tags": ["Inventory Address"],
				"summary": "Patch address details",
				"description": "This API updates the address details with details provided in request body.",
				"operationId": "patchInventoryFulfillmentAddressById",
				"parameters": [
					{
						"name": "addressId",
						"in": "path",
						"description": "The identifier used to patch the address.It is matched to the address identifier.",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"example": 1
					}
				],
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddressPostActionBean"
							}
						}
					},
					"required": true
				},
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/upload-statuses": {
			"get": {
				"tags": ["Inventory File Upload Status V2"],
				"description": "Get a collection of file upload statuses.",
				"operationId": "getV2FileUploadStatus",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "Limits search results to include only those with indexed fields matching the value of this parameter.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "identifier",
						"in": "query",
						"description": "The File Upload Status Identifier",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The File Upload Status Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The File Upload Status Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadStatusV2ResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/upload-statuses/{id}": {
			"get": {
				"tags": ["Inventory File Upload Status V2"],
				"description": "Get file upload status details by Identifier.",
				"operationId": "getV2FileUploadStatusById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadStatusRequestBody"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/persons/export": {
			"get": {
				"tags": ["Inventory Person V2"],
				"description": "Get a stream of persons.",
				"operationId": "getV2PersonStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email",
						"in": "query",
						"description": "The Email ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "primaryContact",
						"in": "query",
						"description": "The Primary Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "secondaryContact",
						"in": "query",
						"description": "The Secondary Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone",
						"in": "query",
						"description": "The Phone",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PersonV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/items/{id}/{relationshipName}": {
			"get": {
				"tags": ["Inventory Item V2"],
				"description": "Get item relationship by ID.",
				"operationId": "getV2ItemRelationshipById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "relationshipName",
						"in": "path",
						"description": "The Relationship Name.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully. The response schema will vary based on relationship type.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityRelationshipContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/items/export": {
			"get": {
				"tags": ["Inventory Item V2"],
				"description": "Get a stream of items.",
				"operationId": "getV2ItemStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Item ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The Item Description",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "unitOfMeasure",
						"in": "query",
						"description": "The Item Unit Of Measure",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minThreshold",
						"in": "query",
						"description": "The Item Min Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxThreshold",
						"in": "query",
						"description": "The Item Max Threshold",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/item-attributes/export": {
			"get": {
				"tags": ["Inventory Item Attribute V2"],
				"description": "Get a stream of item attributes.",
				"operationId": "getV2ItemAttributeStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Item Attribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Item Attribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value1",
						"in": "query",
						"description": "The Item Attribute Value1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value2",
						"in": "query",
						"description": "The Item Attribute Value2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Partnumber",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ItemAttributeV2ResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-statuses/export": {
			"get": {
				"tags": ["Inventory Status V2"],
				"description": "Get a stream of inventory statuses.",
				"operationId": "getV2InventoryStatusStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Inventory Status ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Inventory Status Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The Inventory Status Description",
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatusV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventory-attributes/export": {
			"get": {
				"tags": ["Inventory Attribute V2"],
				"description": "Get a stream of inventory attributes.",
				"operationId": "getV2InventoryAttributeStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Inventory Attribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Inventory Attribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value1",
						"in": "query",
						"description": "The Inventory Attribute Value1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value2",
						"in": "query",
						"description": "The Inventory Attribute Value2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "internal",
						"in": "query",
						"description": "The Inventory Attribute Type",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Partnumber",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The Fulfillment Center ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "store",
						"in": "query",
						"description": "The Store",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryAttributeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventories/{id}/{relationshipName}": {
			"get": {
				"tags": ["Inventory V2"],
				"description": "Get inventory relationship by ID.",
				"operationId": "getV2InventoryRelationshipById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "relationshipName",
						"in": "path",
						"description": "The Relationship Name.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully. The response schema will vary based on relationship type.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityRelationshipContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/inventories/export": {
			"get": {
				"tags": ["Inventory V2"],
				"description": "Get a stream of inventories.",
				"operationId": "getV2InventoryStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fulfillmentCenterId",
						"in": "query",
						"description": "The Fulfillment Center ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "partNumber",
						"in": "query",
						"description": "The Part Number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "store",
						"in": "query",
						"description": "The Store",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "availableQuantity",
						"in": "query",
						"description": "The Inventory Available Quantity",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "unavailable",
						"in": "query",
						"description": "The Inventory Unavailable",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The Inventory Status",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "minThreshold",
						"in": "query",
						"description": "The Inventory Min Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "maxThreshold",
						"in": "query",
						"description": "The Inventory Max Threshold",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "lastUpdated",
						"in": "query",
						"description": "The Inventory Last Updated Date Time",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryV2ResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-modes/export": {
			"get": {
				"tags": ["Inventory Fulfillment Mode V2"],
				"description": "Get a stream of fulfillment modes.",
				"operationId": "getV2FulfillmentModeStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentMode ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentMode Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentMode Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentModeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-centers/{id}/{relationshipName}": {
			"get": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Get fulfillment center relationship by ID.",
				"operationId": "getV2FulfillmentCenterRelationshipById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "relationshipName",
						"in": "path",
						"description": "The Relationship Name.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully. The response schema will vary based on relationship type.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EntityRelationshipContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-centers/export": {
			"get": {
				"tags": ["Inventory Fulfillment Center V2"],
				"description": "Get a stream of fulfillment centers.",
				"operationId": "getV2FulfillmentCenterStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenter ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenter Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentCenter Description",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The FulfillmentCenter Status",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "lastUpdated",
						"in": "query",
						"description": "The FulfillmentCenter Last Updated",
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					},
					{
						"name": "addressId",
						"in": "query",
						"description": "The FulfillmentCenter Address ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "mode",
						"in": "query",
						"description": "The FulfillmentCenter Mode",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The FulfillmentCenter Type",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact",
						"in": "query",
						"description": "The FulfillmentCenter Contact",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-types/export": {
			"get": {
				"tags": ["Inventory Fulfillment Center Type V2"],
				"description": "Get a stream of fulfillment center types.",
				"operationId": "getV2FulfillmentCenterTypeStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenterType ID",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenterType Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentCenterType Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterTypeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/fulfillment-center-attributes/export": {
			"get": {
				"tags": ["Inventory Fulfillment Center Attribute V2"],
				"description": "Get a stream of fulfillment center attributes.",
				"operationId": "getV2FulfillmentCenterAttributeStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The FulfillmentCenterAttribute ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The FulfillmentCenterAttribute Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"description": "The FulfillmentCenterAttribute Description",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FulfillmentCenterAttributeV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/file-uploads/{id}": {
			"get": {
				"tags": ["Inventory File Upload V2"],
				"summary": "Fetch file upload report",
				"description": "Get file upload details.",
				"operationId": "getV2FileUploadById_1",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier used to find file upload record.",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"example": 1
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"404": {
						"description": "The resource was not found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadV2"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadV2"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							},
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			},
			"delete": {
				"tags": ["Inventory File Upload V2"],
				"summary": "Cancel Scheduled File Upload",
				"description": "This API cancels scheduled upload.",
				"operationId": "cancelV2ScheduledFileUpload",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The identifier used to cancel scheduled file upload record.",
						"required": true,
						"schema": {
							"type": "integer",
							"format": "int64"
						},
						"example": 1
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"204": {
						"description": "The requested resource has been updated."
					},
					"400": {
						"description": "Bad request. Some of the inputs provided to the request are not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/file-uploads/export": {
			"get": {
				"tags": ["Inventory File Upload V2"],
				"description": "Get a stream of file uploads.",
				"operationId": "getV2FileUploadStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The File Upload ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "jobNumber",
						"in": "query",
						"description": "The File Upload Job Number",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "contact",
						"in": "query",
						"description": "The File Upload Contact",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fileName",
						"in": "query",
						"description": "The File Upload FileName",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "entity",
						"in": "query",
						"description": "The File Upload Entiry",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "timeCreated",
						"in": "query",
						"description": "The File Upload Time Created",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeScheduled",
						"in": "query",
						"description": "The File Upload Time Scheduled",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeStarted",
						"in": "query",
						"description": "The File Upload Time Started",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "timeCompleted",
						"in": "query",
						"description": "The File Upload Time Completed",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "date-time"
							}
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The File Upload Status",
						"style": "form",
						"explode": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FileUploadV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/events/export": {
			"get": {
				"tags": ["Inventory Event V2"],
				"description": "Get a stream of events.",
				"operationId": "getV2EventStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Event ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "name",
						"in": "query",
						"description": "The Event Name",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "The Event Status",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "type",
						"in": "query",
						"description": "The Event Type",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "resource",
						"in": "query",
						"description": "The Event Resource",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The Event Action",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "code",
						"in": "query",
						"description": "The Event Code",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "message",
						"in": "query",
						"description": "The Event Message",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EventV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v2/addresses/export": {
			"get": {
				"tags": ["Inventory Address V2"],
				"description": "Get a stream of addresses.",
				"operationId": "getV2AddressStream",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
						"required": false,
						"schema": {
							"minimum": 0,
							"type": "integer",
							"format": "int32",
							"default": 0
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of records to return.",
						"required": false,
						"schema": {
							"minimum": 1,
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "sort",
						"in": "query",
						"description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "expand",
						"in": "query",
						"description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"in": "query",
						"description": "The Address ID",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "addressLine1",
						"in": "query",
						"description": "The Address Line 1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressLine2",
						"in": "query",
						"description": "The Address Line 2",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressLine3",
						"in": "query",
						"description": "The Address Line 3",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "city",
						"in": "query",
						"description": "The Address City",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"in": "query",
						"description": "The Address State",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "country",
						"in": "query",
						"description": "The Address Country",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "zip",
						"in": "query",
						"description": "The Address Zip",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone",
						"in": "query",
						"description": "The Address Phone",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fax",
						"in": "query",
						"description": "The Address Fax",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "The Address Latitude",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "The Address Longitude",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"401": {
						"description": "Not authenticated. The user session was not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user was not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"200": {
						"description": "The request completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressV2ResponseContainer"
								}
							}
						}
					},
					"400": {
						"description": "There was a client error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "There was a server error.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponseContainer"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/tooling-configurations": {
			"get": {
				"tags": ["Inventory Config file for tooling"],
				"summary": "Fetch configuration data for tooling.",
				"description": "This API returns the configuration data for tooling.",
				"operationId": "getConfigJson",
				"responses": {
					"404": {
						"description": "Not found - Item was not found",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error - Something went wrong",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "Successfully retrieved the tooling configuration.",
						"content": {
							"application/hal+json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/v1/store-suggestions": {
			"get": {
				"tags": ["Inventory Search Suggestions"],
				"summary": "Fetch search suggestions for stores",
				"description": "This API returns the list of stores that match the search term.",
				"operationId": "getInventoryStoreSuggestions",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "The search term used to find the stores. It is matched to the store name. The search term should be at least 3 characters long.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/SuggestionsStoreResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/item-inventories": {
			"get": {
				"tags": ["Item Inventory"],
				"summary": "Fetch inventory by part number, fulfillmentCenter, status, store",
				"description": "This API fetches the inventory details that match the partnumber, fulfillmentCenter, status, store.",
				"operationId": "getInventoryItemAvailability",
				"parameters": [
					{
						"name": "partNumber",
						"in": "query",
						"description": "The partNumber used to fetch the inventory details.It is matched to the partnumber.",
						"required": true,
						"schema": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/ArraySchema"
								}
							]
						},
						"example": "LR-FNTR-CO-0002-0002"
					},
					{
						"name": "store",
						"in": "query",
						"description": "The store used to fetch the inventory details.It is matched to the store name.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center used to fetch the inventory details. It is matched to the fulfillment center.",
						"required": false,
						"schema": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/ArraySchema"
								}
							]
						},
						"example": "MM2050"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status used to fetch the inventory details.It is matched to the status inventories.",
						"required": false,
						"schema": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/ArraySchema"
								}
							]
						},
						"example": "available"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The offset specify page number.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						},
						"example": 1
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The limit used to specify number of inventory details records for each page.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 10
						},
						"example": 10
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "The sortBy used to sort the inventory details. For example partNumber.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "partNumber"
						},
						"example": "partNumber"
					},
					{
						"name": "sortDir",
						"in": "query",
						"description": "The sortDir used to sort inventory details.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "ASC"
						},
						"example": "ASC"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v1/item-inventories/{partNumber}": {
			"get": {
				"tags": ["Item Inventory"],
				"summary": "Fetch inventory by part number",
				"description": "This API fetches the inventory details that match the partnumber.",
				"operationId": "getInventoryItemAvailabilityById",
				"parameters": [
					{
						"name": "partNumber",
						"in": "path",
						"description": "The partNumber used to fetch the inventory details.It is matched to the partnumber.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "LR-FNTR-CO-0002-0002"
					},
					{
						"name": "store",
						"in": "query",
						"description": "The store used to fetch the inventory details.It is matched to the store name.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center used to fetch the inventory details. It is matched to the fulfillment center.",
						"required": false,
						"schema": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/ArraySchema"
								}
							]
						},
						"example": "MM2050"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status used to fetch the inventory details.It is matched to the status inventories.",
						"required": false,
						"schema": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"$ref": "#/components/schemas/ArraySchema"
								}
							]
						},
						"example": "available"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/v1/inventory-statistics": {
			"get": {
				"tags": ["Inventory"],
				"summary": "Fetch inventory statistics across all fulfillment centers",
				"description": "This API fetches the inventory statistics for all FFCs.",
				"operationId": "getAdminInventoryStatsForWidget",
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/InventoryStatisticsResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventories": {
			"get": {
				"tags": ["Inventory"],
				"summary": "Fetch inventory by part number",
				"description": "This API fetches the inventory details that match the partnumber.",
				"operationId": "getAdminInventoryAvailability",
				"parameters": [
					{
						"name": "partNumber",
						"in": "query",
						"description": "The partNumber used to fetch the inventory details.It is matched to the partnumber.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "LR-FNTR-CO-0002-0002"
					},
					{
						"name": "store",
						"in": "query",
						"description": "The store used to fetch the inventory details.It is matched to the store name.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center used to fetch the inventory details.It is matched to the fulfillment center.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "MM2050"
					},
					{
						"name": "searchTerm",
						"in": "query",
						"description": "The searchTerm used to fetch the inventory details.It is matched to the partnumber.",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "LR-FNTR-CO-0002-0002"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status used to fetch the inventory details.It is matched to the status inventories.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "available"
					},
					{
						"name": "requestedQuantity",
						"in": "query",
						"description": "The requestedQuantity used to fetch the inventory details.",
						"required": false,
						"schema": {
							"type": "number",
							"format": "double"
						},
						"example": 10.0
					},
					{
						"name": "offset",
						"in": "query",
						"description": "The offset specify page number.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 0
						},
						"example": 1
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The limit used to specify number of inventory details records for each page.",
						"required": false,
						"schema": {
							"type": "integer",
							"format": "int32",
							"default": 10
						},
						"example": 10
					},
					{
						"name": "sortBy",
						"in": "query",
						"description": "The sortBy used to sort the inventory details. For example partNumber.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "partNumber"
						},
						"example": "partNumber"
					},
					{
						"name": "sortDir",
						"in": "query",
						"description": "The sortDir used to sort inventory details.",
						"required": false,
						"schema": {
							"type": "string",
							"default": "ASC"
						},
						"example": "ASC"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/AdminInventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/inventories/{partNumber}": {
			"get": {
				"tags": ["Inventory"],
				"summary": "Fetch inventory by part number",
				"description": "This API fetches the inventory details that match the partnumber.",
				"operationId": "getAdminInventoryAvailabilityByPartNumber",
				"parameters": [
					{
						"name": "partNumber",
						"in": "path",
						"description": "The partNumber used to fetch the inventory details.It is matched to the partnumber.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "LR-FNTR-CO-0002-0002"
					},
					{
						"name": "store",
						"in": "query",
						"description": "The store used to fetch the inventory details.It is matched to the store name.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "Ruby"
					},
					{
						"name": "fulfillmentCenter",
						"in": "query",
						"description": "The fulfillment center used to fetch the inventory details.It is matched to the fulfillment center.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "MM2050"
					},
					{
						"name": "status",
						"in": "query",
						"description": "The status used to fetch the inventory details.It is matched to the status inventories.",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"example": "available"
					}
				],
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/AdminInventoryResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified partNumber could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/fulfillment-center-suggestions": {
			"get": {
				"tags": ["Inventory Search Suggestions"],
				"summary": "Fetch search suggestions for fulfillment centers",
				"description": "This API returns the first five fulfillment centers that match the search term.",
				"operationId": "getInventoryFulfillmentCenterSuggestions",
				"parameters": [
					{
						"name": "searchTerm",
						"in": "query",
						"description": "The search term used to find the fulfillment centers.It is matched to the fulfillment center name. The search term should be at least 3 characters long.",
						"required": true,
						"schema": {
							"type": "string"
						},
						"example": "Calgary Mall"
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/SuggestionsFulfillmentCenterResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request - Request parameters are incorrect",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/file-upload-samples": {
			"get": {
				"tags": ["Inventory File Sample"],
				"summary": "Download sample files.",
				"description": "This API downloads sample files.",
				"operationId": "getSampleFiles",
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"type": "string",
									"format": "byte"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		},
		"/v1/events": {
			"get": {
				"tags": ["Inventory Event"],
				"summary": "Fetch all events",
				"operationId": "getAllInventoryEvents",
				"responses": {
					"500": {
						"description": "Internal server error. Additional details will be contained on the server logs.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/EventResponse"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/hal+json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuthentication": []
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"Person": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string"
					},
					"primaryContact": {
						"type": "string"
					},
					"secondaryContact": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				}
			},
			"ErrorInfo": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string"
					},
					"messageKey": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"messageArguments": {
						"type": "array",
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					"locale": {
						"type": "string"
					},
					"correlationId": {
						"type": "string"
					}
				}
			},
			"ErrorResponse": {
				"type": "object",
				"properties": {
					"requestId": {
						"type": "string"
					},
					"errors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ErrorInfo"
						}
					}
				}
			},
			"InventoryStatusRequestBody": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"identifier": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				}
			},
			"FulfillmentMode": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				}
			},
			"AddressPostActionBean": {
				"type": "object",
				"properties": {
					"addressLine1": {
						"type": "string",
						"description": "address line1",
						"example": "250 Alton Towers Circle"
					},
					"addressLine2": {
						"type": "string",
						"description": "address line2",
						"example": "250 Alton Towers Circle"
					},
					"addressLine3": {
						"type": "string",
						"description": "address line3",
						"example": "250 Alton Towers Circle"
					},
					"city": {
						"type": "string",
						"description": "city",
						"example": "Toronto"
					},
					"state": {
						"type": "string",
						"description": "state",
						"example": "Ontario"
					},
					"country": {
						"type": "string",
						"description": "country",
						"example": "Canada"
					},
					"zip": {
						"type": "string",
						"description": "zip code",
						"example": "M1V 3Z4"
					},
					"phone": {
						"type": "string",
						"description": "phone number",
						"example": "Calgary Mall"
					},
					"fax": {
						"type": "string",
						"description": "fax",
						"example": "416.326.8648"
					},
					"latitude": {
						"type": "number",
						"description": "latitude of address",
						"format": "double",
						"example": 43.82600021362305
					},
					"longitude": {
						"type": "number",
						"description": "longitude of address",
						"format": "double",
						"example": -79.2770004272461
					}
				}
			},
			"FulfillmentCenterAttributes": {
				"type": "object",
				"properties": {
					"attrName": {
						"type": "string"
					},
					"attrValue1": {
						"type": "string"
					},
					"attrValue2": {
						"type": "string",
						"description": "Attribute value2",
						"example": "{\"title\":\"My first day at work\",\"Feeling\":\"Mixed feeling\"}"
					}
				}
			},
			"FulfillmentCenterPostActionBean": {
				"type": "object",
				"properties": {
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Identifier of the fulfillment center",
						"example": "APLZ20"
					},
					"fulfillmentCenterName": {
						"type": "string",
						"description": "Name of the fulfillment center",
						"example": "Alton Towers Plaza"
					},
					"fulfillmentCenterDescription": {
						"type": "string",
						"description": "Description of the fulfillment center",
						"example": "Alton Towers Plaza"
					},
					"status": {
						"type": "boolean",
						"description": "status of the fulfillment center",
						"example": true
					},
					"markDeleted": {
						"type": "boolean"
					},
					"lastUpdated": {
						"type": "string",
						"format": "date-time"
					},
					"fulfillmentCenterType": {
						"$ref": "#/components/schemas/FulfillmentCenterType"
					},
					"fulfillmentCenterAddress": {
						"$ref": "#/components/schemas/AddressPostActionBean"
					},
					"fulfillmentCenterMode": {
						"$ref": "#/components/schemas/FulfillmentMode"
					},
					"fulfillmentCenterContact": {
						"$ref": "#/components/schemas/Person"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterAttributes"
						}
					}
				}
			},
			"FulfillmentCenterType": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				}
			},
			"Address": {
				"type": "object",
				"properties": {
					"addressId": {
						"type": "integer",
						"format": "int64"
					},
					"addressLine1": {
						"type": "string"
					},
					"addressLine2": {
						"type": "string"
					},
					"addressLine3": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"zip": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"fax": {
						"type": "string"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					}
				}
			},
			"Href": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"description": "URL of the link"
					}
				},
				"description": "Link to the current resource."
			},
			"PersonV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"email": {
						"type": "string",
						"description": "Email ID",
						"example": "john.smith@hcl.com"
					},
					"primaryContact": {
						"type": "string",
						"description": "Primary Contact",
						"example": "John Smith"
					},
					"secondaryContact": {
						"type": "string",
						"description": "Secondary Contact",
						"example": "John Smith"
					},
					"phone": {
						"type": "string",
						"description": "Phone",
						"example": "919.000.0000"
					}
				}
			},
			"ResourceLinks": {
				"type": "object",
				"properties": {
					"self": {
						"$ref": "#/components/schemas/Href"
					}
				},
				"description": "Links to related resources.",
				"readOnly": true
			},
			"Error": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"messageKey": {
						"type": "string"
					},
					"messageArguments": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"correlationId": {
						"type": "string"
					},
					"locale": {
						"type": "string"
					}
				}
			},
			"ErrorResponseContainer": {
				"type": "object",
				"properties": {
					"requestId": {
						"type": "string"
					},
					"errors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"ItemV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"itemNumber": {
						"type": "string"
					},
					"productDS": {
						"type": "string"
					},
					"unitOfMeasure": {
						"type": "string"
					},
					"minThreshold": {
						"type": "number",
						"format": "double"
					},
					"maxThreshold": {
						"type": "number",
						"format": "double"
					}
				}
			},
			"ItemAttributeV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"attrId": {
						"type": "integer",
						"format": "int64"
					},
					"attrName": {
						"type": "string"
					},
					"attrValue1": {
						"type": "string"
					},
					"attrValue2": {
						"type": "string"
					},
					"partNumber": {
						"type": "string"
					}
				}
			},
			"InventoryAttributeV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"attrId": {
						"type": "integer",
						"format": "int64"
					},
					"attrName": {
						"type": "string"
					},
					"attrValue1": {
						"type": "string"
					},
					"attrValue2": {
						"type": "string"
					},
					"internal": {
						"type": "boolean"
					},
					"inventory": {
						"$ref": "#/components/schemas/InventoryV2"
					}
				}
			},
			"InventoryV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Fulfillment Center ID",
						"example": "R00B2C"
					},
					"partNumber": {
						"type": "string"
					},
					"store": {
						"type": "string"
					},
					"availableQuantity": {
						"type": "number",
						"format": "double"
					},
					"unavailable": {
						"type": "number",
						"format": "double"
					},
					"status": {
						"type": "string"
					},
					"minThreshold": {
						"type": "number",
						"format": "double"
					},
					"maxThreshold": {
						"type": "number",
						"format": "double"
					},
					"lastUpdated": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"FulfillmentModeV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"identifier": {
						"type": "string",
						"description": "Fulfillment Mode ID",
						"example": "store_pickup"
					},
					"displayName": {
						"type": "string",
						"description": "Fulfillment Mode Display Name",
						"example": "Store Pickup"
					},
					"description": {
						"type": "string",
						"description": "Fulfillment Mode Description",
						"example": "Store Pickup fulfillment Mode"
					}
				}
			},
			"FulfillmentCenterV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Fulfillment Center ID",
						"example": "R00B2C"
					},
					"fulfillmentCenterName": {
						"type": "string",
						"description": "Fulfillment Center Name",
						"example": "Ruby"
					},
					"fulfillmentCenterDescription": {
						"type": "string",
						"description": "Fulfillment Center Description",
						"example": "Ruby online store fulfillment center"
					},
					"status": {
						"type": "boolean",
						"description": "Fulfillment Center Status",
						"example": true
					},
					"markDeleted": {
						"type": "boolean",
						"description": "Fulfillment Mode Deleted",
						"example": false
					},
					"lastUpdated": {
						"type": "string",
						"description": "Fulfillment Center Last Updated Timestamp",
						"format": "date-time"
					},
					"fulfillmentCenterAddressId": {
						"type": "integer",
						"description": "Fulfillment Center Address ID",
						"format": "int64",
						"example": 1
					},
					"fulfillmentCenterTypeId": {
						"type": "integer",
						"description": "Fulfillment Center Type ID",
						"format": "int64"
					},
					"fulfillmentCenterModeId": {
						"type": "string",
						"description": "Fulfillment Center Mode ID",
						"example": "delivery"
					},
					"fulfillmentCenterContactId": {
						"type": "string",
						"description": "Fulfillment Center Contact Email ID",
						"example": "john.smith@hcl.com"
					}
				}
			},
			"FulfillmentCenterTypeDTO": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"name": {
						"type": "string",
						"description": "Fulfillment Center Type Display Name",
						"example": "Online Store"
					},
					"description": {
						"type": "string",
						"description": "Fulfillment Center Type Description",
						"example": "Online Store fulfillment Center Type"
					}
				}
			},
			"FulfillmentCenterTypeV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"id": {
						"type": "integer",
						"description": "Fulfillment Center Type ID",
						"format": "int64"
					},
					"name": {
						"type": "string",
						"description": "Fulfillment Center Type Display Name",
						"example": "Online Store"
					},
					"description": {
						"type": "string",
						"description": "Fulfillment Center Type Description",
						"example": "Online Store fulfillment Center Type"
					}
				}
			},
			"FulfillmentCenterAttributeV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"attrId": {
						"type": "integer",
						"description": "Fulfillment Center Attribute ID",
						"format": "int64",
						"readOnly": true,
						"example": 1
					},
					"attrName": {
						"type": "string",
						"description": "Fulfillment Center Attribute Name",
						"example": "Bin Location"
					},
					"attrValue1": {
						"type": "string",
						"description": "Fulfillment Center Attribute Value1",
						"example": "1-B-03-04-05"
					},
					"attrValue2": {
						"type": "string",
						"description": "Fulfillment Center Attribute Value2"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Fulfillment Center ID",
						"example": "R00B2C"
					}
				}
			},
			"EventV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"eventId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"type": "boolean"
					},
					"type": {
						"type": "string",
						"enum": ["INTERNAL", "EXTERNAL", "ALL"]
					},
					"resource": {
						"type": "string"
					},
					"action": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"AddressV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"addressId": {
						"type": "integer",
						"description": "Address ID",
						"format": "int64",
						"readOnly": true,
						"example": 1
					},
					"addressLine1": {
						"type": "string",
						"description": "Address Line1",
						"example": "330 Potrero Ave"
					},
					"addressLine2": {
						"type": "string",
						"description": "Address Line2",
						"example": "Suite #800"
					},
					"addressLine3": {
						"type": "string",
						"description": "Address Line2",
						"example": "Tower #3"
					},
					"city": {
						"type": "string",
						"description": "City",
						"example": "Sunnyvale"
					},
					"state": {
						"type": "string",
						"description": "State",
						"example": "CA"
					},
					"country": {
						"type": "string",
						"description": "Country",
						"example": "US"
					},
					"zip": {
						"type": "string",
						"description": "Country",
						"example": "94085"
					},
					"phone": {
						"type": "string",
						"description": "Phone",
						"example": "919.000.0000"
					},
					"fax": {
						"type": "string",
						"description": "Fax",
						"example": "919.000.0000"
					},
					"latitude": {
						"type": "number",
						"description": "Latitude",
						"format": "double",
						"example": 37.38667
					},
					"longitude": {
						"type": "number",
						"description": "Longitude",
						"format": "double",
						"example": -122.03763
					}
				}
			},
			"LocateInventoryItemRequestModel": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "PartNumber of the item",
						"example": "LR-FNTR-CO-0001-0001"
					},
					"unitOfMeasure": {
						"type": "string",
						"description": "Unit of measure of the item",
						"example": "C62"
					},
					"quantity": {
						"type": "number",
						"description": "Quantity of the item",
						"format": "double",
						"example": 5.0
					}
				}
			},
			"LocateInventoryRequest": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/LocateInventoryItemRequestModel"
						}
					}
				}
			},
			"LocateInventoryItemBean": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "PartNumber of the item",
						"example": "LR-FNTR-CO-0001-0001"
					},
					"unitOfMeasure": {
						"type": "string",
						"description": "Unit of measure of the item",
						"example": "C62"
					},
					"quantity": {
						"type": "string",
						"description": "Quantity of the item",
						"example": "5.0"
					},
					"status": {
						"type": "string",
						"description": "Status of the item",
						"example": "available"
					}
				},
				"description": "items"
			},
			"LocateInventoryResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventory-locations?store=Ruby&fulfillmentCenter=FFC001&partNumber=LR-FNTR-CO-0001-0001"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/LocateInventoryResponseBean"
						}
					}
				}
			},
			"LocateInventoryResponseBean": {
				"type": "object",
				"properties": {
					"fulfillmentCenter": {
						"type": "string",
						"description": "Fulfillment center code",
						"example": "FFC001"
					},
					"items": {
						"type": "array",
						"description": "items",
						"items": {
							"$ref": "#/components/schemas/LocateInventoryItemBean"
						}
					}
				}
			},
			"InventoryActionBean": {
				"type": "object",
				"properties": {
					"inventories": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryBean"
						}
					}
				}
			},
			"InventoryBean": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "Partnumber of the item",
						"example": "LR-FNTR-CO-0002-0002"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Fulfillment center identifier.",
						"example": "MM2050"
					},
					"unitOfMeasure": {
						"type": "string",
						"description": "Unit of measure of the item",
						"example": "C62"
					},
					"requestedQuantity": {
						"type": "number",
						"description": "Quantity of the item",
						"format": "double",
						"example": 5.0
					}
				}
			},
			"InventoryResponseBean": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "Partnumber of the item",
						"example": "LR-FNTR-CO-0002-0002"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Fulfillment center identifier.",
						"example": "MM2050"
					},
					"requestedQuantity": {
						"type": "number",
						"description": "Quantity of the item",
						"format": "double",
						"example": 5.0
					},
					"actionStatus": {
						"type": "string",
						"description": "The status of the action applied to update the inventory",
						"example": "success"
					},
					"status": {
						"type": "string",
						"description": "Inventory status of the item",
						"example": "available"
					}
				}
			},
			"ReverseInventoryResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventories/reverse?store=Ruby&commitAll=true"
					},
					"commitAll": {
						"type": "boolean",
						"example": true
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryResponseBean"
						}
					}
				}
			},
			"InventoryActionResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventories/reserve?store=Ruby&commitAll=true"
					},
					"commitAll": {
						"type": "boolean",
						"example": true
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryResponseBean"
						}
					}
				}
			},
			"AttributeBean": {
				"type": "object",
				"properties": {
					"attrName": {
						"type": "string",
						"description": "Attribute identifier",
						"example": "Attribute1"
					},
					"attrValue1": {
						"type": "string",
						"description": "Attribute value1",
						"example": "SG2050_DR-BFFT-0001-0002_Ruby"
					},
					"attrValue2": {
						"type": "string",
						"description": "Attribute value2",
						"example": "{\"title\":\"My first day at work\",\"Feeling\":\"Mixed feeling\"}"
					},
					"internal": {
						"type": "boolean",
						"description": "Internal property to distinguish admin and shopper attributes",
						"writeOnly": true,
						"example": true
					}
				}
			},
			"CheckInventoryResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventories/check?store=Ruby"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryAvailabilityShopperBean"
						}
					}
				}
			},
			"InventoryAvailabilityShopperBean": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "Partnumber of the item",
						"example": "LR-FNTR-CO-0002-0002"
					},
					"unitOfMeasure": {
						"type": "string",
						"description": "Unit of measure of item",
						"example": "C62"
					},
					"productInfo": {
						"type": "string",
						"description": "Product information",
						"example": "Style Home InOffice Double Sofa"
					},
					"numberOfRecords": {
						"type": "integer",
						"description": "Total number of records",
						"format": "int32",
						"example": 1
					},
					"fulfillmentCentersCount": {
						"type": "integer",
						"description": "Fulfillment centers count",
						"format": "int32",
						"example": 1
					},
					"totalAvailableQuantity": {
						"type": "string",
						"description": "Total available quantity of the item",
						"example": "96.0"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AttributeBean"
						}
					},
					"fulfillmentCenters": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryShopperBean"
						}
					}
				}
			},
			"InventoryShopperBean": {
				"type": "object",
				"properties": {
					"requestedQuantity": {
						"type": "number",
						"description": "Quantity of the item",
						"format": "double",
						"example": 5.0
					},
					"availableQuantity": {
						"type": "string",
						"description": "Total available quantity of the item",
						"example": "96.0"
					},
					"inventoryStatus": {
						"type": "string",
						"description": "Inventory status of the item",
						"example": "available"
					},
					"store": {
						"type": "string",
						"description": "Store name",
						"example": "Ruby"
					},
					"id": {
						"type": "string",
						"description": "Fulfillment center identifier.",
						"example": "MM2050"
					},
					"name": {
						"type": "string",
						"description": "Fulfillment center name.",
						"example": "Markville Mall"
					},
					"type": {
						"type": "string",
						"description": "Type of fulfillment center.",
						"example": "physical_store"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AttributeBean"
						}
					}
				}
			},
			"Event": {
				"type": "object",
				"properties": {
					"eventId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"type": "boolean"
					},
					"type": {
						"type": "string",
						"enum": ["INTERNAL", "EXTERNAL", "ALL"]
					},
					"resource": {
						"type": "string"
					},
					"action": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			},
			"FileUploadStatusRequestBody": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"identifier": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					}
				}
			},
			"FileUploadStatusV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FileUploadStatusRequestBody"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"PersonV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PersonV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"ItemV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ItemV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"EntityRelationshipContainer": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64"
					},
					"contents": {
						"type": "array",
						"items": {
							"type": "object"
						}
					}
				}
			},
			"ItemAttributeV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ItemAttributeV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"InventoryStatusV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryStatusRequestBody"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"InventoryAttributeV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryAttributeV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"InventoryV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FulfillmentModeV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentModeV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FulfillmentCenterV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FulfillmentCenterTypeV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterTypeV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FulfillmentCenterAttributeV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterAttributeV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"FileUploadV2": {
				"type": "object",
				"properties": {
					"links": {
						"$ref": "#/components/schemas/ResourceLinks"
					},
					"id": {
						"type": "integer",
						"format": "int64"
					},
					"jobNumber": {
						"type": "integer",
						"format": "int64"
					},
					"person": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"entity": {
						"type": "string"
					},
					"timeCreated": {
						"type": "string",
						"format": "date-time"
					},
					"timeScheduled": {
						"type": "string",
						"format": "date-time"
					},
					"timeStarted": {
						"type": "string",
						"format": "date-time"
					},
					"timeCompleted": {
						"type": "string",
						"format": "date-time"
					},
					"report": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				}
			},
			"FileUploadV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FileUploadV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"EventV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EventV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"AddressV2ResponseContainer": {
				"type": "object",
				"properties": {
					"href": {
						"type": "string",
						"format": "uri"
					},
					"next": {
						"type": "string",
						"format": "uri"
					},
					"previous": {
						"type": "string",
						"format": "uri"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AddressV2"
						}
					},
					"count": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"SuggestionsStoreResponse": {
				"type": "object",
				"properties": {
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/store-suggestions?searchTerm=Ruby"
					},
					"contents": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"FulfillmentPersonBean": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "Person email id",
						"example": "contact@hcl.com"
					},
					"primaryContact": {
						"type": "string",
						"description": "Primary contact",
						"example": "Alex K"
					},
					"secondaryContact": {
						"type": "string",
						"description": "Secondary contact",
						"example": "Contact Person 1"
					},
					"phone": {
						"type": "string",
						"description": "Person phone number",
						"example": "1234567890"
					}
				}
			},
			"FulfillmentPersonResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/persons?identifier=contact@hcl.com"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentPersonBean"
						}
					}
				}
			},
			"ArraySchema": {
				"type": "object"
			},
			"InventoryResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/item-inventories?store=Ruby"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryAvailabilityShopperBean"
						}
					}
				}
			},
			"InventoryStatusBean": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string",
						"description": "Inventory status identifier",
						"example": "available"
					},
					"displayName": {
						"type": "string",
						"description": "Inventory status name",
						"example": "Available"
					},
					"description": {
						"type": "string",
						"description": "Inventory status description",
						"example": "Status Description - Available"
					}
				}
			},
			"InventoryStatusResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventory-status?identifier=available"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryStatusBean"
						}
					}
				}
			},
			"InventoryStatisticsBean": {
				"type": "object",
				"properties": {
					"totalAvailableInventory": {
						"type": "string",
						"description": "Total available inventory",
						"example": "100"
					},
					"totalAboveThresholdInventory": {
						"type": "string",
						"description": "Total inventory above threshold",
						"example": "100"
					},
					"totalBelowThresholdInventory": {
						"type": "string",
						"description": "Total inventory below threshold",
						"example": "100"
					},
					"totalOutOfStockInventory": {
						"type": "string",
						"description": "Total out of stock inventory",
						"example": "100"
					}
				}
			},
			"InventoryStatisticsResponse": {
				"type": "object",
				"properties": {
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventory-statistics"
					},
					"contents": {
						"$ref": "#/components/schemas/InventoryStatisticsBean"
					}
				}
			},
			"AdminInventoryResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 10
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/inventories?store=Ruby"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/InventoryAvailabilityAdminBean"
						}
					}
				}
			},
			"EStoreInventoryAdminBean": {
				"type": "object",
				"properties": {
					"store": {
						"type": "string",
						"description": "Store name",
						"example": "Ruby"
					},
					"quantity": {
						"type": "number",
						"description": "Total available quantity of the item",
						"format": "double",
						"example": 100.0
					},
					"fulfillmentCentersAboveThresholdCount": {
						"type": "integer",
						"description": "Fulfillment centers above threshold count",
						"format": "int32",
						"example": 100
					},
					"fulfillmentCentersBelowThresholdCount": {
						"type": "integer",
						"description": "Fulfillment centers below threshold count",
						"format": "int32",
						"example": 100
					},
					"fulfillmentCentersOutOfStockCount": {
						"type": "integer",
						"description": "Fulfillment centers out of stock count",
						"format": "int32",
						"example": 100
					}
				}
			},
			"FulfillmentCenterInventoryAdminBean": {
				"type": "object",
				"properties": {
					"assignedQuantity": {
						"type": "number",
						"description": "Total on assigned quantity",
						"format": "double",
						"example": 100.0
					},
					"unassignedQuantity": {
						"type": "number",
						"description": "Total on unassigned quantity",
						"format": "double",
						"example": 100.0
					},
					"unavailableQuantity": {
						"type": "number",
						"description": "Total on unavailable quantity",
						"format": "double",
						"example": 100.0
					},
					"onHandQuantity": {
						"type": "number",
						"description": "Total on hand quantity",
						"format": "double",
						"example": 100.0
					},
					"availableQuantity": {
						"type": "number",
						"description": "Total available quantity of the item",
						"format": "double",
						"example": 100.0
					},
					"inventoryStatus": {
						"type": "string",
						"description": "Inventory status of the item",
						"example": "available"
					},
					"id": {
						"type": "string",
						"description": "Fulfillment center identifier.",
						"example": "APLZ20"
					},
					"name": {
						"type": "string",
						"description": "Fulfillment center name.",
						"example": "Alton Towers Plaza"
					},
					"type": {
						"type": "string",
						"description": "Type of fulfillment center.",
						"example": "physical"
					},
					"status": {
						"type": "boolean",
						"description": "Fulfillment center status.",
						"example": true
					},
					"minThreshold": {
						"type": "number",
						"description": "Minimum threshold of the item",
						"format": "double",
						"example": 25
					},
					"maxThreshold": {
						"type": "number",
						"description": "Maximum threshold of the item",
						"format": "double",
						"example": 100
					},
					"lastUpdated": {
						"type": "string",
						"description": "Last updated time stamp",
						"format": "date-time"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AttributeBean"
						}
					}
				}
			},
			"InventoryAvailabilityAdminBean": {
				"type": "object",
				"properties": {
					"partNumber": {
						"type": "string",
						"description": "Partnumber of the item",
						"example": "LR-FNTR-CO-0002-0002"
					},
					"unitOfMeasure": {
						"type": "string",
						"description": "Unit of measure of item",
						"example": "C62"
					},
					"productInfo": {
						"type": "string",
						"description": "Product information",
						"example": "Style Home InOffice Double Sofa"
					},
					"numberOfRecords": {
						"type": "integer",
						"description": "Total number of records",
						"format": "int32",
						"example": 1
					},
					"fulfillmentCentersCount": {
						"type": "integer",
						"description": "Fulfillment centers count",
						"format": "int32",
						"example": 1
					},
					"totalAvailableQuantity": {
						"type": "string",
						"description": "Total available quantity of the item",
						"example": "96.0"
					},
					"fulfillmentCentersAboveThresholdCount": {
						"type": "integer",
						"description": "Fulfillment centers above threshold count",
						"format": "int32",
						"example": 100
					},
					"fulfillmentCentersBelowThresholdCount": {
						"type": "integer",
						"description": "Fulfillment centers below threshold count",
						"format": "int32",
						"example": 100
					},
					"fulfillmentCentersOutOfStockCount": {
						"type": "integer",
						"description": "Fulfillment centers out of stock count",
						"format": "int32",
						"example": 100
					},
					"totalOnHandQuantity": {
						"type": "number",
						"description": "Total on hand quantity",
						"format": "double",
						"example": 100.0
					},
					"totalAssignedQuantity": {
						"type": "number",
						"description": "Total on assigned quantity",
						"format": "double",
						"example": 100.0
					},
					"totalUnassignedQuantity": {
						"type": "number",
						"description": "Total on unassigned quantity",
						"format": "double",
						"example": 100.0
					},
					"totalUnavailableQuantity": {
						"type": "number",
						"description": "Total on unavailable quantity",
						"format": "double",
						"example": 100.0
					},
					"estoresCount": {
						"type": "integer",
						"format": "int32"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AttributeBean"
						}
					},
					"fulfillmentCenters": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterInventoryAdminBean"
						}
					},
					"stores": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/EStoreInventoryAdminBean"
						}
					}
				}
			},
			"FulfillmentModeBean": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string",
						"description": "Fulfillment center mode identifier.",
						"example": "store_pickup"
					},
					"displayName": {
						"type": "string",
						"description": "Fulfillment center mode display name.",
						"example": "Store Pickup"
					},
					"description": {
						"type": "string",
						"description": "Fulfillment center mode description.",
						"example": "Fulfillment Mode is Store Pickup"
					}
				}
			},
			"FulfillmentModeResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/fulfillment-modes?identifier=store_pickup"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentModeBean"
						}
					}
				}
			},
			"FulfillmentAddressBean": {
				"type": "object",
				"properties": {
					"addressId": {
						"type": "integer",
						"description": "address identifier",
						"format": "int64",
						"example": 1
					},
					"addressLine1": {
						"type": "string",
						"description": "address line1",
						"example": "250 Alton Towers Circle"
					},
					"addressLine2": {
						"type": "string",
						"description": "address line2",
						"example": "250 Alton Towers Circle"
					},
					"addressLine3": {
						"type": "string",
						"description": "address line3",
						"example": "250 Alton Towers Circle"
					},
					"city": {
						"type": "string",
						"description": "city",
						"example": "Toronto"
					},
					"state": {
						"type": "string",
						"description": "state",
						"example": "Ontario"
					},
					"country": {
						"type": "string",
						"description": "country",
						"example": "Canada"
					},
					"zip": {
						"type": "string",
						"description": "zip code",
						"example": "M1V 3Z4"
					},
					"phone": {
						"type": "string",
						"description": "phone number",
						"example": "Calgary Mall"
					},
					"fax": {
						"type": "string",
						"description": "fax",
						"example": "416.326.8648"
					},
					"latitude": {
						"type": "number",
						"description": "latitude of address",
						"format": "double",
						"example": 43.82600021362305
					},
					"longitude": {
						"type": "number",
						"description": "longitude of address",
						"format": "double",
						"example": -79.2770004272461
					},
					"distance": {
						"type": "number",
						"description": "distance",
						"format": "double",
						"example": 10
					},
					"distanceMeasure": {
						"type": "string",
						"description": "distance measure",
						"example": "Miles"
					}
				}
			},
			"FulfillmentCenterBean": {
				"type": "object",
				"properties": {
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Identifier of the fulfillment center",
						"example": "APLZ20"
					},
					"fulfillmentCenterName": {
						"type": "string",
						"description": "Name of the fulfillment center",
						"example": "Alton Towers Plaza"
					},
					"fulfillmentCenterDescription": {
						"type": "string",
						"description": "Description of the fulfillment center",
						"example": "Alton Towers Plaza"
					},
					"status": {
						"type": "boolean",
						"description": "status of the fulfillment center",
						"example": true
					},
					"fulfillmentCenterType": {
						"$ref": "#/components/schemas/FulfillmentCenterTypeBean"
					},
					"fulfillmentCenterAddress": {
						"$ref": "#/components/schemas/FulfillmentAddressBean"
					},
					"fulfillmentCenterMode": {
						"$ref": "#/components/schemas/FulfillmentMode"
					},
					"fulfillmentCenterContact": {
						"$ref": "#/components/schemas/FulfillmentPersonBean"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/AttributeBean"
						}
					}
				}
			},
			"FulfillmentCenterResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 50
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/fulfillment-centers?limit=2&offset=1"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterBean"
						}
					}
				}
			},
			"FulfillmentCenterTypeBean": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string",
						"description": "Fulfillment center type",
						"example": "store_pickup"
					},
					"displayName": {
						"type": "string",
						"description": "Name of the fulfillment center type",
						"example": "Store Pickup"
					},
					"description": {
						"type": "string",
						"description": "Description of the fulfillment center type",
						"example": "Fulfillment Mode is Store Pickup"
					}
				}
			},
			"FulfillmentCenterTypeResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 1
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/fulfillment-center-types?identifier=physical"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentCenterTypeBean"
						}
					}
				}
			},
			"SuggestionsFulfillmentCenterBean": {
				"type": "object",
				"properties": {
					"fulfillmentCenterName": {
						"type": "string",
						"description": "Name of the fulfillment center",
						"example": "Calgary Mall"
					},
					"fulfillmentCenterId": {
						"type": "string",
						"description": "Id of the fulfillment center",
						"example": "CML205"
					}
				}
			},
			"SuggestionsFulfillmentCenterResponse": {
				"type": "object",
				"properties": {
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/fulfillment-center-suggestions?searchTerm=Calgary Mall"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/SuggestionsFulfillmentCenterBean"
						}
					}
				}
			},
			"EventResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64"
					},
					"resourceId": {
						"type": "string"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Event"
						}
					}
				}
			},
			"FulfillmentAddressResponse": {
				"type": "object",
				"properties": {
					"count": {
						"type": "integer",
						"format": "int64",
						"example": 55
					},
					"resourceId": {
						"type": "string",
						"example": "<protocol>://<server>:<port>/inventory/api/v1/addresses"
					},
					"contents": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FulfillmentAddressBean"
						}
					}
				}
			}
		},
		"securitySchemes": {
			"BearerAuthentication": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
