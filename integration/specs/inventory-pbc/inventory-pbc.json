{
    "openapi": "3.0.1",
    "info": {
        "description": "<p>Create and manage Inventory and Fulfillment Center requests and their sub-components.</p>",
        "title": "Inventory PBC definitions",
        "version": "24.09.26.0",
        "x-introduced": {
            "version": "24.04.25"
        }
    },
    "servers": [
        {
            "url": "{schema}://{hostname}:{port}/inventory/api",
            "description": "Generated server url",
            "variables": {
                "hostname": {
                    "default": "localhost"
                },
                "port": {
                    "default": "11080",
                    "enum": [
                        "11080",
                        "11443"
                    ]
                },
                "schema": {
                    "default": "http",
                    "enum": [
                        "http",
                        "https"
                    ]
                }
            }
        }
    ],
    "tags": [
        {
            "name": "Available Inventory"
        },
        {
            "name": "Available Inventory Attribute"
        },
        {
            "name": "Expected Inventory"
        },
        {
            "name": "Expected Inventory Comments"
        },
        {
            "name": "Item for Inventory"
        },
        {
            "name": "Item Attribute for Inventory"
        },
        {
            "name": "Item Inventory"
        },
        {
            "name": "Inventory Locations"
        },
        {
            "name": "Fulfillment Center for Inventory"
        },
        {
            "name": "Fulfillment Center Attribute"
        },
        {
            "name": "Fulfillment Center Address"
        },
        {
            "name": "Fulfillment Center Contact"
        },
        {
            "name": "Fulfillment Center Type"
        },
        {
            "name": "Fulfillment Mode"
        },
        {
            "name": "Fulfillment Center Mode Association"
        },
        {
            "name": "File Upload for Inventory"
        },
        {
            "name": "File Upload Status for Inventory"
        },
        {
            "name": "Inventory"
        },
        {
            "name": "Inventory Event"
        },
        {
            "name": "Inventory Status"
        },
        {
            "name": "Attributes for Inventory"
        }
    ],
    "paths": {
        "/v1/addresses": {
            "get": {
                "description": "Get a collection of addresses.",
                "operationId": "getAddress",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Address Line 1",
                        "in": "query",
                        "name": "addressLine1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Line 2",
                        "in": "query",
                        "name": "addressLine2",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Line 3",
                        "in": "query",
                        "name": "addressLine3",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address City",
                        "in": "query",
                        "name": "city",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address State",
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Country",
                        "in": "query",
                        "name": "country",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Zip",
                        "in": "query",
                        "name": "zip",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Phone",
                        "in": "query",
                        "name": "phone",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Fax",
                        "in": "query",
                        "name": "fax",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Latitude",
                        "in": "query",
                        "name": "latitude",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Address Longitude",
                        "in": "query",
                        "name": "longitude",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Address"
                ]
            },
            "post": {
                "description": "Create address details",
                "operationId": "createAddress",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Address"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Address"
                ]
            }
        },
        "/v1/addresses/{id}": {
            "delete": {
                "description": "Delete address details by ID",
                "operationId": "deleteAddressById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Address"
                ]
            },
            "get": {
                "description": "Get address details.",
                "operationId": "getV2AddressById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Address"
                ]
            },
            "patch": {
                "description": "Update address details by ID",
                "operationId": "updateAddressById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Address"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Address"
                ]
            }
        },
        "/v1/attributes": {
            "get": {
                "description": "Get a collection of attributes.",
                "operationId": "getAttribute",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Attribute ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Attribute Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Attribute Value1",
                        "in": "query",
                        "name": "value1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Attribute Value2",
                        "in": "query",
                        "name": "value2",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Attribute Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "System Attribute",
                        "in": "query",
                        "name": "systemAttribute",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Internal Attribute",
                        "in": "query",
                        "name": "internalAttribute",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Marked for Delete",
                        "in": "query",
                        "name": "markForDelete",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AttributeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Attributes for Inventory"
                ]
            },
            "post": {
                "description": "Create attribute details",
                "operationId": "createAttribute",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AttributeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Attributes for Inventory"
                ]
            }
        },
        "/v1/attributes/{id}": {
            "delete": {
                "description": "Delete attribute details by ID",
                "operationId": "deleteAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Attributes for Inventory"
                ]
            },
            "get": {
                "description": "Get attribute details.",
                "operationId": "getAttributeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attribute"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Attributes for Inventory"
                ]
            },
            "patch": {
                "description": "Update attribute details by ID",
                "operationId": "updateAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Attributes for Inventory"
                ]
            }
        },
        "/v1/available-inventories": {
            "get": {
                "description": "Get a collection of available inventories.",
                "operationId": "getAvailableInventory",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Inventory ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Partnumber for the SKU",
                        "in": "query",
                        "name": "partNumber",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The fulfillmentcenter identifier",
                        "in": "query",
                        "name": "ffmCenterId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Store",
                        "in": "query",
                        "name": "store",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Quantity Available",
                        "in": "query",
                        "name": "qtyOnHand",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Allocated",
                        "in": "query",
                        "name": "qtyInProcess",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Backordered",
                        "in": "query",
                        "name": "qtyBackordered",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Available quantity allocated to Backorders",
                        "in": "query",
                        "name": "qtyAllocBackordered",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Reserved",
                        "in": "query",
                        "name": "qtyReserved",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Reserved",
                        "in": "query",
                        "name": "qtyUnavailable",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Bit value flag to indicate configuration",
                        "in": "query",
                        "name": "inventorySystem",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Inventory Min Threshold",
                        "in": "query",
                        "name": "minThreshold",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Inventory Max Threshold",
                        "in": "query",
                        "name": "maxThreshold",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Max BO Offset",
                        "in": "query",
                        "name": "maxBoOffset",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The lage time Offset",
                        "in": "query",
                        "name": "lagTimeOffset",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The reserve time Offset",
                        "in": "query",
                        "name": "reserveTimeOffset",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Inventory Status",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Inventory last updated date time. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "lastUpdated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "Status last updated date time. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "statusLastUpdate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "Force Backorder",
                        "in": "query",
                        "name": "forceBackorder",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Flag indicating available-to-promise status. This flag is incompatible with the Inventory ID filter.",
                        "in": "query",
                        "name": "availableToPromise",
                        "schema": {
                            "type": "number",
                            "enum": [
                                "1"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AvailableInventoryResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory"
                ]
            },
            "patch": {
                "description": "Update Available Inventory Resource",
                "operationId": "updateAvailableInventoryResource",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AvailableInventoryPatchRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/allocate": {
            "post": {
                "description": "This API allocates the inventory matching the store.",
                "operationId": "allocateAvailableInventory",
                "parameters": [
                    {
                        "description": "If forceBackorder is enabled in the database, setting this to true bypasses the on-hand check. False uses the default behavior.",
                        "example": false,
                        "in": "query",
                        "name": "forcebackorder",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "description": "If true, partial allocation from on-hand inventory is allowed. If false, only full allocation is allowed (default).",
                        "example": false,
                        "in": "query",
                        "name": "splitFulfillment",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "description": "The store used to reserve the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone used to commit the records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_AvailableInventoryAllocateView"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_AvailableInventoryAllocateView"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_AvailableInventoryAllocateView"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_AvailableInventoryAllocateView"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_AvailableInventoryAllocateView"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_AvailableInventoryAllocateView"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory allocate operation",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/check": {
            "post": {
                "description": "This API checks the inventory details that match the store.",
                "operationId": "checkAvailableInventory",
                "parameters": [
                    {
                        "description": "The store used to check the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryCheckActionBean"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckInventoryPostResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Check inventory by store",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/deallocate": {
            "post": {
                "description": "This API deallocates the inventory matching the store.",
                "operationId": "deallocateAvailableInventory",
                "parameters": [
                    {
                        "description": "The store used to deallocate the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone flag to commit all records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_Basic"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_Basic"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory deallocate operation",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/items": {
            "get": {
                "description": "This API fetches the inventory details that match the partnumber.",
                "operationId": "getAvailableInventoryItems",
                "parameters": [
                    {
                        "description": "The partNumber used to fetch the inventory details.It is matched to the partnumber.",
                        "example": "LR-FNTR-CO-0002-0002",
                        "in": "query",
                        "name": "partNumber",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "The store used to fetch the inventory details.It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "The fulfillment center used to fetch the inventory details.It is matched to the fulfillment center.",
                        "example": "MM2050",
                        "in": "query",
                        "name": "fulfillmentCenter",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "The searchTerm used to fetch the inventory details.It is matched to the partnumber.",
                        "example": "LR-FNTR-CO-0002-0002",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The status used to fetch the inventory details.It is matched to the status inventories.",
                        "example": "available",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "The offset specify page number.",
                        "example": 1,
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The limit used to specify number of inventory details records for each page.",
                        "example": 10,
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "description": "The sort used to sort the inventory details. For example partnumber.",
                        "example": "partnumber",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "partNumber"
                        }
                    },
                    {
                        "description": "The sortDir used to sort inventory details.",
                        "example": "ASC",
                        "in": "query",
                        "name": "sortDir",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "ASC"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminInventoryResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Fetch availableinventory",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/reserve": {
            "post": {
                "description": "This API reserves the inventory matching the store.",
                "operationId": "reserveAvailableInventory",
                "parameters": [
                    {
                        "description": "The store used to reserve the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone flag to commit all records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_Basic"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_Basic"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory reserve operation",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/reverse": {
            "post": {
                "description": "This API reverses the inventory matching the store.",
                "operationId": "reverseAvailableInventory",
                "parameters": [
                    {
                        "description": "The store used to reverse the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone flag to commit all records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_Basic"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_Basic"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Basic"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory reverse operation by store",
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/{id}": {
            "get": {
                "description": "Get available inventory details.",
                "operationId": "getAvailableInventoryById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AvailableInventory"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory"
                ]
            },
            "patch": {
                "description": "Update Available Inventory Resource",
                "operationId": "updateAvailableInventoryResourceById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Flag to ApplyToAllFulfillmentCenters",
                        "example": false,
                        "in": "query",
                        "name": "applyToAllFulfillmentCenters",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvailableInventoryPatchRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventories/{id}/receive": {
            "post": {
                "description": "Receive Ad hoc Inventory",
                "operationId": "receiveAdhocInventory",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReceiveAvailableInventoryDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory"
                ]
            }
        },
        "/v1/available-inventory-attributes": {
            "get": {
                "description": "Get a collection of inventory attributes.",
                "operationId": "getInventoryAttribute",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Inventory Attribute ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Inventory Attribute Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Inventory Attribute Value1",
                        "in": "query",
                        "name": "value1",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryAttributeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory Attribute"
                ]
            },
            "post": {
                "description": "Create inventory attribute details",
                "operationId": "createAvailableInventoryAttributes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvailableInventoryAttributes"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory Attribute"
                ]
            }
        },
        "/v1/available-inventory-attributes/{id}": {
            "delete": {
                "description": "Delete inventory attribute details by ID",
                "operationId": "deleteInventoryAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory Attribute"
                ]
            },
            "get": {
                "description": "Get inventory attribute details.",
                "operationId": "getInventoryAttributeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AvailableInventoryAttributes"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory Attribute"
                ]
            },
            "patch": {
                "description": "Update inventory attribute details by ID",
                "operationId": "updateInventoryAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AvailableInventoryAttributes"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Available Inventory Attribute"
                ]
            }
        },
        "/v1/contacts": {
            "get": {
                "description": "Get a collection of contacts.",
                "operationId": "getContact",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Contact ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Email ID",
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Primary Contact",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Secondary Contact",
                        "in": "query",
                        "name": "secondaryContact",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Phone",
                        "in": "query",
                        "name": "phone",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContactResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Contact"
                ]
            },
            "post": {
                "description": "Create contact details",
                "operationId": "createContact",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Contact"
                ]
            }
        },
        "/v1/contacts/{id}": {
            "delete": {
                "description": "Delete contact details by ID",
                "operationId": "deleteContactById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Contact"
                ]
            },
            "get": {
                "description": "Get contact details.",
                "operationId": "getContactById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Contact"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Contact"
                ]
            },
            "patch": {
                "description": "Update contact details by ID",
                "operationId": "updateContactById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContactDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Contact"
                ]
            }
        },
        "/v1/events": {
            "get": {
                "description": "Get a collection of events.",
                "operationId": "getEvent",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Event Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event Status",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The Event Type",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event Resource",
                        "in": "query",
                        "name": "resource",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event Action",
                        "in": "query",
                        "name": "action",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event Code",
                        "in": "query",
                        "name": "code",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Event Message",
                        "in": "query",
                        "name": "message",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Inventory Event"
                ]
            }
        },
        "/v1/events/{id}": {
            "get": {
                "description": "Get event details.",
                "operationId": "getEventById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Inventory Event"
                ]
            },
            "patch": {
                "description": "Update event details by ID",
                "operationId": "updateEventById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Inventory Event"
                ]
            }
        },
        "/v1/expected-inventories": {
            "get": {
                "description": "Get a collection of expected inventories.",
                "operationId": "getExpectedInventory",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Expected Inventory ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Inventory ID",
                        "in": "query",
                        "name": "inventoryId",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Partnumber for the SKU",
                        "in": "query",
                        "name": "partNumber",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The fulfillmentcenter identifier",
                        "in": "query",
                        "name": "ffmCenterId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Store",
                        "in": "query",
                        "name": "store",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Quantity Ordered",
                        "in": "query",
                        "name": "qtyOrdered",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Received",
                        "in": "query",
                        "name": "qtyReceived",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Remaining",
                        "in": "query",
                        "name": "qtyRemaining",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Quantity Allocated",
                        "in": "query",
                        "name": "qtyAllocated",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Expected date for the inventory to arrive. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "expectedDate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "Received date for the inventory. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "receivedDate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "Last updated date time. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "lastUpdate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "Mark for delete",
                        "in": "query",
                        "name": "markForDelete",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpectedInventoryResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            },
            "post": {
                "description": "Create expectedinventory",
                "operationId": "createExpectedInventory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ExpectedInventoryDTO"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventories/allocate": {
            "post": {
                "description": "This API reserves the inventory matching the store.",
                "operationId": "allocateExpectedInventory",
                "parameters": [
                    {
                        "description": "If forceBackorder is enabled in the database, setting this to true bypasses the on-hand check. False uses the default behavior.",
                        "example": false,
                        "in": "query",
                        "name": "forcebackorder",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "The store used to allocate the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone flag to commit all records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_Basic"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_Allocation"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Allocation"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Allocation"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Allocation"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Allocation"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory reserve operation",
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventories/calculate-time-intervals": {
            "post": {
                "description": "Calculate Time Intervals",
                "operationId": "calculateTimeIntervals",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RecurringInventoryInterval"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RecurringIntervalResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventories/deallocate": {
            "post": {
                "description": "This API deallocates the inventory matching the store.",
                "operationId": "deallocateExpectedInventory",
                "parameters": [
                    {
                        "description": "The store used to deallocate the inventory. It is matched to the store name.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The processAllOrNone flag to commit all records.",
                        "example": true,
                        "in": "query",
                        "name": "processAllOrNone",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InventoryActionBean_Deallocation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryActionResponse_Deallocation"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Deallocation"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Deallocation"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Deallocation"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer_Deallocation"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Performs inventory deallocate operation by store",
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventories/{id}": {
            "delete": {
                "description": "Delete expected inventory details by ID",
                "operationId": "deleteExpectedInventoryById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            },
            "get": {
                "description": "Get expected inventory by id.",
                "operationId": "getExpectedInventoryById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpectedInventory"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventories/{id}/receive": {
            "post": {
                "description": "Receive Expected Inventory",
                "operationId": "receiveExpectedInventory",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReceivedInventory"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory"
                ]
            }
        },
        "/v1/expected-inventory-comments": {
            "get": {
                "description": "Get a collection of Expected Inventory comments.",
                "operationId": "getExpectedInventoryComment",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Expected Inventory Comment Id",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Entiry Id",
                        "in": "query",
                        "name": "expectedInventoryId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Comment Text",
                        "in": "query",
                        "name": "commentText",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Created By User Details.",
                        "in": "query",
                        "name": "createdBy",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Comment Time Created. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "timeCreated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory Comments"
                ]
            },
            "post": {
                "description": "Create Expected Inventory comment details",
                "operationId": "createExpectedInventoryComment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExpectedInventoryComment"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory Comments"
                ]
            }
        },
        "/v1/expected-inventory-comments/{id}": {
            "get": {
                "description": "Get Expected Inventory comment details.",
                "operationId": "getExpectedInventoryCommentById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpectedInventoryComment"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Expected Inventory Comments"
                ]
            }
        },
        "/v1/file-upload-samples": {
            "get": {
                "description": "This API downloads sample files.",
                "operationId": "getSampleFiles",
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Download sample files.",
                "tags": [
                    "File Upload for Inventory"
                ]
            }
        },
        "/v1/file-uploads": {
            "get": {
                "description": "Get a collection of file uploads.",
                "operationId": "getFileUpload",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The File Upload Job Number",
                        "in": "query",
                        "name": "jobNumber",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Contact",
                        "in": "query",
                        "name": "contact",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload FileName",
                        "in": "query",
                        "name": "fileName",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Entity",
                        "in": "query",
                        "name": "entity",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Time Created. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "timeCreated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "The File Upload Time Scheduled. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "timeScheduled",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "The File Upload Time Started. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "timeStarted",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "The File Upload Time Completed. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "timeCompleted",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "The File Upload Status",
                        "explode": true,
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileUploadResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "File Upload for Inventory"
                ]
            },
            "post": {
                "description": "This API uploads the inventory the files.",
                "operationId": "createFileUpload",
                "parameters": [
                    {
                        "description": "The scheduled timestamp to process the input files.",
                        "example": "2024-09-03T14:43:28.077Z",
                        "in": "query",
                        "name": "scheduledTimestamp",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "fileToUpload": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The fileToUpload is input inventory file to be loaded. Suported types are .csv and .zip."
                                    }
                                },
                                "required": [
                                    "fileToUpload"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "The request was accepted.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the newly uploaded file(s)",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Inventory file uploads",
                "tags": [
                    "File Upload for Inventory"
                ]
            }
        },
        "/v1/file-uploads/{id}": {
            "delete": {
                "description": "This API cancels scheduled upload.",
                "operationId": "cancelScheduledFileUpload",
                "parameters": [
                    {
                        "description": "The identifier used to cancel scheduled file upload record.",
                        "example": 1,
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Cancel Scheduled File Upload",
                "tags": [
                    "File Upload for Inventory"
                ]
            },
            "get": {
                "operationId": "getFileUploadReportById",
                "parameters": [
                    {
                        "description": "The identifier used to find file upload record.",
                        "example": 1,
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileUpload"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Fetch file upload report",
                "tags": [
                    "File Upload for Inventory"
                ]
            }
        },
        "/v1/fulfillment-center-attributes": {
            "get": {
                "description": "Get a collection of fulfillment center attributes.",
                "operationId": "getFulfillmentCenterAttribute",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterAttribute ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterAttribute Name",
                        "in": "query",
                        "name": "attrId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterAttribute Value1",
                        "in": "query",
                        "name": "value1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter ID",
                        "in": "query",
                        "name": "value2",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter ID",
                        "in": "query",
                        "name": "fulfillmentCenterId",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterAttributeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Attribute"
                ]
            },
            "post": {
                "description": "Create fulfillment center attribute details",
                "operationId": "createFulfillmentCenterAttribute",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Attribute"
                ]
            }
        },
        "/v1/fulfillment-center-attributes/{id}": {
            "delete": {
                "description": "Delete fulfillment center attribute details by ID",
                "operationId": "deleteFulfillmentCenterAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Attribute"
                ]
            },
            "get": {
                "description": "Get fulfillment center attribute details.",
                "operationId": "getFulfillmentCenterAttributeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterAttribute"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Attribute"
                ]
            },
            "patch": {
                "description": "Update fulfillment center attribute details by ID",
                "operationId": "updateFulfillmentCenterAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterAttributeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Attribute"
                ]
            }
        },
        "/v1/fulfillment-center-mode-relationships": {
            "get": {
                "description": "Get a collection of fulfillment center and fulfillment mode associations.",
                "operationId": "getFulfillmentCenterModeRel",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterModeRelation ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Fulfillment Center Id",
                        "in": "query",
                        "name": "fulfillmentCenterId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Fulfillment Mode Id",
                        "in": "query",
                        "name": "fulfillmentModeId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The lage time Offset",
                        "in": "query",
                        "name": "lagTimeOffset",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterModeRelResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Mode Association"
                ]
            },
            "post": {
                "description": "Create a fulfillment center and fulfillment mode association",
                "operationId": "createFulfillmentCenterModeRel",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterModeRelDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Mode Association"
                ]
            }
        },
        "/v1/fulfillment-center-mode-relationships/{id}": {
            "delete": {
                "description": "Delete a fulfillment center and fulfillment mode association by ID",
                "operationId": "deleteFulfillmentCenterModeRelById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Mode Association"
                ]
            },
            "get": {
                "description": "Get the fulfillment center and fulfillment mode association for a specific ID.",
                "operationId": "getFulfillmentCenterModeRelById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterModeRel"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Mode Association"
                ]
            },
            "patch": {
                "description": "Update a fulfillment center and fulfillment mode association by ID",
                "operationId": "updateFulfillmentCenterModeRelById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LagTimeOffsetUpdateDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Mode Association"
                ]
            }
        },
        "/v1/fulfillment-center-types": {
            "get": {
                "description": "Get a collection of fulfillment center types.",
                "operationId": "getFulfillmentCenterType",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterType ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterType Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenterType Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterTypeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Type"
                ]
            },
            "post": {
                "description": "Create fulfillment center type details",
                "operationId": "createFulfillmentCenterType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterTypeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Type"
                ]
            }
        },
        "/v1/fulfillment-center-types/{id}": {
            "delete": {
                "description": "Delete fulfillment center type details by ID",
                "operationId": "deleteFulfillmentCenterTypeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Type"
                ]
            },
            "get": {
                "description": "Get fulfillment center type details.",
                "operationId": "getFulfillmentCenterTypeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterType"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Type"
                ]
            },
            "patch": {
                "description": "Update fulfillment center type details by ID",
                "operationId": "updateFulfillmentCenterTypeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterTypeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center Type"
                ]
            }
        },
        "/v1/fulfillment-centers": {
            "delete": {
                "description": "Delete fulfillment center details by IDs",
                "operationId": "deleteFulfillmentCenterByIds",
                "parameters": [
                    {
                        "description": "Multiple set of identifiers.",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            },
            "get": {
                "description": "Get a collection of fulfillment centers.",
                "operationId": "getFulfillmentCenter",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter Status",
                        "in": "query",
                        "name": "active",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter LastUpdated date/time. Supports filtering by a start and end date/time range.",
                        "explode": true,
                        "in": "query",
                        "name": "lastUpdated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "style": "form"
                    },
                    {
                        "description": "The FulfillmentCenter Address ID",
                        "in": "query",
                        "name": "addressId",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter Type",
                        "in": "query",
                        "name": "typeId",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentCenter Contact",
                        "in": "query",
                        "name": "contactId",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenterResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            },
            "patch": {
                "description": "Update fulfillment center details",
                "operationId": "updateFulfillmentCenter",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FulfillmentCenter"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            },
            "post": {
                "description": "Create fulfillment center details",
                "operationId": "createFulfillmentCenterForInventory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            }
        },
        "/v1/fulfillment-centers/{id}": {
            "delete": {
                "description": "Delete fulfillment center details by ID",
                "operationId": "deleteFulfillmentCenterByIdForInventory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            },
            "get": {
                "description": "Get fulfillment center details.",
                "operationId": "getFulfillmentCenterByIdForInventory",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentCenter"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            },
            "patch": {
                "description": "Update fulfillment center details by ID",
                "operationId": "updateFulfillmentCenterByIdForInventory",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentCenterDTONoId"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Center for Inventory"
                ]
            }
        },
        "/v1/fulfillment-modes": {
            "get": {
                "description": "Get a collection of fulfillment modes.",
                "operationId": "getFulfillmentMode",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentMode ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The FulfillmentMode Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The lage time Offset",
                        "in": "query",
                        "name": "lagTimeOffset",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The FulfillmentMode Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentModeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Mode"
                ]
            },
            "post": {
                "description": "Create fulfillment mode details",
                "operationId": "createFulfillmentMode",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentModeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Mode"
                ]
            }
        },
        "/v1/fulfillment-modes/{id}": {
            "delete": {
                "description": "Delete fulfillment mode details by ID",
                "operationId": "deleteFulfillmentModeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Mode"
                ]
            },
            "get": {
                "description": "Get fulfillment mode details.",
                "operationId": "getFulfillmentModeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FulfillmentMode"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Mode"
                ]
            },
            "patch": {
                "description": "Update fulfillment mode details by ID",
                "operationId": "updateFulfillmentModeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FulfillmentModeDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Fulfillment Mode"
                ]
            }
        },
        "/v1/inventory-locations": {
            "get": {
                "description": "Find inventory locations with default item attributes such as quantity of 1 and C62 unit of measure.",
                "operationId": "getInventoryLocations",
                "parameters": [
                    {
                        "description": "The store identifier.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The fulfillment center code(s).",
                        "example": "R00B2C",
                        "in": "query",
                        "name": "fulfillmentCenter",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "The part number.",
                        "example": "LR-FNTR-CO-0001-0001",
                        "in": "query",
                        "name": "partNumber",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The limit used to specify number of fulfillment centers for each page.",
                        "example": 10,
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "description": "The sortBy used to sort the fulfillment centers.",
                        "example": "fulfillmentCenter",
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "fulfillmentCenter"
                        }
                    },
                    {
                        "description": "The sortDir used to sort fulfillment centers.",
                        "example": "ASC",
                        "in": "query",
                        "name": "sortDir",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "ASC"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocateInventoryResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "summary": "Locate inventory with default item attributes.",
                "tags": [
                    "Inventory Locations"
                ]
            },
            "post": {
                "description": "Find inventory locations with request body to take additional item parameters such as quantity and unit of measure.",
                "operationId": "getInventoryLocationsWithRequestBody",
                "parameters": [
                    {
                        "description": "The store identifier.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The fulfillment center code(s).",
                        "example": "R00B2C",
                        "in": "query",
                        "name": "fulfillmentCenter",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The limit used to specify number of fulfillment centers for each page.",
                        "example": 10,
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "description": "The sortBy used to sort the fulfillment centers.",
                        "example": "fulfillmentCenter",
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "fulfillmentCenter"
                        }
                    },
                    {
                        "description": "The sortDir used to sort fulfillment centers.",
                        "example": "ASC",
                        "in": "query",
                        "name": "sortDir",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "ASC"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LocateInventoryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LocateInventoryResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "summary": "Locate inventory with additional item attributes.",
                "tags": [
                    "Inventory Locations"
                ]
            }
        },
        "/v1/inventory-statistics": {
            "get": {
                "description": "This API fetches the inventory statistics for all FFCs.",
                "operationId": "getAdminInventoryStatsForWidget",
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryStatisticsResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Fetch inventory statistics across all fulfillment centers",
                "tags": [
                    "Inventory"
                ]
            }
        },
        "/v1/inventory-statuses": {
            "get": {
                "description": "Get a collection of inventory statuses.",
                "operationId": "getInventoryStatus",
                "parameters": [
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Inventory Status ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Inventory Status Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Inventory Status Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryStatusResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Inventory Status"
                ]
            }
        },
        "/v1/inventory-statuses/{id}": {
            "get": {
                "description": "Get inventory status details.",
                "operationId": "getInventoryStatusById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryStatusRequestBody"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Inventory Status"
                ]
            }
        },
        "/v1/item-attributes": {
            "get": {
                "description": "Get a collection of item attributes.",
                "operationId": "getItemAttribute",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item Attribute ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Item Attribute Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item Attribute Value1",
                        "in": "query",
                        "name": "value1",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Partnumber",
                        "in": "query",
                        "name": "partNumber",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemAttributeResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item Attribute for Inventory"
                ]
            },
            "post": {
                "description": "Create item attribute details",
                "operationId": "createItemAttribute",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The operation was successful.",
                        "headers": {
                            "Location": {
                                "description": "The URI of the Resource",
                                "schema": {
                                    "type": "string"
                                },
                                "style": "simple"
                            }
                        }
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item Attribute for Inventory"
                ]
            }
        },
        "/v1/item-attributes/{id}": {
            "delete": {
                "description": "Delete item attribute details by ID",
                "operationId": "deleteItemAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item Attribute for Inventory"
                ]
            },
            "get": {
                "description": "Get item attribute details.",
                "operationId": "getItemAttributeById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemAttribute"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item Attribute for Inventory"
                ]
            },
            "patch": {
                "description": "Update item attribute details by ID",
                "operationId": "updateItemAttributeById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemAttribute"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item Attribute for Inventory"
                ]
            }
        },
        "/v1/item-inventories": {
            "get": {
                "description": "Fetches inventory details matching the specified criteria.",
                "operationId": "getInventoryItemAvailability",
                "parameters": [
                    {
                        "description": "List of part numbers to fetch inventory details for.",
                        "example": "LR-FNTR-CO-0002-0002",
                        "in": "query",
                        "name": "partNumber",
                        "required": true,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/ArraySchema"
                                }
                            ]
                        }
                    },
                    {
                        "description": "Store to fetch inventory details from.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional list of fulfillment centers to filter results.",
                        "example": "MM2050",
                        "in": "query",
                        "name": "fulfillmentCenter",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/ArraySchema"
                                }
                            ]
                        }
                    },
                    {
                        "description": "Optional list of inventory statuses to filter results.",
                        "example": "available",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/ArraySchema"
                                }
                            ]
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Optional offset for pagination.",
                        "example": 1,
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "Optional limit for pagination.",
                        "example": 10,
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "description": "Optional field to sort results by.",
                        "example": "partNumber",
                        "in": "query",
                        "name": "sortBy",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "partNumber"
                        }
                    },
                    {
                        "description": "Optional direction to sort results.",
                        "example": "ASC",
                        "in": "query",
                        "name": "sortDir",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "ASC"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryResponse"
                                }
                            }
                        },
                        "description": "Request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Bad Request - Invalid parameters."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Unauthorized - Invalid session."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Forbidden - User not authorized."
                    },
                    "404": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not Found - Resource could not be found."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Internal Server Error - Check server logs for details."
                    }
                },
                "summary": "Fetch inventory by part number, fulfillment center, status, store",
                "tags": [
                    "Item Inventory"
                ]
            }
        },
        "/v1/item-inventories/{partNumber}": {
            "get": {
                "description": "Fetches inventory details for the specified part number.",
                "operationId": "getInventoryItemAvailabilityById",
                "parameters": [
                    {
                        "description": "Part number to fetch inventory details for.",
                        "example": "LR-FNTR-CO-0002-0002",
                        "in": "path",
                        "name": "partNumber",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Store to fetch inventory details from.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "store",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional list of fulfillment centers to filter results.",
                        "example": "MM2050",
                        "in": "query",
                        "name": "fulfillmentCenter",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/ArraySchema"
                                }
                            ]
                        }
                    },
                    {
                        "description": "Optional list of inventory statuses to filter results.",
                        "example": "available",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "$ref": "#/components/schemas/ArraySchema"
                                }
                            ]
                        }
                    },
                    {
                        "description": "Set to false to exclude items from ATP and ignore inventory settings. If true or omitted, the inventory system will follow database settings.",
                        "example": false,
                        "in": "query",
                        "name": "availableToPromise",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryResponse"
                                }
                            }
                        },
                        "description": "Request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Bad Request - Invalid parameters."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Unauthorized - Invalid session."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Forbidden - User not authorized."
                    },
                    "404": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not Found - Resource could not be found."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Internal Server Error - Check server logs for details."
                    }
                },
                "summary": "Fetch inventory by part number",
                "tags": [
                    "Item Inventory"
                ]
            }
        },
        "/v1/items": {
            "get": {
                "description": "Get a collection of items.",
                "operationId": "getItem",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item ID",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item Description",
                        "in": "query",
                        "name": "productDS",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item Unit Of Measure",
                        "in": "query",
                        "name": "unitOfMeasure",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Item Min Threshold",
                        "in": "query",
                        "name": "minThreshold",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Item Max Threshold",
                        "in": "query",
                        "name": "maxThreshold",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Bit value flag to indicate the inventory system configuration",
                        "in": "query",
                        "name": "inventorySystem",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Track Inventory flag",
                        "in": "query",
                        "name": "trackInventory",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The Max BO Offset",
                        "in": "query",
                        "name": "maxBoOffset",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The lage time Offset",
                        "in": "query",
                        "name": "lagTimeOffset",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The reserve time Offset",
                        "in": "query",
                        "name": "reserveTimeOffset",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Th sku has Expected Inventory",
                        "in": "query",
                        "name": "hasExpectedInventory",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The backorder limit",
                        "in": "query",
                        "name": "backorderLimit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "The Store",
                        "in": "query",
                        "name": "store",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ItemResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item for Inventory"
                ]
            },
            "patch": {
                "description": "Update item details",
                "operationId": "updateItem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ItemMutableDTO"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item for Inventory"
                ]
            }
        },
        "/v1/items/{id}": {
            "get": {
                "description": "Get item details.",
                "operationId": "getItemById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of related resources referenced in the links to be returned. If no related resources are specified, no related resources are returned.",
                        "in": "query",
                        "name": "expand",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Item"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item for Inventory"
                ]
            },
            "patch": {
                "description": "Update item details by ID",
                "operationId": "updateItemById",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemDTO"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "The operation was successful."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "Item for Inventory"
                ]
            }
        },
        "/v1/store-suggestions": {
            "get": {
                "description": "This API returns the list of stores that match the search term.",
                "operationId": "getInventoryStoreSuggestions",
                "parameters": [
                    {
                        "description": "The search term used to find the stores. It is matched to the store name. The search term should be at least 3 characters long.",
                        "example": "Ruby",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The offset used to specify page number.",
                        "example": 1,
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The limit used to specify number of store names for each page.",
                        "example": 10,
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 10
                        }
                    },
                    {
                        "description": "The sortDir used to sort the store names.",
                        "example": "ASC",
                        "in": "query",
                        "name": "sortDir",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "ASC"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuggestionsStoreResponse"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/hal+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "summary": "Fetch search suggestions for stores",
                "tags": [
                    "Inventory"
                ]
            }
        },
        "/v1/upload-statuses": {
            "get": {
                "description": "Get a collection of file upload statuses.",
                "operationId": "getFileUploadStatus",
                "parameters": [
                    {
                        "description": "Limits search results to include only those with searchable fields matching the value of this parameter. The search type can be either partial or exact.",
                        "in": "query",
                        "name": "searchTerm",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The position within the resulting dataset where the query begins returning item records. If the offset is \"5\", the records that returned begin with the sixth record that matches the query parameters. If the offset is \"0\", the records that are returned begin with the first record that matches the query parameters.",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "minimum": 0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "description": "The maximum number of records to return.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "minimum": -1,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties which controls the order of the contents being listed, prefixed by either (-) to sort by descending order, or optionally (+) to sort by ascending order. For example, sort=name,-d which means, order the contents based on the name value in ascending order, then by the id value in descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Status Identifier",
                        "in": "query",
                        "name": "identifier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Status Name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The File Upload Status Description",
                        "in": "query",
                        "name": "description",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileUploadStatusResponseContainer"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "File Upload Status for Inventory"
                ]
            }
        },
        "/v1/upload-statuses/{id}": {
            "get": {
                "description": "Get file upload status details by Identifier.",
                "operationId": "getFileUploadStatusById",
                "parameters": [
                    {
                        "description": "The identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The comma-separated set of properties to be returned. If no properties are specified, all properties are returned.",
                        "in": "query",
                        "name": "fields",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileUploadStatusRequestBody"
                                }
                            }
                        },
                        "description": "The request completed successfully."
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a client error."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "Not authenticated. The user session was not valid."
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The user was not authorized to perform the specified request."
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "The resource was not found."
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseContainer"
                                }
                            }
                        },
                        "description": "There was a server error."
                    }
                },
                "security": [
                    {
                        "BearerAuthentication": []
                    }
                ],
                "tags": [
                    "File Upload Status for Inventory"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Address": {
                "type": "object",
                "properties": {
                    "addressLine1": {
                        "type": "string",
                        "description": "Address Line1",
                        "example": "330 Potrero Ave"
                    },
                    "addressLine2": {
                        "type": "string",
                        "description": "Address Line2",
                        "example": "Suite #800"
                    },
                    "addressLine3": {
                        "type": "string",
                        "description": "Address Line2",
                        "example": "Tower #3"
                    },
                    "city": {
                        "type": "string",
                        "description": "City",
                        "example": "Sunnyvale"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country",
                        "example": "US"
                    },
                    "fax": {
                        "type": "string",
                        "description": "Fax",
                        "example": "919.000.0000"
                    },
                    "id": {
                        "type": "string",
                        "description": "Address ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "latitude": {
                        "type": "string",
                        "description": "Latitude",
                        "example": "37.38667"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "longitude": {
                        "type": "string",
                        "description": "Longitude",
                        "example": "-122.03763"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone",
                        "example": "919.000.0000"
                    },
                    "state": {
                        "type": "string",
                        "description": "State",
                        "example": "CA"
                    },
                    "zip": {
                        "type": "string",
                        "description": "Country",
                        "example": "94085"
                    }
                }
            },
            "AddressResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Address"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "AdminInventoryResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryAvailabilityAdminBean"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/available-inventories/items"
                    }
                }
            },
            "AllocationDetailBean_Allocation": {
                "type": "object",
                "properties": {
                    "expectedInventoryId": {
                        "type": "integer",
                        "description": "Expected Ineventory Id",
                        "format": "int64",
                        "example": 1
                    },
                    "expectedShipDate": {
                        "type": "string",
                        "description": "Expected Ship Date",
                        "format": "date-time"
                    },
                    "quantityAllocated": {
                        "type": "number",
                        "description": "Allocated Quantity",
                        "format": "double",
                        "example": 10.0
                    }
                },
                "description": "BackOrdered Allocation Details"
            },
            "AllocationDetailBean_Deallocation": {
                "type": "object",
                "properties": {
                    "expectedInventoryId": {
                        "type": "integer",
                        "description": "Expected Ineventory Id",
                        "format": "int64",
                        "example": 1
                    },
                    "quantityAllocated": {
                        "type": "number",
                        "description": "Allocated Quantity",
                        "format": "double",
                        "example": 10.0
                    }
                },
                "description": "BackOrdered Allocation Details"
            },
            "ArraySchema": {
                "type": "object"
            },
            "Attribute": {
                "required": [
                    "name",
                    "value1"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Attribute Description",
                        "example": "Bin Location"
                    },
                    "id": {
                        "type": "string",
                        "description": "Attribute ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "internalAttribute": {
                        "type": "boolean",
                        "description": "Internal Attribute",
                        "example": true
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "description": "Attribute Name",
                        "example": "Bin Location"
                    },
                    "systemAttribute": {
                        "type": "boolean",
                        "description": "System Attribute",
                        "example": true
                    },
                    "value1": {
                        "type": "string",
                        "description": "Attribute Value1",
                        "example": "1-B-03-04-05"
                    },
                    "value2": {
                        "type": "string",
                        "description": "Attribute Value2",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "AttributeBean": {
                "type": "object",
                "properties": {
                    "attrName": {
                        "type": "string",
                        "description": "Attribute identifier",
                        "example": "Attribute1"
                    },
                    "attrValue1": {
                        "type": "string",
                        "description": "Attribute value1",
                        "example": "SG2050_DR-BFFT-0001-0002_Ruby"
                    },
                    "attrValue2": {
                        "type": "string",
                        "description": "Attribute value2",
                        "example": "{\"title\":\"My first day at work\",\"Feeling\":\"Mixed feeling\"}"
                    },
                    "internal": {
                        "type": "boolean",
                        "description": "Internal property to distinguish admin and shopper attributes",
                        "writeOnly": true,
                        "example": true
                    }
                }
            },
            "AttributeDTO": {
                "required": [
                    "name",
                    "value1"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Attribute Description",
                        "example": "Bin Location"
                    },
                    "id": {
                        "type": "string",
                        "description": "Attribute ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "internalAttribute": {
                        "type": "boolean",
                        "description": "Internal Attribute",
                        "example": true
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "Attribute Name",
                        "example": "Bin Location"
                    },
                    "systemAttribute": {
                        "type": "boolean",
                        "description": "System Attribute",
                        "example": true
                    },
                    "value1": {
                        "type": "string",
                        "description": "Attribute Value1",
                        "example": "1-B-03-04-05"
                    },
                    "value2": {
                        "type": "string",
                        "description": "Attribute Value2",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "AttributeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attribute"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "AvailableInventory": {
                "type": "object",
                "properties": {
                    "ffmCenterId": {
                        "type": "string",
                        "description": "FFMCENTER_ID",
                        "example": "R00B2C"
                    },
                    "forceBackorder": {
                        "type": "string",
                        "description": "FORCEBACKORDER",
                        "example": "0"
                    },
                    "id": {
                        "type": "string",
                        "description": "Inventory ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "inventorySystem": {
                        "type": "string",
                        "description": "Inventory System",
                        "example": "0"
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "LAST_UPDATED",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "maxBoOffset": {
                        "type": "string",
                        "description": "MAXBOOFFSET",
                        "example": "7776000"
                    },
                    "maxThreshold": {
                        "type": "string",
                        "description": "Maximum Threshold",
                        "example": "100.0"
                    },
                    "minThreshold": {
                        "type": "string",
                        "description": "Minimum Threshold",
                        "example": "25.0"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "PARTNUMBER",
                        "example": "BD-BEDS-0001-0001"
                    },
                    "qtyAllocBackordered": {
                        "type": "string",
                        "description": "QTYALLOCBACKORDERED",
                        "example": "10"
                    },
                    "qtyBackordered": {
                        "type": "string",
                        "description": "QTYBACKORDERED",
                        "example": "10"
                    },
                    "qtyInProcess": {
                        "type": "string",
                        "description": "QTYINPROCESS",
                        "example": "10"
                    },
                    "qtyOnHand": {
                        "type": "string",
                        "description": "QTYONHAND",
                        "example": "10"
                    },
                    "qtyReserved": {
                        "type": "string",
                        "description": "QTYRESERVED",
                        "example": "10"
                    },
                    "qtyUnavailable": {
                        "type": "string",
                        "description": "QTYUNAVAILABLE",
                        "example": "10"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "format": "double"
                    },
                    "reserveTimeOffset": {
                        "type": "string",
                        "description": "RESERVETIMEOFFSET",
                        "example": "7776000"
                    },
                    "status": {
                        "type": "string",
                        "description": "STATUS_ID",
                        "readOnly": true,
                        "example": "available"
                    },
                    "statusLastUpdate": {
                        "type": "string",
                        "description": "STATUS_LAST_UPDATE",
                        "format": "date-time"
                    },
                    "store": {
                        "type": "string",
                        "description": "Store",
                        "example": "RUBY"
                    }
                }
            },
            "AvailableInventoryAttributes": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "internal": {
                        "type": "boolean"
                    },
                    "inventoryId": {
                        "type": "string",
                        "description": "INVENTORY_ID",
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute.",
                        "example": "attr1"
                    },
                    "value1": {
                        "type": "string",
                        "description": "The first value associated with the attribute.",
                        "example": "value1"
                    },
                    "value2": {
                        "type": "string",
                        "description": "The second value associated with the attribute, stored as JSON.",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "AvailableInventoryPatchRequest": {
                "type": "object",
                "properties": {
                    "forceBackorder": {
                        "type": "string",
                        "description": "Flag to enforce Backorder",
                        "example": "0"
                    },
                    "id": {
                        "type": "string",
                        "description": "Inventory ID",
                        "example": "1"
                    },
                    "inventorySystem": {
                        "type": "string",
                        "description": "Inventory System",
                        "example": "0"
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "1"
                    },
                    "maxBoOffset": {
                        "type": "string",
                        "description": "MAXBOOFFSET",
                        "example": "7776000"
                    },
                    "maxThreshold": {
                        "type": "string",
                        "description": "Maximum Threshold",
                        "example": "100.0"
                    },
                    "minThreshold": {
                        "type": "string",
                        "description": "Minimum Threshold",
                        "example": "25.0"
                    },
                    "reserveTimeOffset": {
                        "type": "string",
                        "description": "RESERVETIMEOFFSET",
                        "example": "7776000"
                    }
                }
            },
            "AvailableInventoryResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AvailableInventory"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "CheckInventoryPostResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "description": "List of inventory availability details for shoppers.",
                        "items": {
                            "$ref": "#/components/schemas/InventoryAvailabilityShopperBean"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "The number of inventory items available.",
                        "format": "int64",
                        "example": 1
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "A URL or identifier related to the inventory check.",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/available-inventories/check?store=Ruby"
                    }
                }
            },
            "CommentResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExpectedInventoryComment"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "Contact": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email ID",
                        "example": "john.smith@hcl.com"
                    },
                    "id": {
                        "type": "string",
                        "description": "Contact ID",
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "description": "Primary Contact",
                        "example": "John Smith"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone",
                        "example": "919.000.0000"
                    },
                    "secondaryContact": {
                        "type": "string",
                        "description": "Secondary Contact",
                        "example": "John Smith"
                    }
                }
            },
            "ContactDTO": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email ID",
                        "example": "john.smith@hcl.com"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "Primary Contact",
                        "example": "John Smith"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone",
                        "example": "919.000.0000"
                    },
                    "secondaryContact": {
                        "type": "string",
                        "description": "Secondary Contact",
                        "example": "John Smith"
                    }
                }
            },
            "ContactResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contact"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "EStoreInventoryAdminBean": {
                "type": "object",
                "properties": {
                    "fulfillmentCentersAboveThresholdCount": {
                        "type": "integer",
                        "description": "Fulfillment centers above threshold count",
                        "format": "int32",
                        "example": 100
                    },
                    "fulfillmentCentersBelowThresholdCount": {
                        "type": "integer",
                        "description": "Fulfillment centers below threshold count",
                        "format": "int32",
                        "example": 100
                    },
                    "fulfillmentCentersOutOfStockCount": {
                        "type": "integer",
                        "description": "Fulfillment centers out of stock count",
                        "format": "int32",
                        "example": 100
                    },
                    "quantity": {
                        "type": "number",
                        "description": "Total available quantity of the item",
                        "format": "double",
                        "example": 100.0
                    },
                    "store": {
                        "type": "string",
                        "description": "Store name",
                        "example": "Ruby"
                    }
                }
            },
            "Error": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "correlationId": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "messageArguments": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageKey": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponseContainer": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponseContainer_Allocation": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error_Allocation"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponseContainer_AvailableInventoryAllocateView": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error_AvailableInventoryAllocateView"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponseContainer_Basic": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error_Basic"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "ErrorResponseContainer_Deallocation": {
                "type": "object",
                "properties": {
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Error_Deallocation"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "Error_Allocation": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "correlationId": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "messageArguments": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageKey": {
                        "type": "string"
                    }
                }
            },
            "Error_AvailableInventoryAllocateView": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "correlationId": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "messageArguments": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageKey": {
                        "type": "string"
                    }
                }
            },
            "Error_Basic": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "correlationId": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "messageArguments": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageKey": {
                        "type": "string"
                    }
                }
            },
            "Error_Deallocation": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "correlationId": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "messageArguments": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageKey": {
                        "type": "string"
                    }
                }
            },
            "Event": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "eventId": {
                        "type": "string"
                    },
                    "lastTriggered": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "message": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resource": {
                        "type": "string"
                    },
                    "status": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "INTERNAL",
                            "EXTERNAL",
                            "ALL"
                        ]
                    }
                }
            },
            "EventDTO": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string"
                    },
                    "code": {
                        "type": "string"
                    },
                    "lastTriggered": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "message": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "resource": {
                        "type": "string"
                    },
                    "status": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "INTERNAL",
                            "EXTERNAL",
                            "ALL"
                        ]
                    }
                }
            },
            "EventResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Event"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "ExpectedInventory": {
                "type": "object",
                "properties": {
                    "expectedDate": {
                        "type": "string",
                        "description": "EXPECTEDDATE",
                        "format": "date-time"
                    },
                    "ffmCenterId": {
                        "type": "string",
                        "description": "FFMCENTER_ID",
                        "example": "R00B2C"
                    },
                    "id": {
                        "type": "string",
                        "description": "EXPECTEDINVENTORY_ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "inventoryId": {
                        "type": "string",
                        "description": "INVENTORY_ID",
                        "example": "1"
                    },
                    "lastUpdate": {
                        "type": "string",
                        "description": "LASTUPDATE",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "PARTNUMBER",
                        "example": "BD-BEDS-0001-0001"
                    },
                    "qtyAllocated": {
                        "type": "string",
                        "description": "QTYALLOCATED",
                        "example": "10"
                    },
                    "qtyOrdered": {
                        "type": "string",
                        "description": "QTYORDERED",
                        "example": "10"
                    },
                    "qtyReceived": {
                        "type": "string",
                        "description": "QTYRECEIVED",
                        "example": "10"
                    },
                    "qtyRemaining": {
                        "type": "string",
                        "description": "QTYREMAINING",
                        "example": "10"
                    },
                    "receivedDate": {
                        "type": "string",
                        "description": "RECEIVEDDATE",
                        "format": "date-time"
                    },
                    "store": {
                        "type": "string",
                        "description": "Store",
                        "example": "RUBY"
                    }
                }
            },
            "ExpectedInventoryComment": {
                "type": "object",
                "properties": {
                    "commentText": {
                        "type": "string",
                        "description": "Comment Text",
                        "example": "This is a comment."
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Created By",
                        "readOnly": true,
                        "example": "user@example.com"
                    },
                    "expectedInventoryId": {
                        "type": "integer",
                        "description": "Expected Inventory ID",
                        "format": "int64",
                        "example": 12345
                    },
                    "id": {
                        "type": "string",
                        "description": "Expected Inventory Comment ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "timeCreated": {
                        "type": "string",
                        "description": "Time Created",
                        "readOnly": true,
                        "example": "2023-10-01T12:00:00Z"
                    }
                }
            },
            "ExpectedInventoryDTO": {
                "type": "object",
                "properties": {
                    "expectedDate": {
                        "type": "string",
                        "description": "EXPECTEDDATE",
                        "format": "date-time"
                    },
                    "inventoryId": {
                        "type": "string",
                        "description": "INVENTORY_ID",
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "qtyOrdered": {
                        "type": "string",
                        "description": "QTYORDERED",
                        "example": "10"
                    }
                }
            },
            "ExpectedInventoryResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExpectedInventory"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FileUpload": {
                "type": "object",
                "properties": {
                    "entity": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "jobNumber": {
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "person": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "timeCompleted": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "timeCreated": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "timeScheduled": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "timeStarted": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "FileUploadResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileUpload"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FileUploadStatusRequestBody": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "FileUploadStatusResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileUploadStatusRequestBody"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FulfillmentCenter": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Fulfillment Center Status",
                        "example": true
                    },
                    "addressId": {
                        "type": "string",
                        "description": "Fulfillment Center Address ID",
                        "example": "1"
                    },
                    "contactId": {
                        "type": "string",
                        "description": "Fulfillment Center Contact Email ID",
                        "example": "1"
                    },
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Center Description",
                        "example": "Ruby online store fulfillment center"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Center ID",
                        "example": "R00B2C"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "Fulfillment Center Last Updated Timestamp",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markDeleted": {
                        "type": "boolean",
                        "description": "Fulfillment Mode Deleted",
                        "example": false
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Center Name",
                        "example": "Ruby"
                    },
                    "typeId": {
                        "type": "string",
                        "description": "Fulfillment Center Type ID",
                        "example": "1"
                    }
                }
            },
            "FulfillmentCenterAttribute": {
                "type": "object",
                "properties": {
                    "attrId": {
                        "type": "integer",
                        "description": "Attribute Id Reference",
                        "format": "int64"
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment Center ID",
                        "example": "R00B2C"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Center Attribute ID",
                        "readOnly": true,
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value1": {
                        "type": "string",
                        "description": "Fulfillment Center Attribute Value1",
                        "example": "1-B-03-04-05"
                    },
                    "value2": {
                        "type": "string",
                        "description": "Fulfillment Center Attribute Value2",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "FulfillmentCenterAttributeDTO": {
                "type": "object",
                "properties": {
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value1": {
                        "type": "string",
                        "description": "Fulfillment Center Attribute Value1",
                        "example": "1-B-03-04-05"
                    },
                    "value2": {
                        "type": "string",
                        "description": "Fulfillment Center Attribute Value2",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "FulfillmentCenterAttributeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterAttribute"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FulfillmentCenterDTO": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Fulfillment Center Status",
                        "example": true
                    },
                    "addressId": {
                        "type": "string",
                        "description": "Fulfillment Center Address ID",
                        "example": "1"
                    },
                    "contactId": {
                        "type": "string",
                        "description": "Fulfillment Center Contact Email ID",
                        "example": "1"
                    },
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Center Description",
                        "example": "Ruby online store fulfillment center"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Center ID",
                        "example": "R00B2C"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Center Name",
                        "example": "Ruby"
                    },
                    "typeId": {
                        "type": "string",
                        "description": "Fulfillment Center Type ID",
                        "example": "1"
                    }
                }
            },
            "FulfillmentCenterDTONoId": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Fulfillment Center Status",
                        "example": true
                    },
                    "addressId": {
                        "type": "string",
                        "description": "Fulfillment Center Address ID",
                        "example": "1"
                    },
                    "contactId": {
                        "type": "string",
                        "description": "Fulfillment Center Contact Email ID",
                        "example": "1"
                    },
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Center Description",
                        "example": "Ruby online store fulfillment center"
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "Fulfillment Center Last Updated Timestamp",
                        "format": "date-time"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markDeleted": {
                        "type": "boolean",
                        "description": "Fulfillment Mode Deleted",
                        "example": false
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Center Name",
                        "example": "Ruby"
                    },
                    "typeId": {
                        "type": "string",
                        "description": "Fulfillment Center Type ID",
                        "example": "1"
                    }
                }
            },
            "FulfillmentCenterInventoryAdminBean": {
                "type": "object",
                "properties": {
                    "assignedQuantity": {
                        "type": "number",
                        "description": "Total on assigned quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeBean"
                        }
                    },
                    "availableQuantity": {
                        "type": "number",
                        "description": "Total available quantity of the item",
                        "format": "double",
                        "example": 100.0
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "APLZ20"
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "inventorySystem": {
                        "type": "integer",
                        "description": "INVENTORYSYSTEM",
                        "format": "int32",
                        "example": 0
                    },
                    "lastUpdated": {
                        "type": "string",
                        "description": "Last updated time stamp",
                        "format": "date-time"
                    },
                    "maxBoOffset": {
                        "type": "integer",
                        "description": "MAXBOOFFSET",
                        "format": "int32",
                        "example": 7776000
                    },
                    "maxThreshold": {
                        "type": "number",
                        "description": "Maximum threshold of the item",
                        "format": "double",
                        "example": 100
                    },
                    "minThreshold": {
                        "type": "number",
                        "description": "Minimum threshold of the item",
                        "format": "double",
                        "example": 25
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment center name.",
                        "example": "Alton Towers Plaza"
                    },
                    "onHandQuantity": {
                        "type": "number",
                        "description": "Total on hand quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "status": {
                        "type": "boolean",
                        "description": "Fulfillment center status.",
                        "example": true
                    },
                    "trackInventory": {
                        "type": "string",
                        "description": "TRACKINVENTORY",
                        "example": "Y"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of fulfillment center.",
                        "example": "physical"
                    },
                    "unassignedQuantity": {
                        "type": "number",
                        "description": "Total on unassigned quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "unavailableQuantity": {
                        "type": "number",
                        "description": "Total on unavailable quantity",
                        "format": "double",
                        "example": 100.0
                    }
                }
            },
            "FulfillmentCenterItemInventoryBean": {
                "type": "object",
                "properties": {
                    "partNumber": {
                        "type": "string",
                        "description": "PartNumber of the item",
                        "example": "LR-FNTR-CO-0001-0001"
                    },
                    "quantity": {
                        "type": "string",
                        "description": "Quantity of the item",
                        "example": "5.0"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the item",
                        "example": "available"
                    },
                    "sumOfExpectedQuantity": {
                        "type": "string",
                        "description": "Sum of the total expected quantity for this inventory record.",
                        "example": "96.0"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                },
                "description": "items"
            },
            "FulfillmentCenterModeRel": {
                "type": "object",
                "properties": {
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment Center ID",
                        "example": "R00B2C"
                    },
                    "fulfillmentModeId": {
                        "type": "string",
                        "description": "Fulfillment Mode ID",
                        "example": "1"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Center & Fulfillment Mode Relationship ID",
                        "example": "1"
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    }
                }
            },
            "FulfillmentCenterModeRelDTO": {
                "type": "object",
                "properties": {
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment Center ID",
                        "example": "R00B2C"
                    },
                    "fulfillmentModeId": {
                        "type": "string",
                        "description": "Fulfillment Mode ID",
                        "example": "1"
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    }
                }
            },
            "FulfillmentCenterModeRelResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterModeRel"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FulfillmentCenterResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenter"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FulfillmentCenterType": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Center Type Description",
                        "example": "Online Store fulfillment Center Type"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Center Type ID",
                        "example": "1"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Center Type Display Name",
                        "example": "Online Store"
                    }
                }
            },
            "FulfillmentCenterTypeDTO": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Center Type Description",
                        "example": "Online Store fulfillment Center Type"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Center Type Display Name",
                        "example": "Online Store"
                    }
                }
            },
            "FulfillmentCenterTypeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterType"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "FulfillmentMethod": {
                "type": "object",
                "properties": {
                    "lagTimeOffset": {
                        "type": "integer",
                        "description": "The Lag Time offset in seconds.",
                        "format": "int32",
                        "example": 0
                    },
                    "name": {
                        "type": "string",
                        "description": "The fulfillment method name.",
                        "example": "pickup"
                    }
                },
                "description": "Object containing the different fulfillment methods."
            },
            "FulfillmentMode": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Mode Description",
                        "example": "Store Pickup Fulfillment Mode."
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment Mode ID",
                        "example": "1"
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "markForDelete": {
                        "type": "string",
                        "description": "MARKFORDELETE",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Mode Display Name",
                        "example": "Store Pickup"
                    }
                }
            },
            "FulfillmentModeDTO": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Fulfillment Mode Description",
                        "example": "Store Pickup Fulfillment Mode."
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment Mode Display Name",
                        "example": "Store Pickup"
                    }
                }
            },
            "FulfillmentModeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentMode"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "Href": {
                "type": "object",
                "properties": {
                    "href": {
                        "type": "string",
                        "description": "URL of the link"
                    }
                },
                "description": "Link to the current resource."
            },
            "InventoryActionBean_AvailableInventoryAllocateView": {
                "type": "object",
                "properties": {
                    "inventories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryBean_AvailableInventoryAllocateView"
                        }
                    }
                }
            },
            "InventoryActionBean_Basic": {
                "type": "object",
                "properties": {
                    "inventories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryBean_Basic"
                        }
                    }
                }
            },
            "InventoryActionBean_Deallocation": {
                "type": "object",
                "properties": {
                    "inventories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryBean_Deallocation"
                        }
                    }
                }
            },
            "InventoryActionResponse_Allocation": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryResponseBean_Allocation"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "processAllOrNone": {
                        "type": "boolean",
                        "example": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/<request-url>?<query-string>"
                    }
                }
            },
            "InventoryActionResponse_AvailableInventoryAllocateView": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryResponseBean_AvailableInventoryAllocateView"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "processAllOrNone": {
                        "type": "boolean",
                        "example": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/<request-url>?<query-string>"
                    }
                }
            },
            "InventoryActionResponse_Basic": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryResponseBean_Basic"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "processAllOrNone": {
                        "type": "boolean",
                        "example": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/<request-url>?<query-string>"
                    }
                }
            },
            "InventoryActionResponse_Deallocation": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryResponseBean_Deallocation"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "processAllOrNone": {
                        "type": "boolean",
                        "example": true
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/<request-url>?<query-string>"
                    }
                }
            },
            "InventoryAttributeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AvailableInventoryAttributes"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "InventoryAvailabilityAdminBean": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeBean"
                        }
                    },
                    "estoresCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "fulfillmentCenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterInventoryAdminBean"
                        }
                    },
                    "fulfillmentCentersAboveThresholdCount": {
                        "type": "integer",
                        "description": "Fulfillment centers above threshold count",
                        "format": "int32",
                        "example": 100
                    },
                    "fulfillmentCentersBelowThresholdCount": {
                        "type": "integer",
                        "description": "Fulfillment centers below threshold count",
                        "format": "int32",
                        "example": 100
                    },
                    "fulfillmentCentersCount": {
                        "type": "integer",
                        "description": "Fulfillment centers count",
                        "format": "int32",
                        "example": 1
                    },
                    "fulfillmentCentersOutOfStockCount": {
                        "type": "integer",
                        "description": "Fulfillment centers out of stock count",
                        "format": "int32",
                        "example": 100
                    },
                    "numberOfRecords": {
                        "type": "integer",
                        "description": "Total number of records",
                        "format": "int32",
                        "example": 1
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "productInfo": {
                        "type": "string",
                        "description": "Product information",
                        "example": "Style Home InOffice Double Sofa"
                    },
                    "qtyAllocBackordered": {
                        "type": "number",
                        "description": "QTYALLOCBACKORDERED",
                        "format": "double",
                        "example": 10.0
                    },
                    "qtyBackordered": {
                        "type": "number",
                        "description": "QTYBACKORDERED",
                        "format": "double",
                        "example": 10.0
                    },
                    "qtyInProcess": {
                        "type": "number",
                        "description": "QTYINPROCESS",
                        "format": "double",
                        "example": 10.0
                    },
                    "qtyReserved": {
                        "type": "number",
                        "description": "QTYRESERVED",
                        "format": "double",
                        "example": 10.0
                    },
                    "stores": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EStoreInventoryAdminBean"
                        }
                    },
                    "totalAssignedQuantity": {
                        "type": "number",
                        "description": "Total on assigned quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "totalAvailableQuantity": {
                        "type": "string",
                        "description": "Total available quantity of the item",
                        "example": "96.0"
                    },
                    "totalOnHandQuantity": {
                        "type": "number",
                        "description": "Total on hand quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "totalUnassignedQuantity": {
                        "type": "number",
                        "description": "Total on unassigned quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "totalUnavailableQuantity": {
                        "type": "number",
                        "description": "Total on unavailable quantity",
                        "format": "double",
                        "example": 100.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of item",
                        "example": "C62"
                    }
                }
            },
            "InventoryAvailabilityShopperBean": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeBean"
                        }
                    },
                    "fulfillmentCenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryShopperBean"
                        }
                    },
                    "fulfillmentCentersCount": {
                        "type": "integer",
                        "description": "Fulfillment centers count",
                        "format": "int32",
                        "example": 1
                    },
                    "numberOfRecords": {
                        "type": "integer",
                        "description": "Total number of records",
                        "format": "int32",
                        "example": 1
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "productInfo": {
                        "type": "string",
                        "description": "Product information",
                        "example": "Style Home InOffice Double Sofa"
                    },
                    "totalAvailableQuantity": {
                        "type": "string",
                        "description": "Total available quantity of the item",
                        "example": "96.0"
                    },
                    "totalExpectedQuantity": {
                        "type": "string",
                        "description": "Total expected quantity of the item",
                        "example": "96.0"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of item",
                        "example": "C62"
                    }
                },
                "description": "Details about item inventory availability"
            },
            "InventoryBean_AvailableInventoryAllocateView": {
                "required": [
                    "requestedQuantity"
                ],
                "type": "object",
                "properties": {
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 15.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryBean_Basic": {
                "required": [
                    "requestedQuantity"
                ],
                "type": "object",
                "properties": {
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 15.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryBean_Deallocation": {
                "required": [
                    "requestedQuantity"
                ],
                "type": "object",
                "properties": {
                    "allocatedQuantityBackordered": {
                        "type": "number",
                        "description": "Allocated Backorderd Quantity of the item",
                        "format": "double",
                        "example": 10.0
                    },
                    "allocatedQuantityOnHand": {
                        "type": "number",
                        "description": "Allocated On Hand Quantity of the item from ",
                        "format": "double",
                        "example": 5.0
                    },
                    "allocationDetails": {
                        "type": "array",
                        "description": "BackOrdered Allocation Details",
                        "items": {
                            "$ref": "#/components/schemas/AllocationDetailBean_Deallocation"
                        }
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 15.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryCheckActionBean": {
                "type": "object",
                "properties": {
                    "inventories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryCheckBean"
                        }
                    }
                }
            },
            "InventoryCheckBean": {
                "required": [
                    "requestedQuantity"
                ],
                "type": "object",
                "properties": {
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 15.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryDetail": {
                "type": "object",
                "properties": {
                    "expectedDate": {
                        "type": "string",
                        "description": "EXPECTEDDATE",
                        "example": "2024-07-05 23:02:38.421"
                    },
                    "inventoryId": {
                        "type": "string",
                        "description": "INVENTORY_ID",
                        "example": "1"
                    },
                    "qtyOrdered": {
                        "type": "string",
                        "description": "QTYORDERED",
                        "example": "10"
                    }
                },
                "description": "List of recurring inventory details"
            },
            "InventoryResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryAvailabilityShopperBean"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/item-inventories?store=Ruby"
                    }
                },
                "description": "Details about item inventories"
            },
            "InventoryResponseBean_Allocation": {
                "type": "object",
                "properties": {
                    "actionStatus": {
                        "type": "string",
                        "description": "The status of the action applied to update the inventory",
                        "example": "success"
                    },
                    "allocatedQuantityBackordered": {
                        "type": "number",
                        "description": "Allocated Backorderd Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "allocatedQuantityOnHand": {
                        "type": "number",
                        "description": "Allocated On Hand Quantity of the item from ",
                        "format": "double",
                        "example": 5.0
                    },
                    "allocationDetails": {
                        "type": "array",
                        "description": "BackOrdered Allocation Details",
                        "items": {
                            "$ref": "#/components/schemas/AllocationDetailBean_Allocation"
                        }
                    },
                    "expectedShipDate": {
                        "type": "string",
                        "description": "Expected Ship Date",
                        "format": "date-time"
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryResponseBean_AvailableInventoryAllocateView": {
                "type": "object",
                "properties": {
                    "actionStatus": {
                        "type": "string",
                        "description": "The status of the action applied to update the inventory",
                        "example": "success"
                    },
                    "allocatedQuantityOnHand": {
                        "type": "number",
                        "description": "Allocated On Hand Quantity of the item from ",
                        "format": "double",
                        "example": 5.0
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryResponseBean_Basic": {
                "type": "object",
                "properties": {
                    "actionStatus": {
                        "type": "string",
                        "description": "The status of the action applied to update the inventory",
                        "example": "success"
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryResponseBean_Deallocation": {
                "type": "object",
                "properties": {
                    "actionStatus": {
                        "type": "string",
                        "description": "The status of the action applied to update the inventory",
                        "example": "success"
                    },
                    "allocatedQuantityBackordered": {
                        "type": "number",
                        "description": "Allocated Backorderd Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "allocatedQuantityOnHand": {
                        "type": "number",
                        "description": "Allocated On Hand Quantity of the item from ",
                        "format": "double",
                        "example": 5.0
                    },
                    "allocationDetails": {
                        "type": "array",
                        "description": "BackOrdered Allocation Details",
                        "items": {
                            "$ref": "#/components/schemas/AllocationDetailBean_Deallocation"
                        }
                    },
                    "fulfillmentCenterId": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "Partnumber of the item",
                        "example": "LR-FNTR-CO-0002-0002"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                }
            },
            "InventoryShopperBean": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterAttribute"
                        }
                    },
                    "availableQuantity": {
                        "type": "string",
                        "description": "Total available quantity of the item",
                        "example": "96.0"
                    },
                    "availableToPromiseDateTime": {
                        "type": "string",
                        "description": "Available to promise Date and Time",
                        "format": "date-time"
                    },
                    "availableToPromiseQuantity": {
                        "type": "string",
                        "description": "Available to promise quantity for this inventory record.",
                        "example": "50.0"
                    },
                    "fulfillmentMethods": {
                        "type": "array",
                        "description": "Object containing the different fulfillment methods.",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentMethod"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "Fulfillment center identifier.",
                        "example": "MM2050"
                    },
                    "inventoryAttributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AttributeBean"
                        }
                    },
                    "inventoryStatus": {
                        "type": "string",
                        "description": "Inventory status of the item",
                        "example": "available"
                    },
                    "lagTimeOffset": {
                        "type": "integer",
                        "description": "The lag time offset in seconds.",
                        "format": "int32",
                        "example": 0
                    },
                    "name": {
                        "type": "string",
                        "description": "Fulfillment center name.",
                        "example": "Markville Mall"
                    },
                    "requestedQuantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "reserveTimeOffset": {
                        "type": "integer",
                        "description": "The reserve time offset in seconds.",
                        "format": "int32",
                        "example": 1683561600
                    },
                    "store": {
                        "type": "string",
                        "description": "Store name",
                        "example": "Ruby"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of fulfillment center.",
                        "example": "physical_store"
                    }
                },
                "description": "Details about item inventory availability"
            },
            "InventoryStatisticsBean": {
                "type": "object",
                "properties": {
                    "totalAboveThresholdInventory": {
                        "type": "string",
                        "description": "Total inventory above threshold",
                        "example": "100"
                    },
                    "totalAvailableInventory": {
                        "type": "string",
                        "description": "Total available inventory",
                        "example": "100"
                    },
                    "totalBelowThresholdInventory": {
                        "type": "string",
                        "description": "Total inventory below threshold",
                        "example": "100"
                    },
                    "totalOutOfStockInventory": {
                        "type": "string",
                        "description": "Total out of stock inventory",
                        "example": "100"
                    }
                }
            },
            "InventoryStatisticsResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "$ref": "#/components/schemas/InventoryStatisticsBean"
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/inventory-statistics"
                    }
                }
            },
            "InventoryStatusRequestBody": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "STATUS_DESC",
                        "example": "Status Description - Available"
                    },
                    "id": {
                        "type": "string",
                        "description": "STATUS_ID",
                        "example": "available"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "STATUS_NAME",
                        "example": "Available"
                    }
                }
            },
            "InventoryStatusResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InventoryStatusRequestBody"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "Item": {
                "type": "object",
                "properties": {
                    "backorderLimit": {
                        "type": "string",
                        "description": "BACKORDERLIMIT",
                        "example": "25"
                    },
                    "description": {
                        "type": "string",
                        "description": "PRODUCT_DESC",
                        "example": "Twin Bunk Bed"
                    },
                    "hasExpectedInventory": {
                        "type": "boolean",
                        "description": "HASEXPECTEDINVENTORY",
                        "example": false
                    },
                    "id": {
                        "type": "string",
                        "description": "PARTNUMBER",
                        "example": "BD-BEDS-0001-0001"
                    },
                    "inventorySystem": {
                        "type": "integer",
                        "description": "INVENTORYSYSTEM",
                        "format": "int32",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "maxBoOffset": {
                        "type": "string",
                        "description": "MAXBOOFFSET",
                        "example": "7776000"
                    },
                    "maxThreshold": {
                        "type": "string",
                        "description": "MAX_THRESHOLD",
                        "example": "100.0"
                    },
                    "minThreshold": {
                        "type": "string",
                        "description": "MIN_THRESHOLD",
                        "example": "25.0"
                    },
                    "reserveTimeOffset": {
                        "type": "integer",
                        "description": "RESERVETIMEOFFSET",
                        "format": "int32",
                        "example": 7776000
                    },
                    "trackInventory": {
                        "type": "string",
                        "description": "TRACKINVENTORY",
                        "example": "Y"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "QUANTITYMEASURE",
                        "example": "C62"
                    }
                }
            },
            "ItemAttribute": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for the attribute.",
                        "format": "int32",
                        "example": 1
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the attribute.",
                        "example": "attr1"
                    },
                    "partNumber": {
                        "type": "string",
                        "description": "The part number associated with the attribute.",
                        "example": "BD-BEDS-0001-0001"
                    },
                    "value1": {
                        "type": "string",
                        "description": "The first value associated with the attribute.",
                        "example": "value1"
                    },
                    "value2": {
                        "type": "string",
                        "description": "The second value associated with the attribute, stored as JSON.",
                        "example": "{\"key\":\"value\"}"
                    }
                }
            },
            "ItemAttributeResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemAttribute"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "ItemDTO": {
                "type": "object",
                "properties": {
                    "backorderLimit": {
                        "type": "string",
                        "description": "BACKORDERLIMIT",
                        "example": "25"
                    },
                    "description": {
                        "type": "string",
                        "description": "PRODUCT_DESC",
                        "example": "Twin Bunk Bed"
                    },
                    "inventorySystem": {
                        "type": "integer",
                        "description": "INVENTORYSYSTEM",
                        "format": "int32",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "maxBoOffset": {
                        "type": "string",
                        "description": "MAXBOOFFSET",
                        "example": "7776000"
                    },
                    "maxThreshold": {
                        "type": "string",
                        "description": "MAX_THRESHOLD",
                        "example": "100.0"
                    },
                    "minThreshold": {
                        "type": "string",
                        "description": "MIN_THRESHOLD",
                        "example": "25.0"
                    },
                    "reserveTimeOffset": {
                        "type": "integer",
                        "description": "RESERVETIMEOFFSET",
                        "format": "int32",
                        "example": 7776000
                    },
                    "trackInventory": {
                        "type": "string",
                        "description": "TRACKINVENTORY",
                        "example": "Y"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "QUANTITYMEASURE",
                        "example": "C62"
                    }
                }
            },
            "ItemMutableDTO": {
                "type": "object",
                "properties": {
                    "backorderLimit": {
                        "type": "string",
                        "description": "BACKORDERLIMIT",
                        "example": "25"
                    },
                    "description": {
                        "type": "string",
                        "description": "PRODUCT_DESC",
                        "example": "Twin Bunk Bed"
                    },
                    "id": {
                        "type": "string",
                        "description": "PARTNUMBER",
                        "example": "BD-BEDS-0001-0001"
                    },
                    "inventorySystem": {
                        "type": "integer",
                        "description": "INVENTORYSYSTEM",
                        "format": "int32",
                        "enum": [
                            0,
                            1
                        ]
                    },
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    },
                    "maxBoOffset": {
                        "type": "string",
                        "description": "MAXBOOFFSET",
                        "example": "7776000"
                    },
                    "maxThreshold": {
                        "type": "string",
                        "description": "MAX_THRESHOLD",
                        "example": "100.0"
                    },
                    "minThreshold": {
                        "type": "string",
                        "description": "MIN_THRESHOLD",
                        "example": "25.0"
                    },
                    "reserveTimeOffset": {
                        "type": "integer",
                        "description": "RESERVETIMEOFFSET",
                        "format": "int32",
                        "example": 7776000
                    },
                    "trackInventory": {
                        "type": "string",
                        "description": "TRACKINVENTORY",
                        "example": "Y"
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "QUANTITYMEASURE",
                        "example": "C62"
                    }
                }
            },
            "ItemResponseContainer": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Item"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "href": {
                        "type": "string",
                        "format": "uri"
                    },
                    "next": {
                        "type": "string",
                        "format": "uri"
                    },
                    "previous": {
                        "type": "string",
                        "format": "uri"
                    }
                }
            },
            "LagTimeOffsetUpdateDTO": {
                "type": "object",
                "properties": {
                    "lagTimeOffset": {
                        "type": "string",
                        "description": "Delivery method lag time offset.",
                        "example": "0"
                    },
                    "links": {
                        "$ref": "#/components/schemas/ResourceLinks"
                    }
                }
            },
            "LocateInventoryItemRequestModel": {
                "type": "object",
                "properties": {
                    "partNumber": {
                        "type": "string",
                        "description": "PartNumber of the item",
                        "example": "LR-FNTR-CO-0001-0001"
                    },
                    "quantity": {
                        "type": "number",
                        "description": "Quantity of the item",
                        "format": "double",
                        "example": 5.0
                    },
                    "unitOfMeasure": {
                        "type": "string",
                        "description": "Unit of measure of the item",
                        "example": "C62"
                    }
                },
                "description": "Details about an item inventory within a fulfillment center"
            },
            "LocateInventoryRequest": {
                "type": "object",
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocateInventoryItemRequestModel"
                        }
                    }
                },
                "description": "Details about item inventories within a fulfillment center"
            },
            "LocateInventoryResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LocateInventoryResponseBean"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/inventory-locations?store=Ruby&fulfillmentCenter=FFC001&partNumber=LR-FNTR-CO-0001-0001"
                    }
                },
                "description": "Details about item inventories within a fulfillment center"
            },
            "LocateInventoryResponseBean": {
                "type": "object",
                "properties": {
                    "fulfillmentCenter": {
                        "type": "string",
                        "description": "Fulfillment center code",
                        "example": "FFC001"
                    },
                    "items": {
                        "type": "array",
                        "description": "items",
                        "items": {
                            "$ref": "#/components/schemas/FulfillmentCenterItemInventoryBean"
                        }
                    }
                },
                "description": "Details about a fulfillment center's inventory"
            },
            "ReceiveAvailableInventoryDTO": {
                "required": [
                    "quantity"
                ],
                "type": "object",
                "properties": {
                    "quantity": {
                        "type": "number",
                        "description": "Received Quantity",
                        "format": "double",
                        "example": 10
                    }
                }
            },
            "ReceivedInventory": {
                "required": [
                    "quantity",
                    "receivedDate"
                ],
                "type": "object",
                "properties": {
                    "quantity": {
                        "type": "number",
                        "description": "Received Quantity",
                        "format": "double",
                        "example": 10
                    },
                    "receivedDate": {
                        "type": "string",
                        "description": "Received Date",
                        "format": "date-time"
                    }
                }
            },
            "RecurringIntervalResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "description": "List of recurring inventory details",
                        "items": {
                            "$ref": "#/components/schemas/InventoryDetail"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "description": "Total number of records",
                        "format": "int32",
                        "example": 1
                    },
                    "href": {
                        "type": "string",
                        "description": "API reference URL",
                        "example": "http://example.com/api/v1/resource"
                    }
                }
            },
            "RecurringInventoryInterval": {
                "type": "object",
                "properties": {
                    "endDateTime": {
                        "type": "string",
                        "description": "The end date and time for the recurring interval. Format: 'yyyy-MM-dd'T'HH:mm:ss.SSS'Z'. Must be in the future.",
                        "format": "date-time"
                    },
                    "inventoryId": {
                        "type": "integer",
                        "description": "The unique identifier for the inventory item.",
                        "format": "int64",
                        "example": 10
                    },
                    "qtyOrdered": {
                        "type": "number",
                        "description": "The quantity of items ordered in each recurrence. This can be zero for items that are not required in the current interval.",
                        "format": "double",
                        "example": 10.0
                    },
                    "recurringInterval": {
                        "type": "integer",
                        "description": "The recurring interval type: 1 for Weekly, 2 for Semi-monthly, and 3 for Monthly.",
                        "format": "int32",
                        "example": 1
                    },
                    "repeatsOn": {
                        "type": "string",
                        "description": "Days of the week for weekly recurrence (1 = Sunday, 2 = Monday, ..., 7 = Saturday) or specific dates, monthly recurrence (e.g., '1,15' for the 1st and 15th of each month). It is not applicable for semi-monthly",
                        "example": "1,4"
                    },
                    "startDateTime": {
                        "type": "string",
                        "description": "The start date and time for the recurring interval. Format: 'yyyy-MM-dd'T'HH:mm:ss.SSS'Z'. Must be in the future.",
                        "format": "date-time"
                    }
                }
            },
            "ResourceLinks": {
                "type": "object",
                "properties": {
                    "self": {
                        "$ref": "#/components/schemas/Href"
                    }
                },
                "description": "Links to related resources.",
                "readOnly": true
            },
            "SuggestionsStoreResponse": {
                "type": "object",
                "properties": {
                    "contents": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "example": 10
                    },
                    "resourceId": {
                        "type": "string",
                        "example": "<protocol>://<server>:<port>/inventory/api/v1/store-suggestions?searchTerm=Ruby"
                    }
                }
            }
        },
        "securitySchemes": {
            "BearerAuthentication": {
                "bearerFormat": "JWT",
                "scheme": "bearer",
                "type": "http"
            }
        }
    }
}
