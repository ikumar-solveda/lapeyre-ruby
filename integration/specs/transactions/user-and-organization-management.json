{
	"openapi": "3.0.1",
	"info": {
		"title": "User and Organization Management",
		"description": "Provide APIs related to user and organization management in a B2C and B2B store. Use these services to: <ul><li>Get person details</li><li>Add or update a member</li><li>Register a person as a member</li><li>Get member details</li><li>Get or update organization information</li><li>Add, update, delete, get by profile or get all quick checkout profiles</li><li>Search for approval records</li><li>Approve or reject pending approval records</li></ul>",
		"version": "9.1.15.0",
		"x-introduced": "9.1.0.0"
	},
	"servers": [
		{
			"url": "https://{hostname}:{port}/wcs/resources",
			"variables": {
				"port": {
					"default": "443",
					"enum": [
						"443",
						"5443"
					]
				},
				"hostname": {
					"default": "localhost",
					"enum": [
						"localhost",
						"test.hcl.com"
					]
				}
			}
		}
	],
	"externalDocs": {
		"description": "Some REST services require authentication. HCL Commerce REST services are authenticated on secure and unsecured channels. This authentication can include the use of the WCToken and WCTrustedToken. To use REST services that require authentication, you must first get authentication data by using a supported identity services.\n\nAfter you obtain the authentication data, you must pass either the WCToken or WCTustedToken parameters, or both, within the HTTP header for every request that requires authentication. If a request is sent over HTTP, pass the WCToken parameter in the HTTP header. Do not pass the WCTrustedToken in HTTP requests, as the parameter value might display. Send both the WCToken and the WCTrustedToken parameters when the request is being sent over HTTPS.\n\nThe HCL Commerce REST APIs can also use session cookies that are created by the HCL Commerce store runtime for authentication. These cookies allow you to mix requests to the HCL Commerce REST APIs and the HCL Commerce store runtime within the same user session.\n\n",
		"url": "https://help.hcltechsw.com/commerce/9.1.0/webservices/concepts/cwvrestauth.html?hl=rest%2Cauthentication"
	},
	"tags": [
		{
			"name": "Approval Status",
			"description": "Provides RESTful services to approve or reject registrations."
		},
		{
			"name": "Checkout Profile",
			"description": "Provides RESTful services to add, update, delete, get and get all the quick checkout profile."
		},
		{
			"name": "Contact",
			"description": "Provides RESTful services to create a new contact in a person's address book, get contacts and delete a contact."
		},
		{
			"name": "Member Group",
			"description": "Provides RESTful services to get member details. A member group is a grouping of members, users, organizations or other member groups used for various business purposes."
		},
		{
			"name": "Organization",
			"description": "Provides RESTful services to register an organization, to get or update organization information."
		},
		{
			"name": "Person",
			"description": "Provides RESTful services to get person details, register a member, and update a member.  This class also provides RESTful services used by an administrator to find person information, register new and update existing user information."
		},
		{
			"name": "User Activate",
			"description": "Provides RESTful services to activate a person's registration and resend the activation email. These services are used when 'Account activation via Email' feature is enabled."
		}
	],
	"paths": {
		"/store/{storeId}/organization": {
			"get": {
				"tags": [
					"Organization"
				],
				"summary": "This allows an administrator to find organizations based on query name. See each query for details on input and output.",
				"description": "This allows an administrator to find organizations based on query name. See each query for details on input and output.",
				"operationId": "Organization-findByQuery",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "profileName",
						"in": "query",
						"description": "Profile name. Profiles determine the subset of data returned by a query.",
						"schema": {
							"type": "string",
							"enum": [
								"IBM_Store_Summary",
								"IBM_Organization_List_Summary",
								"IBM_Organization_List_Short_Summary",
								"IBM_Organization_List_Details",
								"IBM_Roles_To_Assign_Details"
							]
						}
					},
					{
						"name": "q",
						"in": "query",
						"description": "The query name. <ul><li>organizationHierarchy: Retrieves the organization hierarchy.</li><li>organizationsICanAdmin: This allows an administrator to find organizations that he/she can administer.</li><li>rolesICanAssignInOrg: This allows an administrator to find roles that he/she can assign in organizations.</li></ul>",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"organizationHierarchy",
								"organizationsICanAdmin",
								"rolesICanAssignInOrg"
							]
						}
					},
					{
						"name": "accountId",
						"in": "query",
						"description": "The trading account ID.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orgId",
						"in": "query",
						"description": "The organization identifier.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orgName",
						"in": "query",
						"description": "The organization name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "parentOrgName",
						"in": "query",
						"description": "The parent organization name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startIndex",
						"in": "query",
						"description": "The starting index of the result.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maxResults",
						"in": "query",
						"description": "The maximum number of results to be returned.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"post": {
				"tags": [
					"Organization"
				],
				"summary": "Allows an administrator to register an organization.",
				"description": "Allows an administrator to register an organization.",
				"operationId": "Organization-registerOrganization",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityAddRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityAddRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								},
								"example": {
									"addressId": "15802",
									"orgEntityId": "7000000000000004402",
									"viewTaskName": "RedirectView"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource has been created.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/organization/{organizationId}": {
			"get": {
				"tags": [
					"Organization"
				],
				"summary": "Allows administrators to find organization information by organization identifier.",
				"description": "Allows administrators to find organization information by organization identifier.",
				"operationId": "Organization-findByOrganizationIdWParentAssignedRolesDetailsProfileName",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "organizationId",
						"in": "path",
						"description": "The organization identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "profileName",
						"in": "query",
						"description": "Profile name. Profiles determine the subset of data returned by a query. Default profile name = IBM_Organization_Summary.",
						"schema": {
							"type": "string",
							"enum": [
								"IBM_Organization_Short_Summary",
								"IBM_Organization_Summary",
								"IBM_Organization_Details",
								"IBM_Org_Entity_Details",
								"IBM_Assigned_Roles_Details",
								"IBM_Parent_Assigned_Roles_Details"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details"
								},
								"example": {
									"addressBook": [],
									"contactInfo": {
										"address1": "",
										"address2": "",
										"address3": "",
										"addressId": -2000,
										"addressType": "",
										"city": "",
										"country": "",
										"countryDisplayName": "",
										"email1": "",
										"email2": "",
										"firstName": "",
										"lastName": "",
										"middleName": "",
										"mobilePhone1": "",
										"nickName": "Default Organization",
										"organizationName": "",
										"phone1": "",
										"phone2": "",
										"state": "",
										"stateProvDisplayName": "",
										"zipCode": ""
									},
									"displayName": "Default Organization",
									"organizationDisplayName": "Default Organization (Root Organization)",
									"organizationId": -2000,
									"organizationName": "Default Organization",
									"state": "1",
									"status": 0
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"Organization"
				],
				"summary": "This allows an administrator to update information of an organization.",
				"description": "This allows an administrator to update information of an organization.",
				"operationId": "Organization-updateOrganization",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "organizationId",
						"in": "path",
						"description": "The organization identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityUpdateRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityUpdateRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								},
								"example": {
									"addressId": "12338",
									"orgEntityId": "7000000000000000919",
									"viewTaskName": "RedirectView"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"post": {
				"tags": [
					"Organization"
				],
				"summary": "Performs an action on an organization.",
				"description": "Performs an action on an organization. See each action for details on input and output. Actions include: updating an approval group, and assigning or unassigning one or more roles from an organization",
				"operationId": "Organization-updateApprovalGroups",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "organizationId",
						"in": "path",
						"description": "The organization identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The action of the rest service.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"updateApprovalGroups",
								"assignRole",
								"unassignRole"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroups"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroupsResponse"
								},
								"example": {
									"viewTaskName": "RedirectView"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroupsResponse"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroupsResponse"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroupsResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/ErrorMessageResponseContainer"
								}
							}
						}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/organization/@self/entitled_orgs": {
			"get": {
				"tags": [
					"Organization"
				],
				"summary": "Get user's entitled organizations.",
				"description": "Get user's entitled organizations.",
				"operationId": "Organization-getEntitledOrganizations",
				"parameters": [
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accountCheck",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "explicitEntitlement",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/organization/buyer": {
			"post": {
				"tags": [
					"Organization"
				],
				"summary": "Register a new Buyer Organization as well as the initial Buyer Administrator for the new organization.",
				"description": "Registers a new Buyer Organization as well as the initial Buyer Administrator for the new organization.",
				"operationId": "Organization-registerBuyerOrganization",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.BuyerRegistrationAddRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.BuyerRegistrationAddRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityBuyerIdentifier"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityBuyerIdentifier"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityBuyerIdentifier"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityBuyerIdentifier"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource has been created.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/member_group/{memberGroupId}": {
			"get": {
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary"
								},
								"example": [
									{
										"recordSetCount": 0,
										"recordSetCompleteIndicator": true,
										"recordSetStartNumber": 0,
										"resultList": [
											{
												"ownerId": "string",
												"description": "string",
												"name": "string",
												"memberGroupId": 0
											}
										],
										"recordSetTotal": 0
									}
								]
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid."
					},
					"403": {
						"description": "The user is not authorized to perform the specified request."
					},
					"404": {
						"description": "The specified resource could not be found."
					},
					"500": {
						"description": "Internal server error. For details, see the server log files."
					}
				},
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"description": "The store identifier.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "memberGroupId",
						"in": "path",
						"required": true,
						"description": "The member group ID.",
						"schema": {
							"type": "string"
						}
					}
				],
				"tags": [
					"Member Group"
				],
				"summary": "Finds a member group by its ID."
			}
		},
		"/store/{storeId}/member_group/member/{memberId}": {
			"get": {
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary"
								},
								"example": [
									{
										"recordSetCount": 0,
										"recordSetCompleteIndicator": true,
										"recordSetStartNumber": 0,
										"resultList": [
											{
												"ownerId": "string",
												"description": "string",
												"name": "string",
												"memberGroupId": 0
											}
										],
										"recordSetTotal": 0
									}
								]
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid."
					},
					"403": {
						"description": "The user is not authorized to perform the specified request."
					},
					"404": {
						"description": "The specified resource could not be found."
					},
					"500": {
						"description": "Internal server error. For details, see the server log files."
					}
				},
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"description": "The store identifier.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "memberId",
						"in": "path",
						"required": true,
						"description": "The memberID.",
						"schema": {
							"type": "string"
						}
					}
				],
				"tags": [
					"Member Group"
				],
				"summary": "Finds a member group current shopper explicitly belongs."
			}
		},
		"/store/{storeId}/member_group": {
			"get": {
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary"
								},
								"example": [
									{
										"resultList": {
											"memberGroupTypeId": "string",
											"properties": "string",
											"description": "string",
											"name": "string"
										}
									}
								]
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax."
					},
					"403": {
						"description": "The user is not authorized to perform the specified request."
					},
					"404": {
						"description": "The specified resource could not be found."
					},
					"500": {
						"description": "Internal server error. For details, see the server log files."
					}
				},
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"description": "The store identifier.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "query",
						"description": "The user ID.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "exclude",
						"in": "query",
						"description": "Indicates whether it is excluded group or now",
						"schema": {
							"type": "string",
							"enum": [
								"0",
								"1"
							]
						}
					},
					{
						"name": "typeName",
						"in": "query",
						"description": "Approval member groups types will be filtered.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"name": "propertiesFilter",
						"in": "query",
						"description": "Properties value based on which approval member groups will be filtered.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "q",
						"in": "query",
						"required": true,
						"description": "The query name.",
						"schema": {
							"type": "string",
							"enum": [
								"approvalMemberGroupTypes",
								"explicitlyIncludedOrExcluded",
								"manageable"
							]
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"required": false,
						"description": "Order by.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageNumber",
						"in": "query",
						"required": false,
						"description": " Page number, starting at 1. Valid values include positive integers of 1 and above. The pageSize must be specified for paging to work.",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"required": false,
						"description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The pageNumber must be specified for paging to work",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					}
				],
				"tags": [
					"Member Group"
				],
				"summary": "Finds approval member groups types for an organization based on properties filter."
			}
		},
		"/store/{storeId}/person/updateMemberPassword": {
			"post": {
				"tags": [
					"Person"
				],
				"summary": "Reset password (by administrator)",
				"description": "Allows a CSR or CSS to reset the password for a registered user. It also allows resetting password when the CSR / CSS has established a session to act on behalf of a user.",
				"operationId": "Person-resetPasswordByAdmin",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "mode",
						"in": "query",
						"description": "The mode in which resetPassword is run. ResetPassword can be executed in an administrator session or in an on-behalf session for a user. Default value is 'resetPasswordAdmin' if no valid value was supplied.",
						"schema": {
							"type": "string",
							"enum": [
								"resetPasswordAdmin",
								"resetPasswordOnBehalf"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.ResetPasswordAdministratorRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.ResetPasswordAdministratorRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.security.commands.ResetPasswordAdministratorCmd"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.security.commands.ResetPasswordAdministratorCmd"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.security.commands.ResetPasswordAdministratorCmd"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.security.commands.ResetPasswordAdministratorCmd"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self/contact": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Get contact from address book",
				"description": "Gets the contacts in a person's address book. If the addressType optional query parameter is passed in, the returned contacts are filtered by addressType.",
				"operationId": "Contact-getAllPersonContact",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressType",
						"in": "query",
						"description": "The addressType to filter contacts by. All contacts will be returned if a valid value is not supplied for this parameter.",
						"schema": {
							"type": "string",
							"enum": [
								"Shipping",
								"Billing",
								"ShippingAndBilling"
							]
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-contact"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-contact"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-contact"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-contact"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"post": {
				"tags": [
					"Contact"
				],
				"summary": "Create contact in address book",
				"description": "Creates a new contact in a person's address book.",
				"operationId": "Contact-addPersonContact",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/person-singleContact"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/person-singleContact"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "No response was specified.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource has been created.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self/contextattributes/{attributeName}/{value}": {
			"delete": {
				"tags": [
					"Person"
				],
				"summary": "Delete context attribute values",
				"description": "Deletes one or more values of a context attribute for a registered user by removing associated entry in the MBRATTRVAL table.",
				"operationId": "Person-deleteContextAttributeForPerson",
				"parameters": [
					{
						"name": "attributeName",
						"in": "path",
						"description": "Name of the context attribute as listed in MBRATTR.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "value",
						"in": "path",
						"description": "Value of the context attribute you want to delete as listed in MBRATTRVAL.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.DeleteContextAttribute"
								},
								"example": {
									"addressId": [
										"12344"
									],
									"userId": [
										"4054"
									]
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.DeleteContextAttribute"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.DeleteContextAttribute"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.DeleteContextAttribute"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person": {
			"get": {
				"tags": [
					"Person"
				],
				"summary": "Get user by query",
				"description": "Allows administrators to find users based on a query name. See each query for details on input and output.",
				"operationId": "Person-findByQuery",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "profileName",
						"in": "query",
						"description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_User_List_Summary.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"IBM_User_List_Summary",
								"IBM_User_List_Details",
								"HCL_User_List_For_Admin"
							]
						}
					},
					{
						"name": "q",
						"in": "query",
						"description": "The query name.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"usersICanAdmin",
								"registeredUsersICanManage"
							]
						}
					},
					{
						"name": "orderByFieldName",
						"in": "query",
						"description": "The order by field name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "roleId",
						"in": "query",
						"description": "The role ID.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accountStatus",
						"in": "query",
						"description": "The account status.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderByTableName",
						"in": "query",
						"description": "The order by table name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "logonId",
						"in": "query",
						"description": "Logon Id of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "logonIdSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "parentOrgId",
						"in": "query",
						"description": "The parent organization ID.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "parentOrgName",
						"in": "query",
						"description": "Parent organization name to search buyers. Only used in B2B store.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "parentOrgNameSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "firstName",
						"in": "query",
						"description": "First name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "firstNameSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "lastName",
						"in": "query",
						"description": "Last name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "lastNameSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "middleName",
						"in": "query",
						"description": "Last name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "middleNameSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "address1",
						"in": "query",
						"description": "Address line 1 of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "address1SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "city",
						"in": "query",
						"description": "The city name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "citySearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "country",
						"in": "query",
						"description": "The country or region name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "countrySearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "email1",
						"in": "query",
						"description": "The primary e-mail address of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email1SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "email2",
						"in": "query",
						"description": "The secondary e-mail address of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "email2SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "fax1",
						"in": "query",
						"description": "The primary fax number of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fax1SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "fax2",
						"in": "query",
						"description": "The secondary fax number of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "fax2SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "field1",
						"in": "query",
						"description": "Customizable field1 to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "field1SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "field2",
						"in": "query",
						"description": "Customizable field2 to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "field2SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "phone1",
						"in": "query",
						"description": "The primary phone number of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone1SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "phone2",
						"in": "query",
						"description": "The secondary phone number of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "phone2SearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "state",
						"in": "query",
						"description": "The state or province name of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "stateSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "zipcode",
						"in": "query",
						"description": "ZIP or postal code of the customer to search for.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "zipcodeSearchType",
						"in": "query",
						"description": "The search type. The valid values are 1 (case sensitive and starts with), 2(case sensitive and contains), 3(case insensitive and starts with),4(case insensitive and contains), 5(case sensitive and exact match), 6(case insensitive and exact match),8(not equals)",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"1",
								"2",
								"3",
								"4",
								"5",
								"6",
								"8"
							]
						}
					},
					{
						"name": "startIndex",
						"in": "query",
						"description": "The starting index of the result.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maxResults",
						"in": "query",
						"description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details"
								},
								"example": {
									"pageNumber": 1,
									"pageSize": "3",
									"recordSetCompleteIndicator": false,
									"recordSetCount": 3,
									"recordSetTotal": 25,
									"userDataBeans": [
										{
											"businessProfile": {
												"organizationId": "7000000000000000904"
											},
											"displayName": "admin5020",
											"logonId": "admin5020",
											"memberId": "4037",
											"preferredCurrency": "USD",
											"preferredLanguageId": "",
											"state": "0",
											"userId": "4037"
										},
										{
											"businessProfile": {
												"organizationId": "7000000000000000905"
											},
											"displayName": "admin5021",
											"logonId": "admin5021",
											"memberId": "4038",
											"preferredCurrency": "USD",
											"preferredLanguageId": "",
											"state": "0",
											"userId": "4038"
										},
										{
											"businessProfile": {
												"organizationId": "7000000000000000914"
											},
											"displayName": "admin50210",
											"logonId": "admin50210",
											"memberId": "4047",
											"preferredCurrency": "USD",
											"preferredLanguageId": "",
											"state": "0",
											"userId": "4047"
										}
									]
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"post": {
				"tags": [
					"Person"
				],
				"summary": "Register user",
				"description": "Registers a user. When the mode is set to admin, the registration is done by an administrator.",
				"operationId": "Person-registerPersonOnUserRegistrationAdminAdd",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "updateCookies",
						"in": "query",
						"description": "Set to true to generate session cookies.",
						"schema": {
							"type": "string",
							"default": "false"
						}
					},
					{
						"name": "rememberMe",
						"in": "query",
						"description": "Set to true to remember the user when persistent session is enabled.",
						"schema": {
							"type": "string",
							"default": "false"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "mode",
						"in": "query",
						"description": "The mode of the rest service.",
						"schema": {
							"type": "string",
							"enum": [
								"self",
								"admin"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddResponse"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddResponse"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource has been created.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self/contact/byAddressId/{addressId}": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Get contact by address ID",
				"description": "Gets a person contact by address ID.",
				"operationId": "Contact-findPersonContactById",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "addressId",
						"in": "path",
						"description": "The address identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/{userId}": {
			"get": {
				"tags": [
					"Person"
				],
				"summary": "Get user information by identifier",
				"description": "Allows administrators to find user information by user identifier.",
				"operationId": "Person-findByUserIdWRolesOfUserInOrgsICanAdminProfileName",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "The user identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "profileName",
						"in": "query",
						"description": "Profile name. Profiles determine the subset of data returned by a query. The default profile name is IBM_User_Display_Details.",
						"schema": {
							"type": "string",
							"enum": [
								"IBM_User_Display_Details",
								"IBM_User_Registration_Details",
								"IBM_User_Top_Level_Org_Administered",
								"IBM_Assigned_Roles_Details",
								"IBM_Roles_Of_User_All",
								"IBM_Roles_Of_User_In_Orgs_I_Can_Admin"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorsToFindUserInformationByUserIdentifier"
								},
								"example": {
									"address": {
										"addressId": -1000,
										"lastName": "wcsadmin",
										"memberId": -1000,
										"nickName": "wcsadmin"
									},
									"demographics": {
										"age": "",
										"dateOfBirth": ""
									},
									"logonId": "wcsadmin",
									"organizationId": -2001,
									"organizationName": "",
									"parentMemberId": -2001,
									"personTitle": "",
									"preferredCurrency": "",
									"preferredLanguage": "",
									"registerType": "S",
									"userId": -1000,
									"userProfile": {
										"description": "Internal use only.",
										"receiveSMSNotification": "0"
									}
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorsToFindUserInformationByUserIdentifier"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorsToFindUserInformationByUserIdentifier"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorsToFindUserInformationByUserIdentifier"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"put": {
				"tags": [
					"Person"
				],
				"summary": "Update account data",
				"description": "Allows administrators to update account data for a registered user.",
				"operationId": "Person-updatePersonByAdmin",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "The user identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminUpdateRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminUpdateRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								},
								"example": {
									"userId": "4053",
									"viewTaskName": "RedirectView",
									"addressId": "15805"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"post": {
				"tags": [
					"Person"
				],
				"summary": "Performs an action on a user by an administrator. See each action for details on input and output.",
				"description": "Performs an action on a user by an administrator. See each action for details on input and output.",
				"operationId": "Person-performActionByAdmin",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "The user identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The action of the rest service. The assignRole action allows an administrator to assign role(s) to a registered user, while unassignRole allos an administrator to unassign role(s) from a registered user.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"assignRole",
								"unassignRole"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.MemberRoleAssignmentRequest"
							},
							"examples": {
								"assignRoles": {
									"value": {
										"orgEntityId1": "70000000203",
										"roleId1": "-22"
									}
								}
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.MemberRoleAssignmentRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.PerformActionByAdministrator"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.PerformActionByAdministrator"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.PerformActionByAdministrator"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.PerformActionByAdministrator"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"delete": {
				"tags": [
					"Person"
				],
				"summary": "Delete user (by administrator)",
				"description": "Allows administrators to delete user",
				"operationId": "Person-deletePersonByAdmin",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "The user identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUserDelete"
								},
								"example": {
									"userId": "4053"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUserDelete"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUserDelete"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUserDelete"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/@self/checkoutProfile": {
			"get": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Get check out profiles",
				"description": "Gets the Check Out Profiles for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-getCheckoutProfile",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-checkoutProfile"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-checkoutProfile"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"put": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Update check out profile",
				"description": "This is a deprecated service and only useful for a single checkout profile. It updates and creates the CheckOutProfile (default) for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-updateCheckoutProfile",
				"deprecated": true,
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Update checkout profile body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/person-checkoutProfile-update"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.UserIdContainer"
								},
								"example": {
									"userId": "11051"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.UserIdContainer"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.UserIdContainer"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.UserIdContainer"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"post": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Create a check out profile",
				"description": "Creates Check Out Profile for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-createCheckoutProfile",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "The body data required for the REST method.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/person-checkoutProfile-updateById"
							}
						}
					},
					"required": false
				},
				"responses": {
					"201": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.CheckoutProfileIdContainer"
								},
								"example": {
									"checkoutProfileId": "34606873909"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.CheckoutProfileIdContainer"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/checkoutProfile/{checkoutProfileId}": {
			"put": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Update a check out profile",
				"description": "Updates the CheckOutProfile for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-updateCheckoutProfileById",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "checkoutProfileId",
						"in": "path",
						"description": "The checkout profile identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Update checkout profile body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/person-checkoutProfile-updateById"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.CheckoutProfileIdContainer"
								},
								"example": {
									"checkoutProfileId": "26965157"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.CheckoutProfileIdContainer"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"get": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Get a check out profile",
				"description": "Gets a Check Out Profile for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-getByIdCheckoutProfile",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "checkoutProfileId",
						"in": "path",
						"description": "The checkout profile identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-checkoutProfile"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"delete": {
				"tags": [
					"Checkout Profile"
				],
				"summary": "Delete a check out profile",
				"description": "Deletes a Check Out Profile for the logged in user using the Member service. The shopper must log in before invoking this method.",
				"operationId": "CheckoutProfile-deleteCheckoutProfile",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "checkoutProfileId",
						"in": "path",
						"description": "The checkout profile identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "The requested completed successfully.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/updateMemberUser/{userId}": {
			"post": {
				"tags": [
					"Person"
				],
				"summary": "Update member group assignment",
				"description": "Updates the user to include, exclude, or unassign the user from a member group.",
				"operationId": "Person-updateMemberUser",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "userId",
						"in": "path",
						"description": "The user identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUser"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUserResponse"
								},
								"example": {}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUserResponse"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUserResponse"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self": {
			"get": {
				"tags": [
					"Person"
				],
				"summary": "Get account data",
				"description": "Gets the account data for a registered user.",
				"operationId": "Person-findPersonBySelf",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-person"
								},
								"example": {
									"accountStatus": "Enabled",
									"addressId": "15309",
									"addressLine": [
										"123 Main St",
										"",
										""
									],
									"addressType": "ShippingAndBilling",
									"challengeQuestion": "-",
									"city": "Toronto",
									"contact": [
										{
											"addressId": "15308",
											"addressLine": [
												"123 Main St",
												"",
												""
											],
											"addressType": "ShippingAndBilling",
											"city": "Toronto",
											"country": "CA",
											"email1": "jane@example.com",
											"firstName": "Jane",
											"lastName": "Smith",
											"nickName": "jane",
											"phone1": "4161234567",
											"primary": "false",
											"state": "ON",
											"zipCode": "M1M1M1"
										},
										{
											"addressId": "15810",
											"addressLine": [
												"123 Main St",
												"",
												""
											],
											"addressType": "Billing",
											"city": "Toronto",
											"country": "CA",
											"email1": "john@example.com",
											"firstName": "John",
											"lastName": "Smith",
											"nickName": "Default_Billing_10001",
											"primary": "false",
											"state": "ON",
											"zipCode": "M1M1M1"
										},
										{
											"addressId": "15811",
											"addressLine": [
												"123 Main St",
												"",
												""
											],
											"addressType": "Shipping",
											"city": "Toronto",
											"country": "CA",
											"email1": "john@example.com",
											"firstName": "John",
											"lastName": "Smith",
											"nickName": "Default_Shipping_10001",
											"primary": "false",
											"state": "ON",
											"zipCode": "M1M1M1"
										}
									],
									"country": "CA",
									"distinguishedName": "uid=john,o=default organization,o=root organization",
									"email1": "john@example.com",
									"firstName": "John",
									"gender": "Unspecified",
									"lastName": "Smith",
									"lastUpdate": "2014-11-20T14:32:21.459Z",
									"logonId": "john",
									"nickName": "john",
									"organizationDistinguishedName": "o=default organization,o=root organization",
									"orgizationId": -2000,
									"passwordExpired": "false",
									"preferredCurrency": "USD",
									"preferredLanguage": "en_US",
									"primary": "true",
									"profileType": "C",
									"receiveEmailPreference": [
										{
											"storeID": "10001",
											"value": "false"
										}
									],
									"receiveSMSPreference": [
										{
											"storeID": "10001",
											"value": "false"
										}
									],
									"registrationApprovalStatus": "Approved",
									"registrationDateTime": "2014-11-20T14:32:21.469Z",
									"registrationStatus": "RegisteredPerson",
									"resourceId": "https://localhost:443/wcs/resources/store/10001/person/@self?responseFormat=json",
									"resourceName": "person",
									"state": "ON",
									"userId": "11051",
									"zipCode": "M1M1M1"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-person"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-person"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-person"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"put": {
				"tags": [
					"Person"
				],
				"summary": "Update current user's profile or reset password",
				"description": " This API supports the following operations: <br> <br>\n1. Update the registered user profile of the current user using UserRegistrationUpdateCmd. This is done when query parameter 'action' is set to 'updateUserRegistration'.  Updating the user's password is deprecated; the ResetPassword operation should be used instead, as specified in 2a.<br> <br>\n2. Resetting or updating the password for unauthenticated and authenticated users. This is done when body parameter 'resetPassword' is set to 'true':<br> <br>\na. Reset password while authenticated requires the following input parameters:<br> Request body parameters: <br> resetPassword : true <br> logonId \t\t\t\t\t: logonId of the registered user<br> xcred_logonPasswordOld \t\t: Old password of the registered user <br> logonPassword \t\t\t\t: New password of the user <br> xcred_logonPasswordVerify \t: The verified password of the user, which must be identical to logonPassword<br> <br>\nb. Reset password while unauthenticated requires the following input parameters: <br> <br> i) Using Validation Code:  <br> <u>Step 1:</u> Specify logonId and challenge answer. A validation code is then emailed to the user to be used in Step 2.<br> Request body parameters:  <br> resetPassword \t: true <br> logonId \t\t: The logon ID of the registered user<br> challengeAnswer : Answer to the challenge question.<br> <br>\n<u>Step 2:</u> Specify validation code received in the email from step 1 and a new password, to update the user's password. <br> Request body parameters:  <br> resetPassword \t\t\t  : true <br> logonId \t\t\t\t  : The logon ID of the registered user<br> xcred_validationCode      : The validation code generated in the above step <br> logonPassword       \t  : New password of the user <br> xcred_logonPasswordVerify : The verified password of the user, which must be identical to logonPassword <br> <br>\nii) Using Temporary Password (deprecated): <br> Specify logonId and challenge answer. A temporary password is then emailed to the user.<br> Request body parameters:  <br> resetPassword \t: true <br> logonId \t\t: The logon ID of the registered user<br> challengeAnswer : Answer to the challenge question<br> ",
				"operationId": "Person-updatePersonOnUserRegistrationUpdate",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The action of the rest service.",
						"schema": {
							"type": "string",
							"enum": [
								"updateUserRegistration"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationUpdateRequest"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationUpdateRequest"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.AdministratorToPerfromActionOnUser"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self/name": {
			"get": {
				"tags": [
					"Person"
				],
				"summary": "Get user's name",
				"description": "This method retrieves the full name of the logged in user.",
				"operationId": "Person-findPersonNameBySelf",
				"x-introduced": "9.1.12.0",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-name"
								},
								"example": {
									"firstName": "John",
									"middleName": "Eric",
									"lastName": "Smith",
									"resourceId": "https://localhost:443/wcs/resources/store/10001/person/@self/name?responseFormat=json",
									"resourceName": "person"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-name"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-name"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-name"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/useractivate/emailactivate": {
			"put": {
				"tags": [
					"User Activate"
				],
				"summary": "Activate the user account.",
				"description": "Activate the user account.",
				"operationId": "UserActivate-activeUser",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					},
					{
						"name": "langId",
						"in": "query",
						"description": "The language ID.",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Request body to activate the user account.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserRequestBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserResponse"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserResponse"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/useractivate/resendemail": {
			"post": {
				"tags": [
					"User Activate"
				],
				"summary": "Resend user account activation email.",
				"description": "Resend user account activation email.",
				"operationId": "UserActivate-resendActiveUser",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body for resend user account activation email.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.UserActivateHandler.ResendActiveUserRequestBody"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.facade.server.commands.UserRegistrationEmailActivateResendCmd"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.facade.server.commands.UserRegistrationEmailActivateResendCmd"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.facade.server.commands.UserRegistrationEmailActivateResendCmd"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.member.facade.server.commands.UserRegistrationEmailActivateResendCmd"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			}
		},
		"/store/{storeId}/person/@self/languageCurrency": {
			"put": {
				"tags": [
					"Person"
				],
				"summary": "Change language and currency preference",
				"description": "Changes language and currency preference in profile and in context.",
				"operationId": "Person-changeLanguageCurrency",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "currency",
						"in": "query",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "URL",
						"in": "query",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Person.UpdateCurrencyAndLanguagePreferenceCmd"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.UpdateCurrencyAndLanguagePreferenceCmd"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.UpdateCurrencyAndLanguagePreferenceCmd"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/Person.UpdateCurrencyAndLanguagePreferenceCmd"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/@self/contact/{nickName}": {
			"get": {
				"tags": [
					"Contact"
				],
				"summary": "Get contact by nickname",
				"description": "Gets a person contact by nickname.",
				"operationId": "Contact-findPersonContactByNickName",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nickName",
						"in": "path",
						"description": "The contact name saved in addressBook by registered shopper.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-singleContact"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			},
			"put": {
				"tags": [
					"Contact"
				],
				"summary": "Update contact by nickname",
				"description": "Updates the contact in the address book identified by nickname.",
				"operationId": "Contact-updatePersonContact",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nickName",
						"in": "path",
						"description": "The contact name saved in addressBook by registered shopper.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/person-singleContact"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/person-singleContact"
							}
						}
					},
					"required": false
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"delete": {
				"tags": [
					"Contact"
				],
				"summary": "Delete contact from address book",
				"description": "Deletes the contact in the address book identified by nickname.",
				"operationId": "Contact-deletePersonContact",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "nickName",
						"in": "path",
						"description": "The contact name saved in addressBook by registered shopper.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/person-DeleteContact"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/person-DeleteContact"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-DeleteContact"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/person-DeleteContact"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"404": {
						"description": "The specified resource could not be found.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/person/@self/optOut": {
			"get": {
				"tags": [
					"Person"
				],
				"summary": "Get opt out preferences",
				"description": "Finds personal opt-out. When the store level personal opt-out does not exist, the site level personal opt-out is returned.",
				"operationId": "Person-findOptOutBySelfWOptOutAllProfileName",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "profileName",
						"in": "query",
						"description": "Profile name. Profiles determine the subset of data returned by a query.  Default profile name = IBM_optOut_email.",
						"schema": {
							"type": "string",
							"enum": [
								"IBM_optOut_email",
								"IBM_optOut_sms",
								"IBM_optOut_all"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all"
								},
								"example": {
									"userReceive": false,
									"userReceiveSMS": false
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/approval_status": {
			"get": {
				"tags": [
					"Approval Status"
				],
				"summary": "Finds all approval status records available to the current user.",
				"description": "Gets a list of approval records details that the current authenticated user can approve.",
				"operationId": "ApprovalStatus-findByQuery",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "q",
						"in": "query",
						"description": "The query name.",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"all",
								"buyerApprovals",
								"orderApprovals"
							]
						}
					},
					{
						"name": "submitterFirstName",
						"in": "query",
						"description": "Query by approval request submitter's first name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "submitterMiddleName",
						"in": "query",
						"description": "Query by approval request submitter's middle name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "submitterLastName",
						"in": "query",
						"description": "Query by approval request submitter's last name.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "startSubmitTime",
						"in": "query",
						"description": "Query by approval request start time.",
						"schema": {
							"type": "string",
							"format": "date"
						}
					},
					{
						"name": "endSubmitTime",
						"in": "query",
						"description": "Query by approval request end time.",
						"schema": {
							"type": "string",
							"format": "date"
						}
					},
					{
						"name": "status",
						"in": "query",
						"description": "Query by approval request status. 0 for pending, 1 for approved, 2 for rejected.",
						"schema": {
							"type": "integer",
							"format": "int32",
							"enum": [
								0,
								1,
								2
							]
						}
					},
					{
						"name": "approvalStatusId",
						"in": "query",
						"description": "Query by approval request approval status id.",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "entityId",
						"in": "query",
						"description": "Query by approval request entity id, such as order id.",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "approverId",
						"in": "query",
						"description": "Query by approver id. Only returns approval requests that can be approved by the current user.",
						"schema": {
							"type": "integer",
							"format": "int64"
						}
					},
					{
						"name": "orderBy",
						"in": "query",
						"description": "Order by.",
						"schema": {
							"type": "string",
							"enum": [
								"A-approvalStatusId",
								"A-entityId",
								"A-submitTime",
								"A-approveTime",
								"A-status",
								"A-flowTypeId",
								"A-stateId",
								"D-approvalStatusId",
								"D-entityId",
								"D-submitTime",
								"D-approveTime",
								"D-status",
								"D-flowTypeId",
								"D-stateId"
							]
						}
					},
					{
						"name": "pageNumber",
						"in": "query",
						"description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The 'pageSize' must be specified for paging to work.",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "pageSize",
						"in": "query",
						"description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The 'pageNumber' must be specified for paging to work.",
						"schema": {
							"type": "integer",
							"format": "int32"
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				}
			}
		},
		"/store/{storeId}/approval_status/{approvalStatusId}": {
			"post": {
				"tags": [
					"Approval Status"
				],
				"summary": "Approve or reject an approval record.",
				"description": "Approve or reject an approval record.",
				"operationId": "ApprovalStatus-updateApprovalStatus",
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"description": "The store identifier.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "approvalStatusId",
						"in": "path",
						"description": "The approval status ID.",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "action",
						"in": "query",
						"description": "The action name.",
						"schema": {
							"type": "string",
							"enum": [
								"updateApprovalStatus"
							]
						}
					},
					{
						"name": "responseFormat",
						"in": "query",
						"description": "The response format. Valid values are json and xml. If the request contains an input body, it must use the format specified in responseFormat. If the responseFormat is not specified, the accept  HTTP header determines the format of the response. If the accept  HTTP header is not specified then default response format is json.",
						"schema": {
							"type": "string",
							"enum": [
								"xml",
								"json"
							]
						}
					}
				],
				"requestBody": {
					"description": "Request body.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusParameterDescription"
							}
						},
						"application/xml": {
							"schema": {
								"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusParameterDescription"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusResponse"
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusResponse"
								}
							},
							"application/atom+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusResponse"
								}
							}
						}
					},
					"201": {
						"description": "The requested resource has been created.",
						"content": {}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax.",
						"content": {}
					},
					"401": {
						"description": "Not authenticated. The user session is not valid.",
						"content": {}
					},
					"403": {
						"description": "The user is not authorized to perform the specified request.",
						"content": {}
					},
					"500": {
						"description": "Internal server error. For details, see the server log files.",
						"content": {}
					}
				},
				"x-codegen-request-body-name": "body"
			},
			"get": {
				"tags": [
					"Approval Status"
				],
				"responses": {
					"200": {
						"description": "The requested completed successfully.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.ApprovalStatusDataBean_IBM_Store_Summary"
								},
								"example": {
									"resultList": {
										"approvalStatusId": "string",
										"approverGroupId": "string",
										"submitTime": "string",
										"flowTypeId": "string",
										"stateId": "string",
										"comment": "string",
										"submitterId": "string",
										"flowId": "string",
										"approveTime": "string",
										"status": "string",
										"approverId": "string",
										"entityId": "string"
									}
								}
							},
							"application/xhtml+xml": {
								"schema": {
									"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.ApprovalStatusDataBean_IBM_Store_Summary"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. The request could not be understood by the server due to malformed syntax."
					},
					"401": {
						"description": "Not authenticated. The user session is not valid."
					},
					"403": {
						"description": "The user is not authorized to perform the specified request."
					},
					"404": {
						"description": "The specified resource could not be found."
					},
					"500": {
						"description": "Internal server error. For details, see the server log files."
					}
				},
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"description": "The store identifier.",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "approvalStatusId",
						"in": "path",
						"required": true,
						"description": "The approval status ID.",
						"schema": {
							"type": "string"
						}
					}
				],
				"summary": "Find an approval status record by its id."
			}
		}
	},
	"components": {
		"schemas": {
			"com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details.parentRolesWithDetails": {
				"type": "object",
				"properties": {
					"roleId": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"Oraganization.AdministratorToFindOrganizationInformationByOrganizationIdentifier": {
				"type": "object",
				"properties": {
					"country": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"address3": {
						"type": "string"
					},
					"mobilePhone1": {
						"type": "string"
					},
					"organizationName": {
						"type": "string"
					},
					"address2": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"addressType": {
						"type": "string"
					},
					"nickName": {
						"type": "string"
					},
					"phone2": {
						"type": "string"
					},
					"addressId": {
						"type": "string"
					},
					"phone1": {
						"type": "string"
					},
					"email2": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"email1": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"stateProvDisplayName": {
						"type": "string"
					},
					"countryDisplayName": {
						"type": "string"
					}
				}
			},
			"Oraganization.AdministratorAddressBook": {
				"type": "object",
				"properties": {
					"country": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"address3": {
						"type": "string"
					},
					"mobilePhone1": {
						"type": "string"
					},
					"organizationName": {
						"type": "string"
					},
					"address2": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"addressType": {
						"type": "string"
					},
					"nickName": {
						"type": "string"
					},
					"phone2": {
						"type": "string"
					},
					"addressId": {
						"type": "string"
					},
					"phone1": {
						"type": "string"
					},
					"email2": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"email1": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"stateProvDisplayName": {
						"type": "string"
					},
					"countryDisplayName": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean.userRoles": {
				"x-introduced": "9.1.15.0",
				"type": "object",
				"properties": {
					"roleId": {
						"type": "string",
						"description": "The string represented unique numeric ID for identifying the role."
					},
					"orgId": {
						"type": "string",
						"description": "The organization ID that the role belonging to."
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityUpdateRequest": {
				"required": [
					"orgEntityId"
				],
				"type": "object",
				"properties": {
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressType": {
						"type": "string",
						"description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB is used."
					},
					"administratorFirstName": {
						"type": "string",
						"description": "The first name of the administrator."
					},
					"administratorLastName": {
						"type": "string",
						"description": "The last name of the administrator."
					},
					"administratorMiddleName": {
						"type": "string",
						"description": "The middle name of the administrator."
					},
					"attributeName_storeId_action_sequence": {
						"type": "string",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. "
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"businessCategory": {
						"type": "string",
						"description": "Describes the kind of business performed by an organization or organizational unit."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"legalId": {
						"type": "string",
						"description": "Registered organization identifier; may be null for an organizational unit."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"orgEntityField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityId": {
						"type": "string",
						"description": "The ID for this organization or organizational unit."
					},
					"orgEntityName": {
						"type": "string",
						"description": "The name of the organization or organizational unit."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					}
				},
				"description": "Request of OrgEntityUpdateCmd."
			},
			"com.ibm.commerce.member.facade.server.commands.UserRegistrationEmailActivateResendCmd": {
				"type": "object"
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityBuyerIdentifier": {
				"required": [
					"orgEntityId",
					"userId"
				],
				"type": "object",
				"x-graphql-type-name": "orgEntityBuyerIdentifier",
				"properties": {
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"userId": {
						"type": "string",
						"description": "The buyer identifier."
					},
					"viewTaskName": {
						"type": "string"
					}
				},
				"description": "Response of registering an organization entity and a buyer."
			},
			"com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusResponse": {
				"type": "object",
				"x-graphql-type-name": "updateApprovalStatusResponse",
				"properties": {
					"redirecturl": {
						"type": "string"
					},
					"resultmsg": {
						"type": "string"
					},
					"viewTaskName": {
						"type": "string",
						"description": "Update approval status message. Possible values include 'approvalsFailed' for a failed approval and 'approvalsOK' for a successful approval."
					}
				},
				"description": "Description of approval status record update response."
			},
			"com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType": {
				"type": "object",
				"properties": {
					"distinguishedName": {
						"type": "string"
					},
					"uniqueID": {
						"type": "string"
					},
					"externalIdentifier": {
						"$ref": "#/components/schemas/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType.externalIdentifier"
					}
				}
			},
			"person-person.receiveEmailPreference": {
				"required": [
					"value"
				],
				"type": "object",
				"properties": {
					"storeID": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				}
			},
			"person-person.receiveSMSPreference": {
				"required": [
					"value"
				],
				"type": "object",
				"properties": {
					"storeID": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				}
			},
			"person-person.userDataField": {
				"required": [
					"key"
				],
				"type": "object",
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				}
			},
			"person-person.contextAttribute.attributeValue": {
				"required": [
					"value"
				],
				"type": "object",
				"properties": {
					"storeId": {
						"type": "string"
					},
					"value": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.ResetPasswordAdministratorRequest": {
				"required": [
					"logonId"
				],
				"type": "object",
				"x-graphql-type-name": "resetPasswordAdministratorRequest",
				"properties": {
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"administratorPassword": {
						"type": "string",
						"description": "The administrator password."
					},
					"logonId": {
						"type": "string",
						"description": "The logonId of shopper to reset the password for."
					}
				},
				"description": "Request of ResetPasswordAdministratorCmd."
			},
			"com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all": {
				"type": "object",
				"x-graphql-type-name": "emailUserReceiveData",
				"properties": {
					"userReceiveSMS": {
						"type": "boolean"
					},
					"userReceive": {
						"type": "boolean"
					}
				}
			},
			"Person.AdministratorToPerfromActionOnUser": {
				"required": [
					"userId"
				],
				"type": "object",
				"properties": {
					"userId": {
						"type": "string",
						"description": "The user identifier."
					},
					"viewTaskName": {
						"type": "string"
					},
					"addressId": {
						"type": "string"
					}
				},
				"description": "User identifier."
			},
			"Person.AdministratorToPerfromActionOnUserDelete": {
				"type": "object",
				"properties": {
					"response": {
						"type": "object",
						"properties": {
							"message": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						}
					}
				}
			},
			"java.util.Map.Entry": {
				"required": [
					"key"
				],
				"type": "object",
				"properties": {
					"value": {
						"type": "string"
					},
					"key": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.MemberRoleAssignmentRequest": {
				"type": "object",
				"x-graphql-type-name": "memberRoleAssignmentRequest",
				"description": "The request body for assigning and/or un-assigning roles. The roleId property takes the forms like roleId, roleId1, roleId2..., the corresponding orgEntityId should be orgEntityId, orgEntiyId1, orgEntityId2...",
				"required": [
					"orgEntityId1",
					"roleId1"
				],
				"properties": {
					"orgEntityId1": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"roleId1": {
						"type": "string",
						"description": "The role identifier."
					}
				},
				"additionalProperties": true
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminUpdateRequest": {
				"type": "object",
				"x-graphql-type-name": "userRegistrationAdminUpdateRequest",
				"properties": {
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressType": {
						"type": "string",
						"description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
					},
					"age": {
						"type": "string",
						"description": "The registrant's age."
					},
					"alternateId": {
						"type": "string",
						"description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
					},
					"attributeName_storeId_action_sequence": {
						"type": "string",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. "
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"challengeAnswer": {
						"type": "string",
						"description": "Answer to the challenge question."
					},
					"challengeQuestion": {
						"type": "string",
						"description": "Challenge question for verbal confirmation of the customer's identity."
					},
					"children": {
						"type": "string",
						"description": "The number of children the registrant has."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"companyName": {
						"type": "string",
						"description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"dateOfBirth": {
						"type": "string",
						"description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
					},
					"departmentNumber": {
						"type": "string",
						"description": "The department identifier for the registrant."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"employeeId": {
						"type": "string",
						"description": "The registrant's ID with his or her employer."
					},
					"employeeType": {
						"type": "string",
						"description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"gender": {
						"type": "string",
						"description": "The registrant's gender."
					},
					"hobbies": {
						"type": "string",
						"description": "The registrant's hobbies."
					},
					"household": {
						"type": "string",
						"description": "The number of people in the registrant's household; the default is 1."
					},
					"income": {
						"type": "string",
						"description": "The registrant's annual income."
					},
					"incomeCurrency": {
						"type": "string",
						"description": "The currency in which the registrant's income is paid."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"logonId": {
						"type": "string",
						"description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
					},
					"logonPassword": {
						"type": "string",
						"description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
					},
					"logonPasswordVerify": {
						"type": "string",
						"description": "Required if the logonPassword is used: The registrant's password, entered a second time."
					},
					"manager": {
						"type": "string",
						"description": "The name of the registrant's manager."
					},
					"maritalStatus": {
						"type": "string",
						"description": "The registrant's marital status."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"mobilePhone1": {
						"type": "string",
						"description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
					},
					"mobilePhone1Country": {
						"type": "string",
						"description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
					},
					"officeAddress": {
						"type": "string",
						"description": "The internal address (for example, mail stop)."
					},
					"orderBefore": {
						"type": "string",
						"description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
					},
					"organizationId": {
						"type": "string",
						"description": "The identifier of the registrant's company."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"organizationUnitId": {
						"type": "string",
						"description": "The identifier of the registrant's organizational unit."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"photo": {
						"type": "string",
						"description": "URL or path to a photo of the registrant."
					},
					"policyAccountId": {
						"type": "string",
						"description": "The account policy for this user."
					},
					"preferredCommunication": {
						"type": "array",
						"description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
						"items": {
							"type": "string"
						}
					},
					"preferredCurrency": {
						"type": "string",
						"description": "The registrant's preferred currency for transactions."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"preferredLanguage": {
						"type": "string",
						"description": "The registrant's preferred language."
					},
					"preferredMeasure": {
						"type": "string",
						"description": "The registrant's preferred unit of measure."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"receiveEmail": {
						"type": "string",
						"description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
					},
					"receiveSMS": {
						"type": "string",
						"description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
					},
					"receiveSMSNotification": {
						"type": "string",
						"description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
					},
					"secretary": {
						"type": "string",
						"description": "The name of the registrant's secretary or administrative assistant."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"timeZone": {
						"type": "string",
						"description": "The time zone in which the registrant does business (report as GMT +/- hours)."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"userField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"userId": {
						"type": "string",
						"description": "The user the administrator will update."
					},
					"userProfileField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userProfileField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"userStatus": {
						"type": "string",
						"description": "The user account status. A status of 1 indicates the account is enabled, and a status of 0 indicates the account is disabled."
					},
					"x_demographicField1": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField2": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField3": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField4": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField5": {
						"type": "string",
						"description": "Customizable field for demographic information; a field of 254 characters."
					},
					"x_demographicField6": {
						"type": "string",
						"description": "Customizable field for demographic information; an integer field."
					},
					"x_demographicField7": {
						"type": "string",
						"description": "Customizable field for demographic information; a field var char, length 6."
					},
					"x_taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					}
				},
				"description": "Request of UserRegistrationAdminUpdateCmd."
			},
			"person-checkoutProfile": {
				"type": "object",
				"properties": {
					"resourceId": {
						"type": "string"
					},
					"CheckoutProfile": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"shipping_email1": {
									"type": "string"
								},
								"shipping_addressLine": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"shipping_addressId": {
									"type": "string"
								},
								"shipping_state": {
									"type": "string"
								},
								"shipping_modeId": {
									"type": "string"
								},
								"billing_lastName": {
									"type": "string"
								},
								"shipping_city": {
									"type": "string"
								},
								"shipping_addressType": {
									"type": "string"
								},
								"shipping_lastName": {
									"type": "string"
								},
								"shipping_zipCode": {
									"type": "string"
								},
								"billing_addressType": {
									"type": "string"
								},
								"billing_addressLine": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"billing_state": {
									"type": "string"
								},
								"shipping_nickName": {
									"type": "string"
								},
								"xchkout_ProfileName": {
									"type": "string"
								},
								"billing_primary": {
									"type": "string"
								},
								"billing_addressId": {
									"type": "string"
								},
								"shipping_firstName": {
									"type": "string"
								},
								"billing_country": {
									"type": "string"
								},
								"billing_firstName": {
									"type": "string"
								},
								"shipping_primary": {
									"type": "string"
								},
								"billing_email1": {
									"type": "string"
								},
								"billing_city": {
									"type": "string"
								},
								"protocolData": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"name": {
												"type": "string"
											},
											"value": {
												"type": "string"
											}
										}
									}
								},
								"billing_zipCode": {
									"type": "string"
								},
								"billing_nickName": {
									"type": "string"
								},
								"shipping_country": {
									"type": "string"
								}
							}
						}
					},
					"resourceName": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				}
			},
			"person-checkoutProfile-update": {
				"type": "object",
				"properties": {
					"profileName": {
						"type": "string"
					},
					"shipping_email1": {
						"type": "string"
					},
					"shipping_addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"shipping_addressId": {
						"type": "string"
					},
					"shipping_state": {
						"type": "string"
					},
					"shipping_modeId": {
						"type": "string"
					},
					"billing_lastName": {
						"type": "string"
					},
					"shipping_city": {
						"type": "string"
					},
					"shipping_addressType": {
						"type": "string"
					},
					"shipping_lastName": {
						"type": "string"
					},
					"shipping_zipCode": {
						"type": "string"
					},
					"billing_addressType": {
						"type": "string"
					},
					"billing_addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"billing_state": {
						"type": "string"
					},
					"shipping_nickName": {
						"type": "string"
					},
					"billing_primary": {
						"type": "string"
					},
					"billing_addressId": {
						"type": "string"
					},
					"shipping_firstName": {
						"type": "string"
					},
					"billing_country": {
						"type": "string"
					},
					"billing_firstName": {
						"type": "string"
					},
					"shipping_primary": {
						"type": "string"
					},
					"billing_email1": {
						"type": "string"
					},
					"billing_city": {
						"type": "string"
					},
					"protocolData": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string"
								},
								"value": {
									"type": "string"
								}
							}
						}
					},
					"billing_zipCode": {
						"type": "string"
					},
					"billing_nickName": {
						"type": "string"
					},
					"shipping_country": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				}
			},
			"person-checkoutProfile-updateById": {
				"type": "object",
				"properties": {
					"profileName": {
						"type": "string"
					},
					"shipping_nickName": {
						"type": "string"
					},
					"shipping_firstName": {
						"type": "string"
					},
					"shipping_lastName": {
						"type": "string"
					},
					"shipping_email1": {
						"type": "string"
					},
					"shipping_phone1": {
						"type": "string"
					},
					"shipping_addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"shipping_city": {
						"type": "string"
					},
					"shipping_state": {
						"type": "string"
					},
					"shipping_zipCode": {
						"type": "string"
					},
					"shipping_country": {
						"type": "string"
					},
					"shipping_modeId": {
						"type": "string"
					},
					"shipping_addressType": {
						"type": "string"
					},
					"billing_nickName": {
						"type": "string"
					},
					"billing_firstName": {
						"type": "string"
					},
					"billing_lastName": {
						"type": "string"
					},
					"billing_email1": {
						"type": "string"
					},
					"billing_phone1": {
						"type": "string"
					},
					"billing_addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"billing_city": {
						"type": "string"
					},
					"billing_state": {
						"type": "string"
					},
					"billing_zipCode": {
						"type": "string"
					},
					"billing_country": {
						"type": "string"
					},
					"billing_addressType": {
						"type": "string"
					},
					"pay_payment_method": {
						"type": "string"
					},
					"pay_cc_brand": {
						"type": "string"
					},
					"pay_account": {
						"type": "string"
					},
					"pay_expire_month": {
						"type": "string"
					},
					"pay_expire_year": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				}
			},
			"Empty": {
				"type": "object",
				"description": "Empty model. Used as default value when no model is specified."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.UpdateApprovalGroups": {
				"required": [
					"URL",
					"orgEntityId",
					"segmentId"
				],
				"type": "object",
				"x-graphql-type-name": "updateApprovalGroups",
				"properties": {
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"segmentId": {
						"type": "string",
						"description": "The ApprovalGroup identifier for a specific organization."
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType.externalIdentifier": {
				"type": "object",
				"properties": {
					"identifier": {
						"type": "string"
					}
				}
			},
			"Person.AdministratorsToFindUserInformationByUserIdentifier": {
				"required": [
					"logonId",
					"userId"
				],
				"type": "object",
				"properties": {
					"manager": {
						"type": "string"
					},
					"mobilePhone1": {
						"type": "string"
					},
					"mobilePhone1Country": {
						"type": "string"
					},
					"parentMemberId": {
						"type": "string"
					},
					"phone2": {
						"type": "string"
					},
					"dn": {
						"type": "string"
					},
					"employeeId": {
						"type": "string"
					},
					"logonPassword": {
						"type": "string"
					},
					"parentOrgName": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"phone1": {
						"type": "string"
					},
					"email2": {
						"type": "string"
					},
					"email1": {
						"type": "string"
					},
					"employeeType": {
						"type": "string"
					},
					"secretary": {
						"type": "string"
					},
					"logonId": {
						"type": "string"
					},
					"departmentNumber": {
						"type": "string"
					},
					"registrationUpdate": {
						"type": "string"
					},
					"fax2": {
						"type": "string"
					},
					"registration": {
						"type": "string"
					},
					"fax1": {
						"type": "string"
					},
					"lastSession": {
						"type": "string"
					},
					"logonPasswordVerify": {
						"type": "string"
					}
				}
			},
			"Person.PerformActionByAdministrator": {
				"required": [
					"viewTaskName"
				],
				"type": "object",
				"properties": {
					"viewTaskName": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonContactHandler.UserIdentifier": {
				"type": "object",
				"x-graphql-type-name": "personUserIdentifier",
				"properties": {
					"resourceName": {
						"type": "string"
					},
					"addressId": {
						"type": "string"
					},
					"userId": {
						"type": "string",
						"description": "The user identifier."
					}
				},
				"description": "User identifier."
			},
			"com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details": {
				"required": [
					"organizationId",
					"organizationName"
				],
				"type": "object",
				"x-graphql-type-name": "parentAssignedRolesDetails",
				"properties": {
					"parentRolesWithDetails": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details.parentRolesWithDetails"
						}
					},
					"displayName": {
						"type": "string"
					},
					"memberId": {
						"type": "string"
					},
					"organizationId": {
						"type": "string"
					},
					"contactInfo": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Oraganization.AdministratorToFindOrganizationInformationByOrganizationIdentifier"
						}
					},
					"organizationDisplayName": {
						"type": "string"
					},
					"organizationName": {
						"type": "string"
					},
					"businessCategory": {
						"nullable": true,
						"type": "string"
					},
					"description": {
						"nullable": true,
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"addressBook": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Oraganization.AdministratorAddressBook"
						}
					},
					"status": {
						"type": "integer"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUser": {
				"type": "object",
				"x-graphql-type-name": "updateMemberUser",
				"properties": {
					"addAsExplicitInclusionToMemberGroupId": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "MemberGroup Identifiers to explicitly add the user too ."
					},
					"addAsExplicitExclusionToMemberGroupId": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "MemberGroup Identifiers to explicitly exclude the user from."
					},
					"removeFromMemberGroupId": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "MemberGroup Identifiers to remove the user from."
					}
				},
				"description": "Body of MemberGroupMemberUpdateCmd."
			},
			"com.ibm.commerce.security.commands.ResetPasswordAdministratorCmd": {
				"type": "object"
			},
			"com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary": {
				"type": "object",
				"properties": {
					"recordSetCount": {
						"type": "integer",
						"format": "int32"
					},
					"recordSetCompleteIndicator": {
						"type": "boolean"
					},
					"recordSetStartNumber": {
						"type": "integer",
						"format": "int32"
					},
					"resultList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
						}
					},
					"recordSetTotal": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary.resultList": {
				"type": "object",
				"properties": {
					"ownerId": {
						"type": "string"
					},
					"description": {
						"type": "string",
						"nullable": true
					},
					"name": {
						"type": "string"
					},
					"properties": {
						"type": "string"
					},
					"memberGroupTypeId": {
						"type": "string"
					},
					"memberGroupId": {
						"type": "integer",
						"format": "int64"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UpdateMemberUserResponse": {
				"type": "object",
				"x-graphql-type-name": "updateMemberUserResponse",
				"properties": {
					"storeId": {
						"type": "string",
						"description": "The current store identifier."
					},
					"addAsExplicitExclusionToMemberGroupId": {
						"type": "string",
						"description": "MemberGroup Identifiers to explicitly exclude the user from."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"addAsExplicitInclusionToMemberGroupId": {
						"type": "string",
						"description": "MemberGroup Identifiers to explicitly add the user to."
					},
					"userId": {
						"type": "string",
						"description": "The user identifier."
					},
					"catalogId": {
						"type": "string",
						"description": "The catalog identifier."
					},
					"requesttype": {
						"type": "string",
						"description": "The request type for example, ajax."
					},
					"removeFromMemberGroupId": {
						"type": "string",
						"description": "MemberGroup Identifiers to remove the user from."
					}
				},
				"description": "response of MemberGroupMemberUpdateCmd."
			},
			"person-person.attributes": {
				"type": "object",
				"properties": {
					"bProfileAttrKey": {
						"type": "string"
					},
					"bProfileAttrValue": {
						"type": "string"
					},
					"contactInfoAttrKey": {
						"type": "string"
					},
					"contactInfoAttrValue": {
						"type": "string"
					},
					"pProfileAttrKey": {
						"type": "string"
					},
					"pProfileAttrValue": {
						"type": "string"
					}
				}
			},
			"person-person.contextAttribute": {
				"required": [
					"attributeName",
					"attributeValue"
				],
				"type": "object",
				"properties": {
					"attributeName": {
						"type": "string"
					},
					"attributeValue": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.contextAttribute.attributeValue"
						}
					}
				}
			},
			"com.ibm.commerce.member.facade.datatypes.IncomeAmountType": {
				"type": "object",
				"properties": {
					"currency": {
						"type": "string"
					},
					"value": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType": {
				"type": "object",
				"properties": {
					"distinguishedName": {
						"type": "string"
					},
					"uniqueID": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddRequest": {
				"required": [
					"logonId",
					"logonPassword"
				],
				"type": "object",
				"x-graphql-type-name": "userRegistrationAdmin",
				"properties": {
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressType": {
						"type": "string",
						"description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
					},
					"age": {
						"type": "string",
						"description": "The registrant's age."
					},
					"alternateId": {
						"type": "string",
						"description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
					},
					"attributeName_storeId_action_sequence": {
						"type": "string",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. "
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"challengeAnswer": {
						"type": "string",
						"description": "Answer to the challenge question."
					},
					"challengeQuestion": {
						"type": "string",
						"description": "Challenge question for verbal confirmation of the customer's identity."
					},
					"children": {
						"type": "string",
						"description": "The number of children the registrant has."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"companyName": {
						"type": "string",
						"description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"dateOfBirth": {
						"type": "string",
						"description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
					},
					"departmentNumber": {
						"type": "string",
						"description": "The department identifier for the registrant."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"employeeId": {
						"type": "string",
						"description": "The registrant's ID with his or her employer."
					},
					"employeeType": {
						"type": "string",
						"description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"gender": {
						"type": "string",
						"description": "The registrant's gender."
					},
					"hobbies": {
						"type": "string",
						"description": "The registrant's hobbies."
					},
					"household": {
						"type": "string",
						"description": "The number of people in the registrant's household; the default is 1."
					},
					"income": {
						"type": "string",
						"description": "The registrant's annual income."
					},
					"incomeCurrency": {
						"type": "string",
						"description": "The currency in which the registrant's income is paid."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"logonId": {
						"type": "string",
						"description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
					},
					"logonPassword": {
						"type": "string",
						"description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
					},
					"logonPasswordVerify": {
						"type": "string",
						"description": "Required if the logonPassword is used: The registrant's password, entered a second time."
					},
					"manager": {
						"type": "string",
						"description": "The name of the registrant's manager."
					},
					"maritalStatus": {
						"type": "string",
						"description": "The registrant's marital status."
					},
					"marketingTrackingConsent": {
						"type": "string",
						"description": "The marketing tracking consent. 0 means opt-out, 1 means opt-in."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"mobilePhone1": {
						"type": "string",
						"description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
					},
					"mobilePhone1Country": {
						"type": "string",
						"description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
					},
					"officeAddress": {
						"type": "string",
						"description": "The internal address (for example, mail stop)."
					},
					"orderBefore": {
						"type": "string",
						"description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
					},
					"organizationDistinguishedName": {
						"type": "string",
						"description": "The fully qualified DN of the organization to register under. Required for B2B user registration. "
					},
					"organizationId": {
						"type": "string",
						"description": "The identifier of the registrant's company."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"organizationUnitId": {
						"type": "string",
						"description": "The identifier of the registrant's organizational unit."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"parentMemberId": {
						"type": "string",
						"description": "The parent member identifier of the user."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"photo": {
						"type": "string",
						"description": "URL or path to a photo of the registrant."
					},
					"policyAccountId": {
						"type": "string",
						"description": "The account policy for this user."
					},
					"preferredCommunication": {
						"type": "array",
						"description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
						"items": {
							"type": "string"
						}
					},
					"preferredCurrency": {
						"type": "string",
						"description": "The registrant's preferred currency for transactions."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"preferredLanguage": {
						"type": "string",
						"description": "The registrant's preferred language."
					},
					"preferredMeasure": {
						"type": "string",
						"description": "The registrant's preferred unit of measure."
					},
					"privacyNoticeVersion": {
						"type": "string",
						"description": "The version of the privacy notice. For example '1.0'."
					},
					"profileType": {
						"type": "string",
						"description": "The user's profile type. If profileType is not specified, by default, the profileType is set to 'C' and a consumer user will be created; A business user can be by setting profileType to 'B'.",
						"enum": [
							"B",
							"C"
						]
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"receiveEmail": {
						"type": "string",
						"description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
					},
					"receiveSMS": {
						"type": "string",
						"description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
					},
					"receiveSMSNotification": {
						"type": "string",
						"description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
					},
					"secretary": {
						"type": "string",
						"description": "The name of the registrant's secretary or administrative assistant."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"timeZone": {
						"type": "string",
						"description": "The time zone in which the registrant does business (report as GMT +/- hours)."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"userField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"userProfileField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userProfileField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"userStatus": {
						"type": "string",
						"description": "The user account status. A status of 1 indicates the account is enabled, and a status of 0 indicates the account is disabled."
					},
					"x_demographicField1": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField2": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField3": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField4": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField5": {
						"type": "string",
						"description": "Customizable field for demographic information; a field of 254 characters."
					},
					"x_demographicField6": {
						"type": "string",
						"description": "Customizable field for demographic information; an integer field."
					},
					"x_demographicField7": {
						"type": "string",
						"description": "Customizable field for demographic information; a field var char, length 6."
					},
					"x_taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					}
				},
				"description": "Request of UserRegistrationAdminAdd."
			},
			"person-contact": {
				"type": "object",
				"properties": {
					"resourceId": {
						"type": "string"
					},
					"resourceName": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"addressId": {
						"type": "string"
					},
					"contact": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-singleContact"
						}
					}
				},
				"required": [
					"resourceId",
					"resourceName",
					"userId",
					"contact"
				]
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.BuyerRegistrationAddRequest": {
				"required": [
					"org_orgEntityName",
					"usr_logonId",
					"usr_logonPassword",
					"usr_logonPasswordVerify"
				],
				"type": "object",
				"x-graphql-type-name": "buyerRegistration",
				"properties": {
					"org_orgEntityName": {
						"type": "array",
						"description": "The name of the new buyer organization to register.",
						"items": {
							"type": "string"
						}
					},
					"usr_logonId": {
						"type": "array",
						"description": "The logonId for the buyer organization's initial administrator.",
						"items": {
							"type": "string"
						}
					},
					"usr_logonPassword": {
						"type": "array",
						"description": "The logonId for the password of buyer organization's initial administrator's.",
						"items": {
							"type": "string"
						}
					},
					"usr_logonPasswordVerify": {
						"type": "array",
						"description": "The logonId for the password of buyer organization's initial administrator's entered a second time.",
						"items": {
							"type": "string"
						}
					}
				},
				"description": "Request of BuyerRegistrationAddCmd."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.UpdateApprovalGroupsResponse": {
				"required": [
					"URL",
					"orgEntityId",
					"segmentId"
				],
				"type": "object",
				"properties": {
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"segmentId": {
						"type": "string",
						"description": "The ApprovalGroup identifier for a specific organization."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"storeId": {
						"type": "string",
						"description": "The current store identifier."
					},
					"catalogId": {
						"type": "string",
						"description": "The catalog identifier."
					},
					"requesttype": {
						"type": "string",
						"description": "The request type for example, ajax."
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.UserIdContainer": {
				"required": [
					"userId"
				],
				"type": "object",
				"x-graphql-type-name": "personProfileContainer",
				"properties": {
					"userId": {
						"type": "string",
						"description": "User identification."
					},
					"resourceName": {
						"type": "string"
					}
				},
				"description": "User identification container."
			},
			"com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler.CheckoutProfileIdContainer": {
				"required": [
					"checkoutProfileId"
				],
				"type": "object",
				"properties": {
					"checkoutProfileId": {
						"type": "string",
						"description": "Check out profile identification."
					}
				},
				"description": "Checkout out profile identification container."
			},
			"person-person": {
				"type": "object",
				"properties": {
					"accountStatus": {
						"type": "string",
						"enum": [
							"Enabled",
							"Disabled"
						]
					},
					"addressId": {
						"type": "string"
					},
					"addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"addressType": {
						"type": "string"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.attributes"
						}
					},
					"bestCallingTime": {
						"type": "string"
					},
					"businessTitle": {
						"type": "string"
					},
					"challengeQuestion": {
						"type": "string"
					},
					"resourceId": {
						"type": "string"
					},
					"resourceName": {
						"type": "string"
					},
					"checkoutProfileUrl": {
						"type": "string"
					},
					"contactUrl": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"companyName": {
						"type": "string"
					},
					"contact": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-singleContact"
						}
					},
					"contextAttribute": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.contextAttribute"
						}
					},
					"country": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string"
					},
					"departmentNumber": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"distinguishedName": {
						"type": "string"
					},
					"email1": {
						"type": "string"
					},
					"email2": {
						"type": "string"
					},
					"employeeID": {
						"type": "string"
					},
					"employeeType": {
						"type": "string"
					},
					"fax1": {
						"type": "string"
					},
					"fax2": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"gender": {
						"type": "string",
						"enum": [
							"Male",
							"Female",
							"Unspecified"
						]
					},
					"geographicalShippingCode": {
						"type": "string"
					},
					"geographicalTaxCode": {
						"type": "string"
					},
					"hobbies": {
						"type": "string"
					},
					"householdSize": {
						"type": "string",
						"format": "int32"
					},
					"income": {
						"$ref": "#/components/schemas/com.ibm.commerce.member.facade.datatypes.IncomeAmountType"
					},
					"internalOfficeAddress": {
						"type": "string"
					},
					"language": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"lastUpdate": {
						"type": "string"
					},
					"logonId": {
						"type": "string"
					},
					"manager": {
						"type": "string"
					},
					"maritalStatus": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					},
					"mobilePhone1": {
						"type": "string"
					},
					"mobilePhone1Country": {
						"type": "string"
					},
					"nickName": {
						"type": "string"
					},
					"numberOfChildren": {
						"type": "string",
						"format": "int32"
					},
					"organizationDistinguishedName": {
						"type": "string"
					},
					"organizationIdentifier": {
						"$ref": "#/components/schemas/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
					},
					"organizationName": {
						"type": "string"
					},
					"organizationUnitName": {
						"type": "string"
					},
					"orgizationId": {
						"type": "string"
					},
					"passwordExpired": {
						"type": "string"
					},
					"personIdentifier": {
						"$ref": "#/components/schemas/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
					},
					"personTitle": {
						"type": "string"
					},
					"phone1": {
						"type": "string"
					},
					"phone1Publish": {
						"type": "string"
					},
					"phone1Type": {
						"type": "string"
					},
					"phone2": {
						"type": "string"
					},
					"phone2Publish": {
						"type": "string"
					},
					"phone2Type": {
						"type": "string"
					},
					"photoURI": {
						"type": "string"
					},
					"preferredCommunication": {
						"type": "string"
					},
					"preferredCurrency": {
						"type": "string"
					},
					"preferredDelivery": {
						"type": "string"
					},
					"preferredLanguage": {
						"type": "string"
					},
					"primary": {
						"type": "string"
					},
					"profileType": {
						"type": "string",
						"enum": [
							"C",
							"B"
						]
					},
					"receiveEmailPreference": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.receiveEmailPreference"
						}
					},
					"receiveSMSNotification": {
						"type": "string"
					},
					"receiveSMSPreference": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.receiveSMSPreference"
						}
					},
					"registrationApprovalStatus": {
						"type": "string"
					},
					"registrationDateTime": {
						"type": "string"
					},
					"registrationStatus": {
						"type": "string",
						"enum": [
							"Guest",
							"RegisteredPerson"
						]
					},
					"secretary": {
						"type": "string",
						"description": "The name of the registrant's secretary or administrative assistant."
					},
					"state": {
						"type": "string"
					},
					"userDataField": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-person.userDataField"
						}
					},
					"userId": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					}
				}
			},
			"person-name": {
				"type": "object",
				"x-introduced": "9.1.12.0",
				"properties": {
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationUpdateRequest": {
				"type": "object",
				"x-graphql-type-name": "userRegistrationUpdateRequest",
				"properties": {
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressType": {
						"type": "string",
						"description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
					},
					"age": {
						"type": "string",
						"description": "The registrant's age."
					},
					"alternateId": {
						"type": "string",
						"description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
					},
					"attributeName_storeId_action_sequence": {
						"type": "string",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. "
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"challengeAnswer": {
						"type": "string",
						"description": "Answer to the challenge question."
					},
					"challengeQuestion": {
						"type": "string",
						"description": "Challenge question for verbal confirmation of the customer's identity."
					},
					"children": {
						"type": "string",
						"description": "The number of children the registrant has."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"companyName": {
						"type": "string",
						"description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"dateOfBirth": {
						"type": "string",
						"description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
					},
					"departmentNumber": {
						"type": "string",
						"description": "The department identifier for the registrant."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"employeeId": {
						"type": "string",
						"description": "The registrant's ID with his or her employer."
					},
					"employeeType": {
						"type": "string",
						"description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"gender": {
						"type": "string",
						"description": "The registrant's gender."
					},
					"hobbies": {
						"type": "string",
						"description": "The registrant's hobbies."
					},
					"household": {
						"type": "string",
						"description": "The number of people in the registrant's household; the default is 1."
					},
					"income": {
						"type": "string",
						"description": "The registrant's annual income."
					},
					"incomeCurrency": {
						"type": "string",
						"description": "The currency in which the registrant's income is paid."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"logonId": {
						"type": "string",
						"description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
					},
					"logonPassword": {
						"type": "string",
						"description": "The registrant's password. During password reset, this value also acts as the new password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
					},
					"logonPasswordVerify": {
						"type": "string",
						"description": "Required if the logonPassword is used: The registrant's password, entered a second time.",
						"deprecated": true
					},
					"manager": {
						"type": "string",
						"description": "The name of the registrant's manager."
					},
					"maritalStatus": {
						"type": "string",
						"description": "The registrant's marital status."
					},
					"marketingTrackingConsent": {
						"type": "string",
						"description": "The marketing tracking consent. 0 means opt-out, 1 means opt-in."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"mobilePhone1": {
						"type": "string",
						"description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
					},
					"mobilePhone1Country": {
						"type": "string",
						"description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
					},
					"officeAddress": {
						"type": "string",
						"description": "The internal address (for example, mail stop)."
					},
					"orderBefore": {
						"type": "string",
						"description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
					},
					"organizationId": {
						"type": "string",
						"description": "The identifier of the registrant's company."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"organizationUnitId": {
						"type": "string",
						"description": "The identifier of the registrant's organizational unit."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"photo": {
						"type": "string",
						"description": "URL or path to a photo of the registrant."
					},
					"preferredCommunication": {
						"type": "array",
						"description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2.",
						"items": {
							"type": "string"
						}
					},
					"preferredCurrency": {
						"type": "string",
						"description": "The registrant's preferred currency for transactions."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"preferredLanguage": {
						"type": "string",
						"description": "The registrant's preferred language."
					},
					"preferredMeasure": {
						"type": "string",
						"description": "The registrant's preferred unit of measure."
					},
					"privacyNoticeVersion": {
						"type": "string",
						"description": "The version of the privacy notice. For example '1.0'."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"receiveEmail": {
						"type": "string",
						"description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
					},
					"receiveSMS": {
						"type": "string",
						"description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
					},
					"receiveSMSNotification": {
						"type": "string",
						"description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
					},
					"resetPassword": {
						"type": "string",
						"description": "During password reset, this value must be set to 'true'."
					},
					"secretary": {
						"type": "string",
						"description": "The name of the registrant's secretary or administrative assistant."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"timeZone": {
						"type": "string",
						"description": "The time zone in which the registrant does business (report as GMT +/- hours)."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"userField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"userField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"userProfileField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"userProfileField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"xcred_logonPasswordOld": {
						"type": "string",
						"description": "During password reset, the registrant must enter the old password."
					},
					"xcred_logonPasswordVerify": {
						"type": "string",
						"description": "During password reset, the registrant must enter the new password a second time."
					},
					"x_demographicField1": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField2": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField3": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField4": {
						"type": "string",
						"description": "Customizable field for demographic information; this is single-character field."
					},
					"x_demographicField5": {
						"type": "string",
						"description": "Customizable field for demographic information; a field of 254 characters."
					},
					"x_demographicField6": {
						"type": "string",
						"description": "Customizable field for demographic information; an integer field."
					},
					"x_demographicField7": {
						"type": "string",
						"description": "Customizable field for demographic information; a field var char, length 6."
					},
					"x_taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					}
				},
				"description": "Request of UserRegistrationUpdateCmd."
			},
			"person-singleContact": {
				"type": "object",
				"properties": {
					"addressType": {
						"type": "string"
					},
					"addressLine": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"addressId": {
						"type": "string"
					},
					"personTitle": {
						"type": "string"
					},
					"primary": {
						"type": "string"
					},
					"email2": {
						"type": "string"
					},
					"email1": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"middleName": {
						"type": "string"
					},
					"geographicalTaxCode": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"internalOfficeAddress": {
						"type": "string"
					},
					"fax2": {
						"type": "string"
					},
					"fax1": {
						"type": "string"
					},
					"organizationIdentifier": {
						"$ref": "#/components/schemas/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
					},
					"phone1Type": {
						"type": "string"
					},
					"nickName": {
						"type": "string"
					},
					"phone2Type": {
						"type": "string"
					},
					"phone2": {
						"type": "string"
					},
					"businessTitle": {
						"type": "string"
					},
					"phone1": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"bestCallingTime": {
						"type": "string"
					},
					"mobilePhone1Country": {
						"type": "string"
					},
					"phone2Publish": {
						"type": "string"
					},
					"mobilePhone1": {
						"type": "string"
					},
					"personIdentifier": {
						"$ref": "#/components/schemas/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
					},
					"organizationUnitName": {
						"type": "string"
					},
					"organizationName": {
						"type": "string"
					},
					"language": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"resourceId": {
						"type": "string"
					},
					"resourceName": {
						"type": "string"
					},
					"geographicalShippingCode": {
						"type": "string"
					},
					"phone1Publish": {
						"type": "string"
					},
					"attributes": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/java.util.Map.Entry"
						}
					},
					"country": {
						"type": "string"
					},
					"userDataField": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/person-singleContact.userDataField"
						}
					}
				}
			},
			"person-DeleteContact": {
				"type": "object",
				"properties": {
					"resourceName": {
						"type": "string"
					},
					"addressId": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			},
			"com.ibm.commerce.approval.beans.ApprovalStatusDataBean_IBM_Store_Summary": {
				"type": "object",
				"x-graphql-type-name": "approvalStatusStoreSummary",
				"properties": {
					"resultList": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"approvalStatusId": {
									"type": "string"
								},
								"approverGroupId": {
									"type": "string"
								},
								"submitTime": {
									"type": "string",
									"format": "date"
								},
								"flowTypeId": {
									"type": "string"
								},
								"stateId": {
									"type": "string"
								},
								"comment": {
									"type": "string"
								},
								"submitterId": {
									"type": "string"
								},
								"flowId": {
									"type": "string"
								},
								"approveTime": {
									"type": "string",
									"format": "date"
								},
								"status": {
									"type": "string"
								},
								"approverId": {
									"type": "string"
								},
								"entityId": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"com.ibm.commerce.approval.beans.ApprovalGroupTypeListBean_IBM_Store_Summary.resultList": {
				"type": "object",
				"x-graphql-type-name": "approvalGroupTypeSummaryList",
				"properties": {
					"memberGroupTypeId": {
						"type": "string"
					},
					"properties": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				}
			},
			"Person.UpdateCurrencyAndLanguagePreferenceCmd": {
				"type": "object",
				"properties": {
					"redirecturl": {
						"type": "string"
					},
					"viewTaskName": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler.UpdateApprovalStatusParameterDescription": {
				"required": [
					"aprv_act"
				],
				"type": "object",
				"x-graphql-type-name": "approvalStatusParameterDesc",
				"properties": {
					"comments": {
						"type": "string",
						"description": "Comment text for status change."
					},
					"aprv_act": {
						"type": "string",
						"description": "Approval status. Valid values are 1 for approve and 2 for reject.",
						"enum": [
							"1",
							"2"
						]
					}
				},
				"description": "Description of the post input body to update an approval status record."
			},
			"com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary.entitledOrganizations": {
				"type": "object",
				"properties": {
					"distinguishedName": {
						"type": "string"
					},
					"organizationId": {
						"type": "integer",
						"format": "int64"
					},
					"displayName": {
						"type": "string"
					},
					"memberId": {
						"type": "integer",
						"format": "int64"
					},
					"organizationName": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.approval.beans.ApprovalGroupTypeListBean_IBM_Store_Summary": {
				"type": "object",
				"properties": {
					"resultList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.approval.beans.ApprovalGroupTypeListBean_IBM_Store_Summary.resultList"
						}
					}
				}
			},
			"com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_In_Orgs_I_Can_Admin.orgIdRoleDataBeans": {
				"type": "object"
			},
			"com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary": {
				"type": "object",
				"x-graphql-type-name": "memberGroupListSummary",
				"properties": {
					"recordSetCount": {
						"type": "integer",
						"format": "int32"
					},
					"recordSetCompleteIndicator": {
						"type": "boolean"
					},
					"recordSetStartNumber": {
						"type": "integer",
						"format": "int32"
					},
					"resultList": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.member.beans.MemberGroupListDataBean_IBM_Store_Summary.resultList"
						}
					},
					"recordSetTotal": {
						"type": "integer",
						"format": "int32"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.DeleteContextAttribute": {
				"required": [
					"addressId",
					"userId"
				],
				"type": "object",
				"x-graphql-type-name": "deleteContextAttribute",
				"properties": {
					"userId": {
						"type": "array",
						"description": "The user identifier list.",
						"items": {
							"type": "string"
						}
					},
					"addressId": {
						"type": "array",
						"description": "The address identifier list.",
						"items": {
							"type": "string"
						}
					}
				},
				"description": "Delete context attribute response."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityAddRequest": {
				"required": [
					"distinguishedName",
					"orgEntityName",
					"orgEntityType",
					"parentMemberId"
				],
				"type": "object",
				"x-graphql-type-name": "organizationEntityAddRequest",
				"properties": {
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressType": {
						"type": "string",
						"description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB is used."
					},
					"administratorFirstName": {
						"type": "string",
						"description": "The first name of the administrator."
					},
					"administratorLastName": {
						"type": "string",
						"description": "The last name of the administrator."
					},
					"administratorMiddleName": {
						"type": "string",
						"description": "The middle name of the administrator."
					},
					"attributeName_storeId_action_sequence": {
						"type": "string",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: {attributeName}_{storeId}_{action}_{sequence}: string. The curly braced values must be replaced as follows: attributeName is any attribute specified in MBRATTRVAL table, storeId is the numerical id of the store (or null to indicate all stores), action is either 'r' (for replace) or 'd' (for delete), and sequence to indicate the sequence of this value in relation to other values for this attribute. Some examples. 'JobFunction_10001_r_1' : 'ProductManager' is specifying that the user has a JobFunction attribute value of ProductManager for the store 10001, this is for replacing the first (r_1) JobFunction attribute value for the user. JobFunction_null_d deletes all job functions for the user in all stores. "
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"businessCategory": {
						"type": "string",
						"description": "Describes the kind of business performed by an organization or organizational unit."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"distinguishedName": {
						"type": "string",
						"description": "DN of the organization or organizational unit, for LDAP use."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"legalId": {
						"type": "string",
						"description": "Registered organization identifier; may be null for an organizational unit."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"orgEntityField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityName": {
						"type": "string",
						"description": "The name of the organization or organizational unit. Leading and trailing spaces is trimmed. When the system is configured with LDAP, the following characters are not allowed when the orgEntityName is used to construct the distinguished name: 1. The # character occurring at the beginning of orgEntityName. 2. Any of the following characters: = , + \" \\ < > ;."
					},
					"orgEntityType": {
						"type": "string",
						"description": "The type of the organizational entity being added. O - Organization; OU - Organizational Unit."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"parentMemberId": {
						"type": "string",
						"description": "Required if orgEntityType equals 'OU': The member ID of the parent organizational entity where the new organizational entity is added. For an organization (orgEntityType=O), this parameter is not mandatory; it defaults to Root Organization."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					}
				},
				"description": "Request of OrgEntityAddCmd."
			},
			"com.ibm.commerce.rest.member.handler.PersonHandler.UserRegistrationAdminAddResponse": {
				"required": [
					"addressId",
					"personalizationID",
					"resourceName",
					"WCToken",
					"userId"
				],
				"type": "object",
				"x-graphql-type-name": "userRegistrationAdminAddResponse",
				"properties": {
					"userId": {
						"type": "string",
						"description": "The user unique identifier."
					},
					"logonId": {
						"type": "string",
						"description": "The logon ID of the user."
					},
					"addressId": {
						"type": "string",
						"description": "The address identifier of the user."
					},
					"personalizationID": {
						"type": "string"
					},
					"resourceName": {
						"type": "string"
					},
					"WCToken": {
						"type": "string"
					},
					"WCTrustedToken": {
						"type": "string"
					}
				},
				"description": "Response of UserRegistrationAdminAddCmd."
			},
			"com.ibm.commerce.rest.member.handler.PersonContactHandler.AddressIdentifier": {
				"required": [
					"addressId"
				],
				"type": "object",
				"properties": {
					"addressId": {
						"type": "string",
						"description": "The address identifier."
					}
				},
				"description": "Address identifier."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler.OrgEntityIdentity": {
				"required": [
					"addressId",
					"orgEntityId"
				],
				"type": "object",
				"x-graphql-type-name": "organizationIdentity",
				"properties": {
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"addressId": {
						"type": "string",
						"description": "The address identifier of the organization entity."
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary": {
				"type": "object",
				"x-graphql-type-name": "organizationListSummary",
				"properties": {
					"entitledOrganizations": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.member.beans.OrganizationListDataBean_IBM_Organization_Summary.entitledOrganizations"
						}
					},
					"accountCheck": {
						"type": "boolean"
					}
				}
			},
			"person-singleContact.userDataField": {
				"required": [
					"key"
				],
				"type": "object",
				"properties": {
					"value": {
						"type": "string"
					},
					"key": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details": {
				"type": "object",
				"x-graphql-type-name": "userListDetails",
				"properties": {
					"recordSetCount": {
						"type": "integer",
						"format": "int32"
					},
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"userDataBeans": {
						"type": "array",
						"nullable": true,
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans"
						}
					},
					"pageSize": {
						"type": "string"
					},
					"recordSetTotal": {
						"type": "integer",
						"format": "int32"
					},
					"recordSetCompleteIndicator": {
						"type": "boolean"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans": {
				"type": "object",
				"nullable": true,
				"properties": {
					"businessProfile": {
						"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.businessProfile"
					},
					"demographics": {
						"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.demographics"
					},
					"displayName": {
						"nullable": true,
						"type": "string"
					},
					"distinguishedName": {
						"type": "string"
					},
					"firstName": {
						"type": "string"
					},
					"lastName": {
						"type": "string"
					},
					"logonId": {
						"type": "string"
					},
					"memberAttributeValues": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.memberAttributeValues"
						}
					},
					"memberId": {
						"type": "string"
					},
					"parentMemberId": {
						"type": "string"
					},
					"personalizationId": {
						"nullable": true,
						"type": "string"
					},
					"preferredCurrency": {
						"nullable": true,
						"type": "string"
					},
					"preferredLanguageId": {
						"type": "string"
					},
					"profileType": {
						"type": "string"
					},
					"registerType": {
						"type": "string"
					},
					"roles": {
						"type": "array",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					},
					"userRoles": {
						"type": "array",
						"items": {
							"type": "object",
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean.userRoles"
						},
						"x-introduced": "9.1.15.0"
					},
					"state": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"userProfile": {
						"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userProfile"
					},
					"userRegistry": {
						"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userRegistry"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userProfile": {
				"type": "object",
				"nullable": true,
				"properties": {
					"preferredCommunication": {
						"nullable": true,
						"type": "string"
					},
					"preferredMeasure": {
						"nullable": true,
						"type": "string"
					},
					"displayName": {
						"nullable": true,
						"type": "string"
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"description": {
						"type": "string"
					},
					"preferredDelivery": {
						"nullable": true,
						"type": "string"
					},
					"receiveSMSNotification": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.businessProfile": {
				"type": "object",
				"nullable": true,
				"properties": {
					"organizationId": {
						"type": "string"
					},
					"employeeType": {
						"type": "string"
					},
					"departmentNumber": {
						"type": "string"
					},
					"employeeId": {
						"nullable": true,
						"type": "string"
					},
					"organizationUnitId": {
						"type": "string"
					},
					"requistionerId": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userRegistry": {
				"type": "object",
				"properties": {
					"logonId": {
						"type": "string"
					},
					"policyAccountId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.demographics": {
				"type": "object",
				"nullable": true,
				"properties": {
					"income": {
						"type": "string"
					},
					"numberOfChildren": {
						"type": "string"
					},
					"numberOfHouseholds": {
						"type": "string"
					},
					"gender": {
						"nullable": true,
						"type": "string"
					},
					"hobbies": {
						"type": "string"
					},
					"incomeCurrency": {
						"type": "string"
					},
					"timezone": {
						"type": "string"
					},
					"companyName": {
						"type": "string"
					},
					"orderBefore": {
						"type": "string"
					},
					"dateOfBirth": {
						"type": "string"
					},
					"age": {
						"type": "string"
					},
					"maritalStatus": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.memberAttributeValues": {
				"type": "object",
				"properties": {
					"storeEntityId": {
						"type": "string"
					},
					"memberAttributeValueId": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"memberAttribute": {
						"$ref": "#/components/schemas/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.memberAttributeValues.memberAttribute"
					}
				}
			},
			"com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.memberAttributeValues.memberAttribute": {
				"type": "object",
				"properties": {
					"getName": {
						"type": "string"
					},
					"getDescription": {
						"type": "string"
					},
					"getMemberAttributeId": {
						"type": "string"
					}
				}
			},
			"com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList": {
				"type": "object",
				"x-graphql-type-name": "approvalStatusSummary",
				"properties": {
					"recordSetCount": {
						"type": "integer"
					},
					"recordSetStartNumber": {
						"type": "integer"
					},
					"recordSetTotal": {
						"type": "integer"
					},
					"resultList": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"approvalStatusId": {
									"type": "string"
								},
								"approverGroupId": {
									"type": "string"
								},
								"submitTime": {
									"type": "string",
									"format": "date"
								},
								"flowTypeId": {
									"type": "string"
								},
								"stateId": {
									"type": "string"
								},
								"comment": {
									"type": "string"
								},
								"submitterId": {
									"type": "string"
								},
								"flowId": {
									"type": "string"
								},
								"approveTime": {
									"type": "string",
									"format": "date"
								},
								"status": {
									"type": "string"
								},
								"approverId": {
									"type": "string"
								},
								"entityId": {
									"type": "string"
								}
							}
						}
					},
					"recordSetCompleteIndicator": {
						"type": "boolean"
					}
				}
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityIdentity": {
				"required": [
					"addressId",
					"orgEntityId"
				],
				"type": "object",
				"x-graphql-type-name": "organizationIdentity",
				"properties": {
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"addressId": {
						"type": "string",
						"description": "The address identifier of the organization entity."
					},
					"viewTaskName": {
						"type": "string"
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityAddRequest": {
				"required": [
					"distinguishedName",
					"orgEntityName",
					"orgEntityType",
					"parentMemberId"
				],
				"type": "object",
				"x-graphql-type-name": "orgEntityAddRequest",
				"properties": {
					"addressType": {
						"type": "string",
						"description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB is used."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"orgEntityName": {
						"type": "string",
						"description": "The name of the organization or organizational unit. Leading and trailing spaces is trimmed. When the system is configured with LDAP, the following characters are not allowed when the orgEntityName is used to construct the distinguished name: 1. The # character occurring at the beginning of orgEntityName. 2. Any of the following characters: = , + \" \\ < > ;."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"customMemberAttributes": {
						"type": "array",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this organization using the following syntax: &attributeName_storeId_action_number=value.",
						"items": {
							"type": "string"
						}
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"distinguishedName": {
						"type": "string",
						"description": "DN of the organization or organizational unit, for LDAP use."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"administratorMiddleName": {
						"type": "string",
						"description": "The middle name of the administrator."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"administratorLastName": {
						"type": "string",
						"description": "The last name of the administrator."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"orgEntityField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"businessCategory": {
						"type": "string",
						"description": "Describes the kind of business performed by an organization or organizational unit."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"parentMemberId": {
						"type": "string",
						"description": "Required if orgEntityType equals 'OU': The member ID of the parent organizational entity where the new organizational entity is added. For an organization (orgEntityType=O), this parameter is not mandatory; it defaults to Root Organization."
					},
					"administratorFirstName": {
						"type": "string",
						"description": "The first name of the administrator."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"orgEntityType": {
						"type": "string",
						"description": "The type of the organizational entity being added. O - Organization; OU - Organizational Unit."
					},
					"legalId": {
						"type": "string",
						"description": "Registered organization identifier; may be null for an organizational unit."
					}
				},
				"description": "Request of OrgEntityAddCmd."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler_OrgEntityUpdateRequest": {
				"required": [
					"orgEntityId"
				],
				"type": "object",
				"x-graphql-type-name": "organizationEntityUpdateRequest",
				"properties": {
					"addressType": {
						"type": "string",
						"description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB is used."
					},
					"personTitle": {
						"type": "string",
						"description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
					},
					"orgEntityName": {
						"type": "string",
						"description": "The name of the organization or organizational unit."
					},
					"billingCodeType": {
						"type": "string",
						"description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
					},
					"orgEntityId": {
						"type": "string",
						"description": "The ID for this organization or organizational unit."
					},
					"customMemberAttributes": {
						"type": "array",
						"description": "You can manage custom member attributes (MBRATTRVAL table) for this organization using the following syntax: &attributeName_storeId_action_number=value.",
						"items": {
							"type": "string"
						}
					},
					"email2": {
						"type": "string",
						"description": "The registrant's secondary e-mail or Web address."
					},
					"email1": {
						"type": "string",
						"description": "The registrant's primary e-mail or Web address."
					},
					"city": {
						"type": "string",
						"description": "The name of the city where the registrant resides."
					},
					"administratorMiddleName": {
						"type": "string",
						"description": "The middle name of the administrator."
					},
					"middleName": {
						"type": "string",
						"description": "The middle name of the registrant."
					},
					"administratorLastName": {
						"type": "string",
						"description": "The last name of the administrator."
					},
					"addressField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"addressField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"phone2": {
						"type": "string",
						"description": "The registrant's secondary phone number."
					},
					"state": {
						"type": "string",
						"description": "The name of the state, province, or equivalent where the registrant resides."
					},
					"addressField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"fax2": {
						"type": "string",
						"description": "The registrant's secondary facsimile number."
					},
					"fax1": {
						"type": "string",
						"description": "The registrant's primary facsimile number."
					},
					"phone1Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"orgEntityField1": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField2": {
						"type": "string",
						"description": "Customizable field."
					},
					"orgEntityField3": {
						"type": "string",
						"description": "Customizable field."
					},
					"phone2Type": {
						"type": "string",
						"description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
					},
					"description": {
						"type": "string",
						"description": "A description of the registrant."
					},
					"publishPhone2": {
						"type": "string",
						"description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"address1": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address2": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"address3": {
						"type": "string",
						"description": "The registrant's street address, to a maximum of three lines of information."
					},
					"zipCode": {
						"type": "string",
						"description": "The ZIP or postal code of the registrant's address."
					},
					"packageSuppression": {
						"type": "string",
						"description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database."
					},
					"bestCallingTime": {
						"type": "string",
						"description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
					},
					"phone1": {
						"type": "string",
						"description": "The registrant's primary phone number."
					},
					"taxGeoCode": {
						"type": "string",
						"description": "A tax code based on geographical region, especially useful with tax software."
					},
					"publishPhone1": {
						"type": "string",
						"description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
					},
					"organizationUnitName": {
						"type": "string",
						"description": "The name of the unit within the organization that the registrant represents."
					},
					"firstName": {
						"type": "string",
						"description": "The first name of the registrant."
					},
					"organizationName": {
						"type": "string",
						"description": "The name of the organization that the registrant represents."
					},
					"businessCategory": {
						"type": "string",
						"description": "Describes the kind of business performed by an organization or organizational unit."
					},
					"preferredDelivery": {
						"type": "string",
						"description": "The registrant's preferred mode of delivery."
					},
					"shippingGeoCode": {
						"type": "string",
						"description": "A shipping code based on geographical region, especially useful with tax software."
					},
					"country": {
						"type": "string",
						"description": "The name of the country or region where the registrant resides."
					},
					"administratorFirstName": {
						"type": "string",
						"description": "The first name of the administrator."
					},
					"billingCode": {
						"type": "string",
						"description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
					},
					"lastName": {
						"type": "string",
						"description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
					},
					"legalId": {
						"type": "string",
						"description": "Registered organization identifier; may be null for an organizational unit."
					}
				},
				"description": "Request of OrgEntityUpdateCmd."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroups": {
				"required": [
					"URL",
					"orgEntityId",
					"segmentId"
				],
				"type": "object",
				"x-graphql-type-name": "updateApprovalGroups",
				"properties": {
					"URL": {
						"type": "string",
						"description": "The URL to call when the command completes successfully."
					},
					"orgEntityId": {
						"type": "string",
						"description": "The organization entity identifier."
					},
					"segmentId": {
						"type": "string",
						"description": "The ApprovalGroup identifier for a specific organization."
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.rest.member.handler.OrganizationHandler_UpdateApprovalGroupsResponse": {
				"type": "object",
				"x-graphql-type-name": "updateApprovalGroupsResponse",
				"properties": {
					"viewTaskName": {
						"type": "string"
					}
				},
				"description": "Information about an organization entity identity."
			},
			"com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details": {
				"type": "object",
				"x-graphql-type-name": "organizationListDetails",
				"properties": {
					"pageNumber": {
						"type": "integer",
						"format": "int32"
					},
					"pageSize": {
						"type": "integer",
						"format": "int32"
					},
					"recordSetCount": {
						"type": "integer",
						"format": "int32"
					},
					"recordSetTotal": {
						"type": "integer",
						"format": "int32"
					},
					"organizationHierarchy": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"recordSetCompleteIndicator": {
						"type": "boolean"
					},
					"organizationDataBeans": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.organizationDataBeans"
						}
					},
					"roleDataBeans": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.roleDataBeans"
						}
					}
				},
				"description": ""
			},
			"com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.roleDataBeans": {
				"type": "object",
				"required": [
					"description",
					"displayName",
					"roleId",
					"name"
				],
				"properties": {
					"description": {
						"nullable": true,
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"description": ""
			},
			"com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.organizationDataBeans": {
				"type": "object",
				"properties": {
					"administratorFirstName": {
						"type": "string"
					},
					"administratorLastName": {
						"type": "string"
					},
					"administratorMiddleName": {
						"type": "string"
					},
					"businessCategory": {
						"nullable": true,
						"type": "string"
					},
					"description": {
						"nullable": true,
						"type": "string"
					},
					"displayName": {
						"type": "string"
					},
					"distinguishedName": {
						"type": "string"
					},
					"legalId": {
						"nullable": true,
						"type": "string"
					},
					"memberId": {
						"type": "string"
					},
					"orgEntityField1": {
						"type": "string"
					},
					"orgEntityField2": {
						"type": "string"
					},
					"orgEntityField3": {
						"type": "string"
					},
					"orgEntityType": {
						"type": "string"
					},
					"organizationId": {
						"type": "string"
					},
					"organizationName": {
						"type": "string"
					},
					"owner": {
						"type": "integer",
						"format": "int64"
					},
					"ownerMemberId": {
						"type": "string"
					},
					"parentMemberId": {
						"type": "string"
					},
					"preferredDelivery": {
						"type": "string"
					},
					"roles": {
						"type": "array",
						"items": {
							"type": "integer",
							"format": "int32"
						}
					},
					"state": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"taxPayerId": {
						"type": "string",
						"description": "A string used to identify the user for taxation purposes."
					},
					"type": {
						"type": "string"
					}
				},
				"description": ""
			},
			"com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserRequestBody": {
				"required": [
					"logonId",
					"validationCode"
				],
				"type": "object",
				"x-graphql-type-name": "activateUserRequestBody",
				"properties": {
					"logonId": {
						"type": "string",
						"description": "The user's logon ID."
					},
					"validationCode": {
						"type": "string",
						"description": "The account validation code."
					}
				},
				"description": "Request body to activate the user account."
			},
			"com.ibm.commerce.rest.member.handler.UserActivateHandler.ActiveUserResponse": {
				"required": [
					"logonId",
					"redirecturl",
					"viewTaskName"
				],
				"type": "object",
				"x-graphql-type-name": "activateUserResponse",
				"properties": {
					"redirecturl": {
						"type": "string",
						"description": "The redirect URL."
					},
					"logonId": {
						"type": "string",
						"description": "The user's logon ID."
					},
					"viewTaskName": {
						"type": "string",
						"description": "The view task name."
					},
					"storeId": {
						"type": "string",
						"description": "The store identifier."
					},
					"langId": {
						"type": "string",
						"description": "The language ID."
					}
				},
				"description": "Response body to activate the user account."
			},
			"com.ibm.commerce.rest.member.handler.UserActivateHandler.ResendActiveUserRequestBody": {
				"required": [
					"logonId",
					"logonPassword"
				],
				"type": "object",
				"x-graphql-type-name": "resendActiveUserRequestBody",
				"properties": {
					"email1": {
						"type": "string",
						"description": "An alternative email that the user account activation email can be sent to."
					},
					"logonId": {
						"type": "string",
						"description": "The user's logon ID."
					},
					"logonPassword": {
						"type": "string",
						"description": "The user's logon password."
					}
				},
				"description": "Request body for resend user account activation email."
			},
			"ErrorMessageResponseContainer": {
				"type": "object",
				"properties": {
					"errors": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ErrorMessageResponse"
						}
					}
				}
			},
			"ErrorMessageResponse": {
				"type": "object",
				"properties": {
					"errorKey": {
						"type": "string",
						"description": "The error message key."
					},
					"errorParameters": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"errorMessage": {
						"type": "string",
						"description": "A descriptive error message."
					},
					"errorCode": {
						"type": "string",
						"description": "The error message code."
					}
				}
			}
		},
		"securitySchemes": {
			"basicAuth": {
				"type": "http",
				"scheme": "basic"
			}
		}
	},
	"security": [
		{
			"basicAuth": []
		}
	],
	"x-aes-documentation": {
		"gettingstarted": [
			{
				"content": "HCL Commerce REST services support JSON and XML formats for input and output data by default. The default format is JSON. When an XML String is sent to a REST service, you must set Content-Type HTTP header to be \"application/xml\". The REST service converts the XML input data to the JSON format that is accepted by REST services. Therefore, your input XML format must follow a certain structure so that it can be transformed to the JSON object that is accepted by REST services. See more here: <a href=https://help.hcltechsw.com/commerce/8.0.0/webservices/refs/rwvrestxmlformat.html </a> ",
				"codeSnippets": [],
				"name": "Response formats"
			},
			{
				"content": "Preview tokens are encrypted strings that encapsulates a set of preview options and restrictions on when and where the token can be used. Any user who is authorized to access your server and has a preview token, can complete preview actions in the same store for which that token is generated. See more here: <a href=https://help.hcltechsw.com/commerce/8.0.0/developer/concepts/cpvpreviewtoken.html?hl=preview%2Ctokens</a>",
				"codeSnippets": [],
				"name": "Preview tokens"
			},
			{
				"content": "Some HCL Commerce REST services require a request to be sent over HTTPS. Learn more here: <a href=https://help.hcltechsw.com/commerce/8.0.0/webservices/tasks/twvrestssl.html?hl=secure%2Csockets%2Clayer </a> ",
				"codeSnippets": [],
				"name": "Secure Sockets Layer"
			}
		]
	}
}
